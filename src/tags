!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AADevice	AADevice.cpp	/^	AADevice::AADevice(MiniConsole & mc_, fim::string opts ):DisplayDevice(mc_),$/;"	f	class:AADevice
AADevice	AADevice.h	/^class AADevice:public DisplayDevice $/;"	c
ARRAY_SIZE	FramebufferDevice.h	345;"	d
Arg	Arg.h	/^	Arg(const Arg &arg):val_(arg.val_){}$/;"	f	class:fim::Arg
Arg	Arg.h	/^	Arg(const fim::string &s):val_(s){}$/;"	f	class:fim::Arg
Arg	Arg.h	/^class Arg$/;"	c	namespace:fim
BIT_ORDER	FbiStuffText.cpp	117;"	d	file:
BIT_ORDER	FbiStuffText.cpp	152;"	d	file:
BIT_ORDER	FramebufferDevice.cpp	229;"	d	file:
BIT_ORDER	FramebufferDevice.cpp	261;"	d	file:
BIT_ORDER	Imlib2Device.cpp	492;"	d	file:
BIT_ORDER	Imlib2Device.cpp	529;"	d	file:
BIT_ORDER	SDLDevice.cpp	817;"	d	file:
BIT_ORDER	SDLDevice.cpp	853;"	d	file:
BOOL	FbiStuffPcx.cpp	/^typedef char BOOL;$/;"	t	namespace:fim	file:
BUFSIZE	fim_string.cpp	363;"	d	file:
BYTE_ORDER	FbiStuffText.cpp	119;"	d	file:
BYTE_ORDER	FbiStuffText.cpp	121;"	d	file:
BYTE_ORDER	FbiStuffText.cpp	153;"	d	file:
BYTE_ORDER	FramebufferDevice.cpp	231;"	d	file:
BYTE_ORDER	FramebufferDevice.cpp	233;"	d	file:
BYTE_ORDER	FramebufferDevice.cpp	262;"	d	file:
BYTE_ORDER	Imlib2Device.cpp	494;"	d	file:
BYTE_ORDER	Imlib2Device.cpp	496;"	d	file:
BYTE_ORDER	Imlib2Device.cpp	530;"	d	file:
BYTE_ORDER	SDLDevice.cpp	819;"	d	file:
BYTE_ORDER	SDLDevice.cpp	821;"	d	file:
BYTE_ORDER	SDLDevice.cpp	854;"	d	file:
Benchmarkable	Benchmarkable.h	/^		Benchmarkable(void){benchmarkstate=0;}$/;"	f	class:Benchmarkable
Benchmarkable	Benchmarkable.h	/^	class Benchmarkable{$/;"	c
Bpp_	SDLDevice.h	/^	fim_bpp_t Bpp_,bpp_;$/;"	m	class:SDLDevice
Browser	Browser.cpp	/^	Browser::Browser(CommandConsole &cc):$/;"	f	class:fim::Browser
Browser	Browser.h	/^	Browser(const Browser &b):$/;"	f	class:fim::Browser
Browser	Browser.h	/^class Browser:public Namespace$/;"	c	namespace:fim
BrowserT	Command.h	/^		BrowserT,$/;"	e	enum:fim::Command::__anon4
CACADevice	CACADevice.h	/^	CACADevice():DisplayDevice(){}$/;"	f	class:CACADevice
CACADevice	CACADevice.h	/^	CACADevice(MiniConsole & mc_):DisplayDevice(mc_){}$/;"	f	class:CACADevice
CACADevice	CACADevice.h	/^class CACADevice:public DisplayDevice $/;"	c
COLORMAP_DEFINED	FbiStuffPcx.cpp	/^bool COLORMAP_DEFINED;$/;"	m	namespace:fim	file:
Cache	Cache.cpp	/^	Cache::Cache(void)$/;"	f	class:fim::Cache
Cache	Cache.h	/^class Cache:public Namespace$/;"	c	namespace:fim
Command	Command.h	/^	Command(fim::string cmd,fim::string help,Browser *b=NULL,fim::string(Browser::*bf)(const std::vector<fim::string>&)=NULL) :cmd_(cmd),help_(help),browserf(bf),browser(b),type(0) { type=BrowserT;}$/;"	f	class:fim::Command
Command	Command.h	/^	Command(fim::string cmd,fim::string help,CommandConsole *c=NULL,fim::string(CommandConsole::*cf)(const std::vector<fim::string>&)=NULL) :cmd_(cmd),help_(help),consolef(cf),console(c),type(0) { type=CommandConsoleT;}$/;"	f	class:fim::Command
Command	Command.h	/^	Command(fim::string cmd,fim::string help,FimWindow *w=NULL,fim::string(FimWindow::*cf)(const std::vector<fim::string>&)=NULL) :cmd_(cmd),help_(help),windowf(cf),window(w),type(0) { type=WindowT;}$/;"	f	class:fim::Command
Command	Command.h	/^class Command$/;"	c	namespace:fim
CommandConsole	CommandConsole.cpp	/^	CommandConsole::CommandConsole(\/*FramebufferDevice &_framebufferdevice*\/):$/;"	f	class:fim::CommandConsole
CommandConsole	CommandConsole.h	/^class CommandConsole$/;"	c	namespace:fim
CommandConsoleT	Command.h	/^		CommandConsoleT $/;"	e	enum:fim::Command::__anon4
DBG	Var.h	35;"	d
DBG	interpreter.cpp	32;"	d	file:
DEVS	FramebufferDevice.h	/^struct DEVS {$/;"	s	namespace:fim
DITHER_CORE	FramebufferDevice.cpp	1497;"	d	file:
DITHER_LEVEL	FramebufferDevice.cpp	130;"	d	file:
DITHER_MASK	FramebufferDevice.cpp	139;"	d	file:
DITHER_MASK	FramebufferDevice.cpp	155;"	d	file:
DM	FramebufferDevice.cpp	/^static matrix   DM =$/;"	m	namespace:fim	file:
DefRefMode	fim.h	/^enum FimDocRefMode{ Txt, Man, DefRefMode=Txt};$/;"	e	enum:FimDocRefMode
DisplayDevice	DisplayDevice.cpp	/^	DisplayDevice::DisplayDevice(MiniConsole & mc):fontname_(NULL)$/;"	f	class:DisplayDevice
DisplayDevice	DisplayDevice.h	/^class DisplayDevice$/;"	c
Down	FimWindow.h	/^	enum Moves{Up,Down,Left,Right,NoMove};$/;"	e	enum:fim::FimWindow::Moves
DummyDisplayDevice	DummyDisplayDevice.h	/^	DummyDisplayDevice(MiniConsole & mc_):DisplayDevice(mc_){}$/;"	f	class:DummyDisplayDevice
DummyDisplayDevice	DummyDisplayDevice.h	/^	DummyDisplayDevice(void){}$/;"	f	class:DummyDisplayDevice
DummyDisplayDevice	DummyDisplayDevice.h	/^class DummyDisplayDevice:public DisplayDevice$/;"	c
EXTENTS	FbiStuffText.cpp	124;"	d	file:
EXTENTS	FbiStuffText.cpp	156;"	d	file:
EXTENTS	FramebufferDevice.cpp	236;"	d	file:
EXTENTS	FramebufferDevice.cpp	265;"	d	file:
EXTENTS	Imlib2Device.cpp	499;"	d	file:
EXTENTS	Imlib2Device.cpp	533;"	d	file:
EXTENTS	SDLDevice.cpp	824;"	d	file:
EXTENTS	SDLDevice.cpp	857;"	d	file:
EXTRA_COMMENT	FbiStuffLoader.h	/^    EXTRA_COMMENT = 1,$/;"	e	enum:fim::ida_extype
EXTRA_EXIF	FbiStuffLoader.h	/^    EXTRA_EXIF    = 2$/;"	e	enum:fim::ida_extype
ErrorCode	FbiStuffGif.cpp	/^    int ErrorCode; \/* used by newer versions (e.g.: >= 5) of library *\/$/;"	m	struct:fim::gif_state	file:
FBI_STUFF_LIST_H	FbiStuffList.h	27;"	d
FB_ACQ_REQ	FramebufferDevice.h	57;"	d
FB_ACTIVE	FramebufferDevice.h	54;"	d
FB_BPP	FramebufferDevice.h	351;"	d
FB_INACTIVE	FramebufferDevice.h	56;"	d
FB_MEM	FramebufferDevice.h	354;"	d
FB_MEM_LINE_OFFSET	FramebufferDevice.h	352;"	d
FB_MEM_OFFSET	FramebufferDevice.h	353;"	d
FB_REL_REQ	FramebufferDevice.h	55;"	d
FIM_AADEVICE_H	AADevice.h	22;"	d
FIM_AALIB_DRIVER_DEBUG	AADevice.h	31;"	d
FIM_AA_MINHEIGHT	AADevice.cpp	30;"	d	file:
FIM_AA_MINWIDTH	AADevice.cpp	29;"	d	file:
FIM_ACM_POSTCONF	fim.h	691;"	d
FIM_ACM_POSTDISPLAY	fim.h	681;"	d
FIM_ACM_POSTEXECUTIONCYCLE	fim.h	702;"	d
FIM_ACM_POSTGFIMRC	fim.h	697;"	d
FIM_ACM_POSTGOTO	fim.h	688;"	d
FIM_ACM_POSTHFIMRC	fim.h	693;"	d
FIM_ACM_POSTINTERACTIVECOMMAND	fim.h	699;"	d
FIM_ACM_POSTLOAD	fim.h	686;"	d
FIM_ACM_POSTPAN	fim.h	677;"	d
FIM_ACM_POSTPREFETCH	fim.h	683;"	d
FIM_ACM_POSTREDISPLAY	fim.h	679;"	d
FIM_ACM_POSTRELOAD	fim.h	684;"	d
FIM_ACM_POSTSCALE	fim.h	674;"	d
FIM_ACM_POSTUFIMRC	fim.h	695;"	d
FIM_ACM_POSTWINDOW	fim.h	704;"	d
FIM_ACM_PRECONF	fim.h	690;"	d
FIM_ACM_PREDISPLAY	fim.h	680;"	d
FIM_ACM_PREEXECUTIONCYCLE	fim.h	700;"	d
FIM_ACM_PREEXECUTIONCYCLEARGS	fim.h	701;"	d
FIM_ACM_PREGFIMRC	fim.h	696;"	d
FIM_ACM_PREGOTO	fim.h	689;"	d
FIM_ACM_PREHFIMRC	fim.h	692;"	d
FIM_ACM_PREINTERACTIVECOMMAND	fim.h	698;"	d
FIM_ACM_PRELOAD	fim.h	687;"	d
FIM_ACM_PREPAN	fim.h	676;"	d
FIM_ACM_PREPREFETCH	fim.h	682;"	d
FIM_ACM_PREREDISPLAY	fim.h	678;"	d
FIM_ACM_PRERELOAD	fim.h	685;"	d
FIM_ACM_PRESCALE	fim.h	675;"	d
FIM_ACM_PREUFIMRC	fim.h	694;"	d
FIM_ACM_PREWINDOW	fim.h	703;"	d
FIM_ADD_DOCLINE_FOR_CMD	fim.cpp	586;"	d	file:
FIM_ALIGNED	FramebufferDevice.h	/^	long     blue_dither_[256] FIM_ALIGNED;$/;"	m	class:fim::FramebufferDevice
FIM_ALIGNED	FramebufferDevice.h	/^	long     gray_dither_[256] FIM_ALIGNED;$/;"	m	class:fim::FramebufferDevice
FIM_ALIGNED	FramebufferDevice.h	/^	long     green_dither_[256]FIM_ALIGNED;$/;"	m	class:fim::FramebufferDevice
FIM_ALIGNED	FramebufferDevice.h	/^	long     red_dither_[256]  FIM_ALIGNED;$/;"	m	class:fim::FramebufferDevice
FIM_ALIGNED	fim.h	188;"	d
FIM_ALLOW_LOADER_VERBOSITY	fim.h	133;"	d
FIM_ARG_H	Arg.h	22;"	d
FIM_ATOX_BUFSIZE	fim.h	851;"	d
FIM_AUTOCMD_EXEC	fim.h	143;"	d
FIM_AUTOCMD_EXEC	fim.h	145;"	d
FIM_AUTOCOMMANDS_LIST	help-acm.cpp	3;"	d	file:
FIM_BENCHMARKABLE_H	Benchmarkable.h	22;"	d
FIM_BITRENDERING_DEF_WIDTH	fim.h	842;"	d
FIM_BLAKEN_BYTE	fim_plugin.cpp	47;"	d	file:
FIM_BROWSER_H	Browser.h	22;"	d
FIM_BROWSER_INSPECT	Browser.cpp	37;"	d	file:
FIM_BUGGED_ENLARGE	FimWindow.h	49;"	d
FIM_BUGGED_RESCALE	Image.cpp	573;"	d	file:
FIM_BYTES_COUNT	fim_limits.h	35;"	d
FIM_CACADEVICE_H	CACADevice.h	22;"	d
FIM_CACHE_H	Cache.h	22;"	d
FIM_CACHE_INSPECT	Cache.cpp	29;"	d	file:
FIM_CHARS_FOR_INT	fim_string.h	31;"	d
FIM_CHAR_BIT	common.h	106;"	d
FIM_CHAR_BITS	fim_limits.h	34;"	d
FIM_CMD_HELP_ALIGN	fim.h	790;"	d
FIM_CMD_HELP_CD	fim.h	792;"	d
FIM_CMD_HELP_EVAL	fim.h	795;"	d
FIM_CMD_HELP_GOTO	fim.h	798;"	d
FIM_CMD_HELP_HELP	fim.h	800;"	d
FIM_CMD_HELP_LIST	fim.h	791;"	d
FIM_CMD_HELP_PWD	fim.h	794;"	d
FIM_CMD_HELP_SCALE	fim.h	799;"	d
FIM_CMD_HELP_SET	fim.h	793;"	d
FIM_CMD_HELP_SYSTEM	fim.h	796;"	d
FIM_CMD_HELP_WINDOW	fim.h	797;"	d
FIM_CNS_ANGLE_ONE	fim.h	338;"	d
FIM_CNS_ANGLE_ZERO	fim.h	339;"	d
FIM_CNS_ARCHIVE_RE	fim.h	400;"	d
FIM_CNS_BPP_INVALID	fim.h	402;"	d
FIM_CNS_BUGS_FILE	fim.h	326;"	d
FIM_CNS_CLEARTERM	fim.h	409;"	d
FIM_CNS_CSU	fim.h	408;"	d
FIM_CNS_DEFAULT_IFNAME	fim.h	357;"	d
FIM_CNS_DIRSEP_CHAR	fim.h	362;"	d
FIM_CNS_DIRSEP_STRING	fim.h	361;"	d
FIM_CNS_DOC_PATH	fim.h	332;"	d
FIM_CNS_DSFF	fim.h	398;"	d
FIM_CNS_EMPTY_FP_VAL	fim.h	364;"	d
FIM_CNS_EMPTY_INT_VAL	fim.h	365;"	d
FIM_CNS_EMPTY_RESULT	fim.h	367;"	d
FIM_CNS_EMPTY_STRING	fim.h	354;"	d
FIM_CNS_ERR_QUIT	fim.h	366;"	d
FIM_CNS_EXAMPLE_FILENAME	fim.h	335;"	d
FIM_CNS_EX_ARGS_STRING	fim.h	388;"	d
FIM_CNS_EX_CMDS_STRING	fim.h	386;"	d
FIM_CNS_EX_CMD_STRING	fim.h	379;"	d
FIM_CNS_EX_DSC_STRING	fim.h	389;"	d
FIM_CNS_EX_EVT_STRING	fim.h	387;"	d
FIM_CNS_EX_EXP_STRING	fim.h	384;"	d
FIM_CNS_EX_FCT_STRING	fim.h	392;"	d
FIM_CNS_EX_FNS_STRING	fim.h	381;"	d
FIM_CNS_EX_FN_STRING	fim.h	380;"	d
FIM_CNS_EX_ID_STRING	fim.h	383;"	d
FIM_CNS_EX_KC_STRING	fim.h	382;"	d
FIM_CNS_EX_KSY_STRING	fim.h	378;"	d
FIM_CNS_EX_NUM_STRING	fim.h	395;"	d
FIM_CNS_EX_PATH_STRING	fim.h	390;"	d
FIM_CNS_EX_PAT_STRING	fim.h	385;"	d
FIM_CNS_EX_RES_STRING	fim.h	394;"	d
FIM_CNS_EX_RE_STRING	fim.h	393;"	d
FIM_CNS_EX_SCALE_STRING	fim.h	396;"	d
FIM_CNS_EX_SYSC_STRING	fim.h	391;"	d
FIM_CNS_FIM	fim.h	323;"	d
FIM_CNS_FIM_APPTITLE	fim.h	369;"	d
FIM_CNS_FIM_APPTITLE	fim.h	371;"	d
FIM_CNS_FIRST	fim.h	406;"	d
FIM_CNS_FP_ZERO	fim.h	363;"	d
FIM_CNS_GAMMA_DEFAULT	fim.h	340;"	d
FIM_CNS_GAMMA_DEFAULT_STR	fim.h	341;"	d
FIM_CNS_HIST_COMPLETE_FILENAME	fim.h	330;"	d
FIM_CNS_HIST_FILENAME	fim.h	329;"	d
FIM_CNS_HOME_VAR	fim.h	328;"	d
FIM_CNS_K	fim.h	403;"	d
FIM_CNS_LAST	fim.h	405;"	d
FIM_CNS_LCY	fim.h	324;"	d
FIM_CNS_M	fim.h	404;"	d
FIM_CNS_NEWLINE	fim.h	355;"	d
FIM_CNS_PUSHDIR_RE	fim.h	399;"	d
FIM_CNS_QU_MA_STRING	fim.h	360;"	d
FIM_CNS_RAW_KEYS_MESG	CommandConsole.cpp	48;"	d	file:
FIM_CNS_RAW_KEYS_MESG	CommandConsole.cpp	50;"	d	file:
FIM_CNS_SCALEDELTA	fim.h	353;"	d
FIM_CNS_SCALEFACTOR	fim.h	336;"	d
FIM_CNS_SCALEFACTOR_DELTA	fim.h	343;"	d
FIM_CNS_SCALEFACTOR_MULTIPLIER	fim.h	342;"	d
FIM_CNS_SCALEFACTOR_ONE	fim.h	337;"	d
FIM_CNS_SCALEFACTOR_ZERO	fim.h	344;"	d
FIM_CNS_SCROLL_DEFAULT	fim.h	346;"	d
FIM_CNS_SHELL	fim.h	397;"	d
FIM_CNS_SLASH_CHAR	fim.h	358;"	d
FIM_CNS_SLASH_STRING	fim.h	359;"	d
FIM_CNS_SLIDESHOW_CMD	fim.h	804;"	d
FIM_CNS_STEPS_DEFAULT	fim.h	348;"	d
FIM_CNS_STEPS_DEFAULT_N	fim.h	347;"	d
FIM_CNS_STEPS_DEFAULT_P	fim.h	349;"	d
FIM_CNS_STEPS_MIN	fim.h	350;"	d
FIM_CNS_SYS_RC_FILEPATH	fim.h	331;"	d
FIM_CNS_TERM_VAR	fim.h	327;"	d
FIM_CNS_USR_RC_COMPLETE_FILEPATH	fim.h	334;"	d
FIM_CNS_USR_RC_FILEPATH	fim.h	333;"	d
FIM_CNS_VERBOSITY_LOADER	fim.h	401;"	d
FIM_CNS_VICSZ	fim.h	407;"	d
FIM_CNS_WENLARGE_STEPS_DEFAULT	fim.h	352;"	d
FIM_CNS_WGROW_STEPS_DEFAULT	fim.h	351;"	d
FIM_COMMANDCONSOLE_H	CommandConsole.h	23;"	d
FIM_COMMAND_H	Command.h	22;"	d
FIM_COMMON_H	common.h	22;"	d
FIM_COMPLETE_INSERTING_DOUBLE_QUOTE	readline.cpp	34;"	d	file:
FIM_COMPLETE_ONLY_IF_QUOTED	readline.cpp	33;"	d	file:
FIM_CONSOLE_BLOCKSIZE	fim.h	840;"	d
FIM_CONSOLE_DEF_ROWS	fim.h	848;"	d
FIM_CONSOLE_DEF_WIDTH	fim.h	841;"	d
FIM_CONSOLE_H	DebugConsole.h	22;"	d
FIM_COOL_WINDOWS_SPLITTING	FimWindow.cpp	388;"	d	file:
FIM_CR_BS	Cache.h	32;"	d
FIM_CR_CD	Cache.h	34;"	d
FIM_CR_CN	Cache.h	33;"	d
FIM_DDN_INN_AA	fim.h	658;"	d
FIM_DDN_INN_CACA	fim.h	660;"	d
FIM_DDN_INN_DUMB	fim.h	662;"	d
FIM_DDN_INN_FB	fim.h	652;"	d
FIM_DDN_INN_IL2	fim.h	656;"	d
FIM_DDN_INN_SDL	fim.h	654;"	d
FIM_DDN_VARS	fim.h	665;"	d
FIM_DDN_VAR_AA	fim.h	659;"	d
FIM_DDN_VAR_CACA	fim.h	661;"	d
FIM_DDN_VAR_DUMB	fim.h	664;"	d
FIM_DDN_VAR_FB	fim.h	653;"	d
FIM_DDN_VAR_IL2	fim.h	657;"	d
FIM_DDN_VAR_SDL	fim.h	655;"	d
FIM_DEBUGGING_FOR_ARM_WITH_VITALY	FramebufferDevice.cpp	72;"	d	file:
FIM_DEFAULT_AS_BINARY_BPP	fim.h	860;"	d
FIM_DEFAULT_EXAMPLE_FILE_CONTENTS	examples.h	/^const fim_char_t * FIM_DEFAULT_EXAMPLE_FILE_CONTENTS =$/;"	v
FIM_DEFAULT_FB_FILE	fim.h	859;"	d
FIM_DEFAULT_GRAMMAR_FILE_CONTENTS	grammar.h	/^const fim_char_t * FIM_DEFAULT_GRAMMAR_FILE_CONTENTS =$/;"	v
FIM_DEFAULT_HARDCODEDFONT_STRING	fim.h	861;"	d
FIM_DEFAULT_WINDOW_HEIGHT	fim.h	844;"	d
FIM_DEFAULT_WINDOW_WIDTH	fim.h	843;"	d
FIM_DELIMIT_TO_100	fim.h	124;"	d
FIM_DGifCloseFile_ARG	FbiStuffGif.cpp	48;"	d	file:
FIM_DGifCloseFile_ARG	FbiStuffGif.cpp	50;"	d	file:
FIM_DISABLE_WINDOW_SPLITTING	FimWindow.h	36;"	d
FIM_DISPLAY_DEVICE_H	DisplayDevice.h	22;"	d
FIM_DUMMYDISPLAY_DEVICE_H	DummyDisplayDevice.h	22;"	d
FIM_EMSG_CACHING_STDIN	fim.h	291;"	d
FIM_EMSG_NOMARKUNMARK	fim.h	296;"	d
FIM_EMSG_NO_READ_STDIN_IMAGE	fim.h	290;"	d
FIM_EMSG_NO_SCRIPTING	fim.h	289;"	d
FIM_EMSG_OUT_OF_MEM	fim.h	292;"	d
FIM_EMSG_UNFINISHED	fim.h	293;"	d
FIM_ENV_DISPLAY	fim.h	301;"	d
FIM_ENV_FBFONT	fim.h	304;"	d
FIM_ENV_FBGAMMA	fim.h	303;"	d
FIM_ENV_FRAMEBUFFER	fim.h	302;"	d
FIM_EPR_CONVERT	fim.h	259;"	d
FIM_EPR_DIA	fim.h	257;"	d
FIM_EPR_FIG2DEV	fim.h	255;"	d
FIM_EPR_INKSCAPE	fim.h	258;"	d
FIM_EPR_XCFTOPNM	fim.h	256;"	d
FIM_EPR_ZCAT	fim.h	260;"	d
FIM_ERR_BAD_PARAMS	fim.h	270;"	d
FIM_ERR_BUFFER_FULL	fim.h	268;"	d
FIM_ERR_GENERIC	fim.h	266;"	d
FIM_ERR_NO_ERROR	fim.h	265;"	d
FIM_ERR_OOPS	fim.h	271;"	d
FIM_ERR_TO_PERR	fim.h	273;"	d
FIM_ERR_UNSUPPORTED	fim.h	267;"	d
FIM_ERR_UNSUPPORTED_DEVICE	fim.h	269;"	d
FIM_EXIF_BUFSIZE	fim.h	832;"	d
FIM_EXPERIMEMTAL_IMG_NMSPC	fim.h	139;"	d
FIM_EXPERIMEMTAL_VAR_EXPANDOS	fim.h	140;"	d
FIM_E_FILE	fim.h	/^enum fim_image_source_t { FIM_E_FILE=-11, FIM_E_STDIN=-22};	\/* these *\/$/;"	e	enum:fim::fim_image_source_t
FIM_E_NO_IMAGE	common.h	99;"	d
FIM_E_NO_MEM	common.h	103;"	d
FIM_E_NO_VIEWPORT	common.h	100;"	d
FIM_E_STDIN	fim.h	/^enum fim_image_source_t { FIM_E_FILE=-11, FIM_E_STDIN=-22};	\/* these *\/$/;"	e	enum:fim::fim_image_source_t
FIM_E_TRAGIC	common.h	102;"	d
FIM_E_WINDOW_ERROR	common.h	101;"	d
FIM_FBDEV_FILE_MAX_CHARS	fim.h	858;"	d
FIM_FBISTUFFFBTOOLS_H	FbiStuffFbtools.h	30;"	d
FIM_FBISTUFF_INSPECT	FbiStuff.cpp	54;"	d	file:
FIM_FBI_FALSE	FramebufferDevice.h	344;"	d
FIM_FBI_FALSE	FramebufferDevice.h	61;"	d
FIM_FBI_FB_MODES_LABEL_BUFSIZE	FramebufferDevice.cpp	74;"	d	file:
FIM_FBI_FB_MODES_LINE_BUFSIZE	FramebufferDevice.cpp	73;"	d	file:
FIM_FBI_FB_MODES_VALUE_BUFSIZE	FramebufferDevice.cpp	75;"	d	file:
FIM_FBI_PPM_LINEBUFSIZE	fim.h	853;"	d
FIM_FBI_PRINTF	fim.h	198;"	d
FIM_FBI_STUFF_H	FbiStuff.h	27;"	d
FIM_FBI_TRUE	FramebufferDevice.h	343;"	d
FIM_FBI_TRUE	FramebufferDevice.h	60;"	d
FIM_FFL_PRT	Var.h	31;"	d
FIM_FILE_BUF_SIZE	fim.h	850;"	d
FIM_FILE_PROBE_BLKSIZE	fim.h	839;"	d
FIM_FIM_H	fim.h	22;"	d
FIM_FIM_STREAM_H	fim_stream.h	22;"	d
FIM_FLAG_DEFAULT	Browser.h	25;"	d
FIM_FLAG_FLIP	fim.h	874;"	d
FIM_FLAG_MIRROR	fim.h	873;"	d
FIM_FLAG_PUSH_REC	Browser.h	26;"	d
FIM_FLAG_RGB2GRAY	fim.h	875;"	d
FIM_FLAG_RGB2GRAYGRAYGRAY	fim.h	876;"	d
FIM_FLA_MAGNIFY	fim.h	772;"	d
FIM_FLA_NEXT	fim.h	770;"	d
FIM_FLA_NEXT_FILE	fim.h	766;"	d
FIM_FLA_NEXT_PAGE	fim.h	768;"	d
FIM_FLA_PREV	fim.h	771;"	d
FIM_FLA_PREV_FILE	fim.h	767;"	d
FIM_FLA_PREV_PAGE	fim.h	769;"	d
FIM_FLA_REDUCE	fim.h	773;"	d
FIM_FLC_FLIP	fim.h	777;"	d
FIM_FLC_MAGNIFY	fim.h	786;"	d
FIM_FLC_MIRROR	fim.h	776;"	d
FIM_FLC_NEXT	fim.h	774;"	d
FIM_FLC_NEXT_FILE	fim.h	782;"	d
FIM_FLC_NEXT_PAGE	fim.h	784;"	d
FIM_FLC_PAN_DOWN	fim.h	779;"	d
FIM_FLC_PAN_LEFT	fim.h	780;"	d
FIM_FLC_PAN_RIGHT	fim.h	781;"	d
FIM_FLC_PAN_UP	fim.h	778;"	d
FIM_FLC_PREV	fim.h	775;"	d
FIM_FLC_PREV_FILE	fim.h	783;"	d
FIM_FLC_PREV_PAGE	fim.h	785;"	d
FIM_FLC_REDUCE	fim.h	787;"	d
FIM_FLT_ALIAS	fim.h	711;"	d
FIM_FLT_ALIGN	fim.h	712;"	d
FIM_FLT_AUTOCMD	fim.h	713;"	d
FIM_FLT_AUTOCMD_DEL	fim.h	714;"	d
FIM_FLT_BASENAME	fim.h	716;"	d
FIM_FLT_BIND	fim.h	715;"	d
FIM_FLT_CD	fim.h	717;"	d
FIM_FLT_CLEAR	fim.h	718;"	d
FIM_FLT_COMMANDS	fim.h	719;"	d
FIM_FLT_DESATURATE	fim.h	720;"	d
FIM_FLT_DESC	fim.h	723;"	d
FIM_FLT_DISPLAY	fim.h	721;"	d
FIM_FLT_DUMP_KEY_CODES	fim.h	722;"	d
FIM_FLT_ECHO	fim.h	724;"	d
FIM_FLT_ELSE	fim.h	725;"	d
FIM_FLT_EVAL	fim.h	727;"	d
FIM_FLT_EXEC	fim.h	726;"	d
FIM_FLT_FILE	fim.h	728;"	d
FIM_FLT_GETENV	fim.h	729;"	d
FIM_FLT_GOTO	fim.h	730;"	d
FIM_FLT_HELP	fim.h	731;"	d
FIM_FLT_HELP_DESC	fim.h	801;"	d
FIM_FLT_HELP_DISPLAY	fim.h	802;"	d
FIM_FLT_IF	fim.h	732;"	d
FIM_FLT_INFO	fim.h	733;"	d
FIM_FLT_LIST	fim.h	735;"	d
FIM_FLT_LOAD	fim.h	734;"	d
FIM_FLT_NEGATE	fim.h	736;"	d
FIM_FLT_NO_IMAGE	fim.h	737;"	d
FIM_FLT_PAN	fim.h	738;"	d
FIM_FLT_POPEN	fim.h	739;"	d
FIM_FLT_PREAD	fim.h	740;"	d
FIM_FLT_PREFETCH	fim.h	741;"	d
FIM_FLT_PWD	fim.h	742;"	d
FIM_FLT_QUIT	fim.h	754;"	d
FIM_FLT_RECORDING	fim.h	755;"	d
FIM_FLT_REDISPLAY	fim.h	743;"	d
FIM_FLT_RELOAD	fim.h	744;"	d
FIM_FLT_ROTATE	fim.h	745;"	d
FIM_FLT_SCALE	fim.h	746;"	d
FIM_FLT_SCROLLDOWN	fim.h	747;"	d
FIM_FLT_SCROLLFORWARD	fim.h	748;"	d
FIM_FLT_SET	fim.h	749;"	d
FIM_FLT_SET_CONSOLE_MODE	fim.h	751;"	d
FIM_FLT_SET_INTERACTIVE_MODE	fim.h	750;"	d
FIM_FLT_SLEEP	fim.h	757;"	d
FIM_FLT_STATUS	fim.h	752;"	d
FIM_FLT_STDOUT	fim.h	753;"	d
FIM_FLT_SYSTEM	fim.h	756;"	d
FIM_FLT_UNALIAS	fim.h	759;"	d
FIM_FLT_UNBIND	fim.h	760;"	d
FIM_FLT_USLEEP	fim.h	758;"	d
FIM_FLT_VARIABLES	fim.h	761;"	d
FIM_FLT_WHILE	fim.h	762;"	d
FIM_FLT_WINDOW	fim.h	763;"	d
FIM_FONT_DEBUG	FontServer.cpp	31;"	d	file:
FIM_FONT_SERVER_H	FontServer.h	28;"	d
FIM_FPRINTF	fim_types.h	80;"	d
FIM_FRAC	SDLDevice.cpp	37;"	d	file:
FIM_FRAMEBUFFER_DEVICE_H	FramebufferDevice.h	27;"	d
FIM_GIFLIB_RETIRED_PrintGifError	FbiStuffGif.cpp	42;"	d	file:
FIM_GIFLIB_RETIRED_PrintGifError	FbiStuffGif.cpp	44;"	d	file:
FIM_GIFLIB_STATE_HAS_ERRCODE	FbiStuffGif.cpp	36;"	d	file:
FIM_GIFLIB_STATE_HAS_ERRCODE	FbiStuffGif.cpp	38;"	d	file:
FIM_HALF_MAX_SIGNED	common.h	109;"	d
FIM_HAS_MISC_FBI_OPS	FbiStuff.cpp	438;"	d	file:
FIM_HAVE_FULL_PROBING_LOADER	FbiStuff.cpp	43;"	d	file:
FIM_HORRIBLE_CACHE_INVALIDATING_HACK	Browser.cpp	26;"	d	file:
FIM_IL2_PRINTF	Imlib2Device.cpp	37;"	d	file:
FIM_IMAGE_H	Image.h	23;"	d
FIM_IMAGE_INSPECT	Image.cpp	35;"	d	file:
FIM_IMLIB2DEVICE_H	Imlib2Device.h	22;"	d
FIM_IMLIB2_X_INPUT_MASK	Imlib2Device.cpp	39;"	d	file:
FIM_IMLIB2_X_MASK	Imlib2Device.cpp	41;"	d	file:
FIM_IMLIB2_X_WINDOW_MASK	Imlib2Device.cpp	40;"	d	file:
FIM_INIT_LIST_HEAD	FbiStuffList.h	61;"	d
FIM_INTERNAL_LANGUAGE_SHORTCUT_SHORT_HELP	fim.h	416;"	d
FIM_INT_DET_PCNT	fim.h	123;"	d
FIM_INT_FRAC	fim.h	414;"	d
FIM_INT_PCNT	fim.h	120;"	d
FIM_INT_PCNT_OF_100	fim.h	121;"	d
FIM_INT_PCNT_SAFE	fim.h	122;"	d
FIM_INVALID_IDX	CommandConsole.cpp	52;"	d	file:
FIM_INVERT_BYTE	fim_plugin.cpp	46;"	d	file:
FIM_IS_SIGNED	common.h	107;"	d
FIM_IS_SIGNED	fim_limits.h	27;"	d
FIM_IS_UNSIGNED	fim_limits.h	29;"	d
FIM_I_ROT_L	Image.h	/^	enum { FIM_I_ROT_L=0, FIM_I_ROT_R=1}; \/* internal *\/$/;"	e	enum:fim::Image::__anon10
FIM_I_ROT_R	Image.h	/^	enum { FIM_I_ROT_L=0, FIM_I_ROT_R=1}; \/* internal *\/$/;"	e	enum:fim::Image::__anon10
FIM_KBD_ANY	fim.h	628;"	d
FIM_KBD_ASTERISK	fim.h	643;"	d
FIM_KBD_BACKSPACE	fim.h	621;"	d
FIM_KBD_BACKSPACE_	fim.h	622;"	d
FIM_KBD_COLON	fim.h	636;"	d
FIM_KBD_DEL	fim.h	624;"	d
FIM_KBD_DOWN	fim.h	633;"	d
FIM_KBD_END	fim.h	627;"	d
FIM_KBD_ENTER	fim.h	618;"	d
FIM_KBD_ESC	fim.h	629;"	d
FIM_KBD_GT	fim.h	644;"	d
FIM_KBD_HOME	fim.h	626;"	d
FIM_KBD_INS	fim.h	625;"	d
FIM_KBD_LEFT	fim.h	630;"	d
FIM_KBD_LT	fim.h	645;"	d
FIM_KBD_MENU	fim.h	620;"	d
FIM_KBD_MINUS	fim.h	641;"	d
FIM_KBD_MOUSE_LEFT	fim.h	638;"	d
FIM_KBD_MOUSE_RIGHT	fim.h	639;"	d
FIM_KBD_PAGEDOWN	fim.h	635;"	d
FIM_KBD_PAGEUP	fim.h	634;"	d
FIM_KBD_PAUSE	fim.h	619;"	d
FIM_KBD_PLUS	fim.h	640;"	d
FIM_KBD_RIGHT	fim.h	631;"	d
FIM_KBD_SEMICOLON	fim.h	637;"	d
FIM_KBD_SLASH	fim.h	642;"	d
FIM_KBD_SPACE	fim.h	623;"	d
FIM_KBD_TAB	fim.h	617;"	d
FIM_KBD_UNDERSCORE	fim.h	646;"	d
FIM_KBD_UP	fim.h	632;"	d
FIM_KEY_OFFSET	CommandConsole.cpp	54;"	d	file:
FIM_LEX_H	lex.h	22;"	d
FIM_LIBERR_BUFSIZE	fim.h	834;"	d
FIM_LIKELY	fim.h	187;"	d
FIM_LIMITS_FIM_H	fim_limits.h	23;"	d
FIM_LINE_CERR	fim.h	118;"	d
FIM_LINE_COUT	fim.h	119;"	d
FIM_LINUX_CONSOLEFONTS_DIR	fim.h	854;"	d
FIM_LINUX_LINKFILENAME_BUFSIZE	fim.h	835;"	d
FIM_LINUX_RAND_FILE	fim.h	857;"	d
FIM_LINUX_STDIN_FILE	fim.h	855;"	d
FIM_LINUX_STDOUT_FILE	fim.h	856;"	d
FIM_LIST_HEAD	FbiStuffList.h	53;"	d
FIM_LIST_HEAD	FbiStuffList.h	58;"	d
FIM_LIST_HEAD_INIT	FbiStuffList.h	49;"	d
FIM_LIST_HEAD_INIT	FbiStuffList.h	56;"	d
FIM_LOUD_CACHE_STUFF	Cache.cpp	41;"	d	file:
FIM_MAN_fB	fim.h	883;"	d
FIM_MAN_fR	fim.h	884;"	d
FIM_MAX	fim.h	411;"	d
FIM_MAXLINE_BUFSIZE	fim.h	828;"	d
FIM_MAX_FONT_HEIGHT	FontServer.cpp	40;"	d	file:
FIM_MAX_INT	common.h	112;"	d
FIM_MAX_MIPMAPS	fim.h	434;"	d
FIM_MAX_SIGNED	common.h	110;"	d
FIM_MAX_SIGNED	fim_limits.h	31;"	d
FIM_MAX_UNSIGNED	common.h	108;"	d
FIM_MAX_UNSIGNED	fim_limits.h	30;"	d
FIM_MAX_VALUE_FOR_TYPE	common.h	111;"	d
FIM_MAX_VALUE_FOR_TYPE	fim_limits.h	33;"	d
FIM_METAINFO_BUFSIZE	fim.h	831;"	d
FIM_MIN	fim.h	412;"	d
FIM_MIN_SIGNED	fim_limits.h	32;"	d
FIM_MOD	fim.h	413;"	d
FIM_MSG_CONSOLE_FIRST_LINE_BANNER	fim.h	866;"	d
FIM_MSG_CONSOLE_LONG_LINE	fim.h	867;"	d
FIM_MSG_WAIT_PIPING	fim.h	868;"	d
FIM_NAMESPACE_H	Namespace.h	23;"	d
FIM_NO_OP_STATEMENT	fim.h	197;"	d
FIM_NO_ROT	Image.h	/^	enum { FIM_NO_ROT=0,FIM_ROT_ROUND=4 };$/;"	e	enum:fim::Image::__anon8
FIM_NS_SV	Namespace.cpp	25;"	d	file:
FIM_NS_SV	Namespace.cpp	27;"	d	file:
FIM_OPTIMIZATION_20120129	FbiStuff.cpp	2306;"	d	file:
FIM_OSW_BINARY	fim.h	310;"	d
FIM_OSW_DUMP_SCRIPTOUT	fim.h	318;"	d
FIM_OSW_EXECUTE_COMMANDS	fim.h	312;"	d
FIM_OSW_EXECUTE_COMMANDS_EARLY	fim.h	313;"	d
FIM_OSW_EXECUTE_SCRIPT	fim.h	314;"	d
FIM_OSW_FINAL_COMMANDS	fim.h	315;"	d
FIM_OSW_IMAGE_FROM_STDIN	fim.h	317;"	d
FIM_OSW_OUTPUT_DEVICE	fim.h	309;"	d
FIM_OSW_SCRIPT_FROM_STDIN	fim.h	316;"	d
FIM_OSW_TEXT	fim.h	311;"	d
FIM_PATH_MAX	fim.h	103;"	d
FIM_PDF_USE_FILENO	FbiStuffPdf.cpp	61;"	d	file:
FIM_PDF_USE_FILENO	FbiStuffPdf.cpp	63;"	d	file:
FIM_PERR_BAD_PARAMS	fim.h	283;"	d
FIM_PERR_GENERIC	fim.h	279;"	d
FIM_PERR_NO_ERROR	fim.h	278;"	d
FIM_PERR_OOPS	fim.h	284;"	d
FIM_PERR_UNSUPPORTED	fim.h	280;"	d
FIM_PERR_UNSUPPORTED_DEVICE	fim.h	282;"	d
FIM_PIPE_BUFSIZE	fim.h	837;"	d
FIM_PIPE_CMD_BUFSIZE	fim.h	838;"	d
FIM_PLUGIN_FIM_H	fim_plugin.h	23;"	d
FIM_PR	Browser.cpp	39;"	d	file:
FIM_PR	Browser.cpp	41;"	d	file:
FIM_PR	Cache.cpp	31;"	d	file:
FIM_PR	Cache.cpp	33;"	d	file:
FIM_PR	FbiStuff.cpp	56;"	d	file:
FIM_PR	FbiStuff.cpp	58;"	d	file:
FIM_PR	Image.cpp	37;"	d	file:
FIM_PR	Image.cpp	39;"	d	file:
FIM_PRINTFNUM_BUFSIZE	fim.h	829;"	d
FIM_PRINTINUM_BUFSIZE	fim.h	830;"	d
FIM_PRId32	FbiStuffTiff.cpp	89;"	d	file:
FIM_PROBABLY_SAME_TYPES	fim_limits.h	28;"	d
FIM_PROCESS_BYTE	fim_plugin.cpp	48;"	d	file:
FIM_PROGRESSIVE_RESCALING	Image.cpp	645;"	d	file:
FIM_PSF1_MAGIC0	FontServer.cpp	34;"	d	file:
FIM_PSF1_MAGIC1	FontServer.cpp	35;"	d	file:
FIM_PSF2_MAGIC0	FontServer.cpp	36;"	d	file:
FIM_PSF2_MAGIC1	FontServer.cpp	37;"	d	file:
FIM_PSF2_MAGIC2	FontServer.cpp	38;"	d	file:
FIM_PSF2_MAGIC3	FontServer.cpp	39;"	d	file:
FIM_READLINE_H	readline.h	22;"	d
FIM_READ_BLK_DEVICES	Browser.cpp	35;"	d	file:
FIM_REDRAW_NECESSARY	fim_types.h	/^	enum fim_redraw_t { FIM_REDRAW_UNNECESSARY=0, FIM_REDRAW_NECESSARY=1};$/;"	e	enum:fim_redraw_t
FIM_REDRAW_UNNECESSARY	fim_types.h	/^	enum fim_redraw_t { FIM_REDRAW_UNNECESSARY=0, FIM_REDRAW_NECESSARY=1};$/;"	e	enum:fim_redraw_t
FIM_RENDERING_DPI	fim.h	845;"	d
FIM_RENDERING_MAX_COLS	fim.h	847;"	d
FIM_RENDERING_MAX_ROWS	fim.h	846;"	d
FIM_REVISION_NUMBER	fim.h	374;"	d
FIM_REVISION_NUMBER	fim.h	376;"	d
FIM_RL_COMPLETION_BUFSIZE	fim.h	833;"	d
FIM_ROT_L	Image.h	/^	enum { FIM_ROT_L=3,FIM_ROT_R=1,FIM_ROT_U=2 };$/;"	e	enum:fim::Image::__anon7
FIM_ROT_L_C	Image.h	/^	enum { FIM_ROT_L_C='L',FIM_ROT_R_C='R',FIM_ROT_U_C='U' };$/;"	e	enum:fim::Image::__anon9
FIM_ROT_R	Image.h	/^	enum { FIM_ROT_L=3,FIM_ROT_R=1,FIM_ROT_U=2 };$/;"	e	enum:fim::Image::__anon7
FIM_ROT_ROUND	Image.h	/^	enum { FIM_NO_ROT=0,FIM_ROT_ROUND=4 };$/;"	e	enum:fim::Image::__anon8
FIM_ROT_R_C	Image.h	/^	enum { FIM_ROT_L_C='L',FIM_ROT_R_C='R',FIM_ROT_U_C='U' };$/;"	e	enum:fim::Image::__anon9
FIM_ROT_U	Image.h	/^	enum { FIM_ROT_L=3,FIM_ROT_R=1,FIM_ROT_U=2 };$/;"	e	enum:fim::Image::__anon7
FIM_ROT_U_C	Image.h	/^	enum { FIM_ROT_L_C='L',FIM_ROT_R_C='R',FIM_ROT_U_C='U' };$/;"	e	enum:fim::Image::__anon9
FIM_RSTRCT	fim_types.h	28;"	d
FIM_RSTRCT	fim_types.h	30;"	d
FIM_SAVE_CONSOLEFONTNAME	FontServer.cpp	41;"	d	file:
FIM_SDLDEVICE_H	SDLDevice.h	22;"	d
FIM_SDL_ALLOW_QUIT	SDLDevice.cpp	47;"	d	file:
FIM_SDL_DEBUG	SDLDevice.cpp	50;"	d	file:
FIM_SDL_DEBUG	SDLDevice.cpp	51;"	d	file:
FIM_SDL_FLAGS	SDLDevice.cpp	33;"	d	file:
FIM_SDL_ICONPATH	SDLDevice.cpp	36;"	d	file:
FIM_SDL_INPUT_DEBUG	SDLDevice.cpp	55;"	d	file:
FIM_SDL_MINHEIGHT	SDLDevice.cpp	45;"	d	file:
FIM_SDL_MINWIDTH	SDLDevice.cpp	44;"	d	file:
FIM_SDL_WANT_KEYREPEAT	SDLDevice.cpp	48;"	d	file:
FIM_SDL_WANT_RESIZE	SDLDevice.cpp	49;"	d	file:
FIM_SHALL_BUFFER_STDIN	FbiStuff.cpp	46;"	d	file:
FIM_SHALL_BUFFER_STDIN	FbiStuff.cpp	48;"	d	file:
FIM_SHOULD_SUGGEST_POSSIBLE_COMPLETIONS	readline.cpp	175;"	d	file:
FIM_SORT_BY_DATE	Browser.cpp	1080;"	d	file:
FIM_SPECTRE_DEFAULT_DPI	FbiStuffPs.cpp	63;"	d	file:
FIM_STATUSLINE_BUF_SIZE	fim.h	852;"	d
FIM_STDIN_IMAGE_NAME	fim.h	207;"	d
FIM_STREAM_BUFSIZE	fim.h	827;"	d
FIM_STRINGIFY	fim.h	882;"	d
FIM_STRING_BUFSIZE	fim.h	836;"	d
FIM_STRING_H	fim_string.h	3;"	d
FIM_STUFF_LOADER_H	FbiStuffLoader.h	28;"	d
FIM_SUBPROCESS_MAXARGV	FbiStuff.cpp	1470;"	d	file:
FIM_SYM_BW_SEARCH_KEY	fim.h	218;"	d
FIM_SYM_CHAR_NUL	fim.h	239;"	d
FIM_SYM_CONSOLE_KEY	fim.h	215;"	d
FIM_SYM_CONSOLE_KEY_STR	fim.h	216;"	d
FIM_SYM_DEVOPTS_SEP	fim.h	221;"	d
FIM_SYM_DEVOPTS_SEP_STR	fim.h	222;"	d
FIM_SYM_DOT_CHAR	fim.h	247;"	d
FIM_SYM_ENDL	fim.h	250;"	d
FIM_SYM_ENTER	fim.h	241;"	d
FIM_SYM_ESC	fim.h	240;"	d
FIM_SYM_FLIPCHAR	fim.h	242;"	d
FIM_SYM_FW_SEARCH_KEY	fim.h	217;"	d
FIM_SYM_MIRRCHAR	fim.h	243;"	d
FIM_SYM_NAMESPACE_BROWSER_CHAR	fim.h	224;"	d
FIM_SYM_NAMESPACE_GLOBAL_CHAR	fim.h	227;"	d
FIM_SYM_NAMESPACE_IMAGE_ALL_STR	fim.h	226;"	d
FIM_SYM_NAMESPACE_IMAGE_CHAR	fim.h	225;"	d
FIM_SYM_NAMESPACE_PREFIXES	fim.h	233;"	d
FIM_SYM_NAMESPACE_PREFIXES_DSC	fim.h	234;"	d
FIM_SYM_NAMESPACE_REGEX	fim.h	235;"	d
FIM_SYM_NAMESPACE_SEP	fim.h	220;"	d
FIM_SYM_NAMESPACE_VIEWPORT_CHAR	fim.h	229;"	d
FIM_SYM_NAMESPACE_WINDOW_CHAR	fim.h	228;"	d
FIM_SYM_NULL_KEY	fim.h	219;"	d
FIM_SYM_NULL_NAMESPACE_CHAR	fim.h	223;"	d
FIM_SYM_PROMPT_CHAR	fim.h	236;"	d
FIM_SYM_PROMPT_NUL	fim.h	238;"	d
FIM_SYM_PROMPT_SLASH	fim.h	237;"	d
FIM_SYM_SEMICOLON	fim.h	248;"	d
FIM_SYM_SEMICOLON_STRING	fim.h	249;"	d
FIM_SYM_STRING_CONCAT	fim.h	246;"	d
FIM_SYM_TYPE_FLOAT	fim.h	244;"	d
FIM_SYM_TYPE_INT	fim.h	245;"	d
FIM_TYPES_FIM_H	fim_types.h	25;"	d
FIM_UNLIKELY	fim.h	186;"	d
FIM_VAR_H	Var.h	26;"	d
FIM_VCBS	Cache.cpp	43;"	d	file:
FIM_VERBOSE_KEYS_BUFSIZE	fim.h	849;"	d
FIM_VERB_PRINTF	fim.h	199;"	d
FIM_VID_ANGLE	fim.h	581;"	d
FIM_VID_ARCHIVE_FILES	fim.h	502;"	d
FIM_VID_ASCALE	fim.h	580;"	d
FIM_VID_AUTODESATURATE	fim.h	589;"	d
FIM_VID_AUTOFLIP	fim.h	587;"	d
FIM_VID_AUTOMIRROR	fim.h	597;"	d
FIM_VID_AUTONEGATE	fim.h	588;"	d
FIM_VID_AUTOTOP	fim.h	529;"	d
FIM_VID_BINARY_DISPLAY	fim.h	504;"	d
FIM_VID_CACHED_IMAGES	fim.h	602;"	d
FIM_VID_CACHE_STATUS	fim.h	506;"	d
FIM_VID_CMD_EXPANSION	fim.h	565;"	d
FIM_VID_COMMENT	fim.h	549;"	d
FIM_VID_COMMENT_OI	fim.h	550;"	d
FIM_VID_CONSOLE_BUFFER_FREE	fim.h	562;"	d
FIM_VID_CONSOLE_BUFFER_LINES	fim.h	560;"	d
FIM_VID_CONSOLE_BUFFER_TOTAL	fim.h	561;"	d
FIM_VID_CONSOLE_BUFFER_USED	fim.h	563;"	d
FIM_VID_CONSOLE_KEY	fim.h	568;"	d
FIM_VID_CONSOLE_LINE_OFFSET	fim.h	559;"	d
FIM_VID_CONSOLE_LINE_WIDTH	fim.h	558;"	d
FIM_VID_CONSOLE_ROWS	fim.h	557;"	d
FIM_VID_DBG_AUTOCMD_TRACE_STACK	fim.h	605;"	d
FIM_VID_DBG_COMMANDS	fim.h	606;"	d
FIM_VID_DEFAULT_ETC_FIMRC	fim.h	515;"	d
FIM_VID_DESATURATED	fim.h	595;"	d
FIM_VID_DEVICE_DRIVER	fim.h	508;"	d
FIM_VID_DISPLAY_BUSY	fim.h	576;"	d
FIM_VID_DISPLAY_CONSOLE	fim.h	507;"	d
FIM_VID_DISPLAY_STATUS	fim.h	509;"	d
FIM_VID_DISPLAY_STATUS_BAR	fim.h	575;"	d
FIM_VID_DISPLAY_STATUS_FMT	fim.h	510;"	d
FIM_VID_EXIFTOOL	fim.h	578;"	d
FIM_VID_EXIFTOOL_COMMENT	fim.h	551;"	d
FIM_VID_EXIF_FLIPPED	fim.h	528;"	d
FIM_VID_EXIF_MIRRORED	fim.h	527;"	d
FIM_VID_EXIF_ORIENTATION	fim.h	526;"	d
FIM_VID_FBFONT	fim.h	554;"	d
FIM_VID_FILEINDEX	fim.h	531;"	d
FIM_VID_FILELISTLEN	fim.h	533;"	d
FIM_VID_FILENAME	fim.h	535;"	d
FIM_VID_FILE_LOADER	fim.h	516;"	d
FIM_VID_FIM_BPP	fim.h	596;"	d
FIM_VID_FIM_DEFAULT_CONFIG_FILE_CONTENTS	fim.h	536;"	d
FIM_VID_FIM_DEFAULT_GRAMMAR_FILE_CONTENTS	fim.h	537;"	d
FIM_VID_FLIPPED	fim.h	593;"	d
FIM_VID_FRESH	fim.h	538;"	d
FIM_VID_HEIGHT	fim.h	584;"	d
FIM_VID_HSTEPS	fim.h	555;"	d
FIM_VID_IGNORECASE	fim.h	569;"	d
FIM_VID_INFO_FMT_STR	fim.h	534;"	d
FIM_VID_LASTFILEINDEX	fim.h	532;"	d
FIM_VID_LAST_FILE_LOADER	fim.h	591;"	d
FIM_VID_LAST_SYSTEM_OUTPUT	fim.h	513;"	d
FIM_VID_LOAD_DEFAULT_ETC_FIMRC	fim.h	514;"	d
FIM_VID_LOAD_FIM_HISTORY	fim.h	572;"	d
FIM_VID_MAGNIFY_FACTOR	fim.h	544;"	d
FIM_VID_MAX_CACHED_IMAGES	fim.h	600;"	d
FIM_VID_MAX_CACHED_MEMORY	fim.h	601;"	d
FIM_VID_MAX_ITERATED_COMMANDS	fim.h	542;"	d
FIM_VID_MIRRORED	fim.h	598;"	d
FIM_VID_NEGATED	fim.h	594;"	d
FIM_VID_NO_DEFAULT_CONFIGURATION	fim.h	574;"	d
FIM_VID_NO_EXTERNAL_LOADERS	fim.h	519;"	d
FIM_VID_NO_RC_FILE	fim.h	518;"	d
FIM_VID_OPEN_OFFSET	fim.h	607;"	d
FIM_VID_OPEN_OFFSET_RETRY	fim.h	608;"	d
FIM_VID_ORIENTATION	fim.h	582;"	d
FIM_VID_OVERRIDE_DISPLAY	fim.h	541;"	d
FIM_VID_PAGE	fim.h	539;"	d
FIM_VID_PAGES	fim.h	540;"	d
FIM_VID_PREFERRED_RENDERING_DPI	fim.h	611;"	d
FIM_VID_PREFERRED_RENDERING_WIDTH	fim.h	610;"	d
FIM_VID_PRELOAD_CHECKS	fim.h	612;"	d
FIM_VID_PUSHDIR_RE	fim.h	521;"	d
FIM_VID_PUSH_PUSHES_DIRS	fim.h	511;"	d
FIM_VID_PWD	fim.h	545;"	d
FIM_VID_RANDOM	fim.h	503;"	d
FIM_VID_REDUCE_FACTOR	fim.h	546;"	d
FIM_VID_RETRY_LOADER_PROBE	fim.h	517;"	d
FIM_VID_RE_SEARCH_OPTS	fim.h	570;"	d
FIM_VID_SANITY_CHECK	fim.h	512;"	d
FIM_VID_SAVE_FIM_HISTORY	fim.h	571;"	d
FIM_VID_SCALE	fim.h	579;"	d
FIM_VID_SCALE_FACTOR_DELTA	fim.h	548;"	d
FIM_VID_SCALE_FACTOR_MULTIPLIER	fim.h	547;"	d
FIM_VID_SCALE_STYLE	fim.h	530;"	d
FIM_VID_SCREEN_HEIGHT	fim.h	604;"	d
FIM_VID_SCREEN_WIDTH	fim.h	603;"	d
FIM_VID_SCRIPTOUT_FILE	fim.h	520;"	d
FIM_VID_SEEK_MAGIC	fim.h	609;"	d
FIM_VID_SHEIGHT	fim.h	586;"	d
FIM_VID_STATUS_LINE	fim.h	522;"	d
FIM_VID_STEPS	fim.h	552;"	d
FIM_VID_SWIDTH	fim.h	585;"	d
FIM_VID_TERM	fim.h	573;"	d
FIM_VID_TEXT_DISPLAY	fim.h	505;"	d
FIM_VID_VERBOSE_ERRORS	fim.h	566;"	d
FIM_VID_VERBOSE_KEYS	fim.h	564;"	d
FIM_VID_VERBOSITY	fim.h	567;"	d
FIM_VID_VERSION	fim.h	553;"	d
FIM_VID_VSTEPS	fim.h	556;"	d
FIM_VID_WANT_AUTOCENTER	fim.h	599;"	d
FIM_VID_WANT_CAPTION_STATUS	fim.h	543;"	d
FIM_VID_WANT_EXIF_ORIENTATION	fim.h	525;"	d
FIM_VID_WANT_MIPMAPS	fim.h	577;"	d
FIM_VID_WANT_PREFETCH	fim.h	523;"	d
FIM_VID_WANT_SLEEPS	fim.h	524;"	d
FIM_VID_WIDTH	fim.h	583;"	d
FIM_VIEWPORT_H	Viewport.h	24;"	d
FIM_WANTS_SLOW_RESIZE	FbiStuff.cpp	51;"	d	file:
FIM_WANT_ASCALE_FRIENDLY_ROTATION	Image.cpp	42;"	d	file:
FIM_WANT_AVOID_FP_EXCEPTIONS	fim.h	817;"	d
FIM_WANT_BACKGROUND_LOAD	Image.cpp	29;"	d	file:
FIM_WANT_BDI	fim.h	135;"	d
FIM_WANT_BENCHMARKS	fim.h	132;"	d
FIM_WANT_CAPTION_CONTROL	fim.h	818;"	d
FIM_WANT_COOKIE_STREAM	readline.cpp	392;"	d	file:
FIM_WANT_DEBUG_REGEXP	fim_string.cpp	23;"	d	file:
FIM_WANT_DISPLAY_FILESIZE	fim.h	824;"	d
FIM_WANT_DISPLAY_MEMSIZE	fim.h	825;"	d
FIM_WANT_DOUBLE_ESC_TO_ENTER	fim.h	820;"	d
FIM_WANT_EXPERIMENTAL_MIPMAPS	fim.h	136;"	d
FIM_WANT_EXPERIMENTAL_MOUSE_PAN	SDLDevice.cpp	52;"	d	file:
FIM_WANT_EXPERIMENTAL_PLUGINS	fim.h	821;"	d
FIM_WANT_FAT_BROWSER	fim.h	134;"	d
FIM_WANT_GOTOLAST	fim.h	137;"	d
FIM_WANT_HARDCODED_ICON	SDLDevice.cpp	35;"	d	file:
FIM_WANT_HISTORY	fim.h	816;"	d
FIM_WANT_INLINE_HELP	Var.cpp	30;"	d	file:
FIM_WANT_INLINE_HELP	Var.cpp	32;"	d	file:
FIM_WANT_KEEP_FILESIZE	fim.h	823;"	d
FIM_WANT_MILDLY_VERBOSE_DUMB_CONSOLE	fim.h	812;"	d
FIM_WANT_OPENCV_EXAMPLE	fim_plugin.cpp	30;"	d	file:
FIM_WANT_OUTPUT_DEVICE_STRING_CASE_INSENSITIVE	fim.h	815;"	d
FIM_WANT_OVERLY_VERBOSE_DUMB_CONSOLE	fim.h	811;"	d
FIM_WANT_PIC_CMTS	fim.h	138;"	d
FIM_WANT_RAW_KEYS_BINDING	CommandConsole.h	27;"	d
FIM_WANT_READLINE_CLEAR_WITH_ESC	fim.h	819;"	d
FIM_WANT_REMEMBER_LAST_FILE_LOADER	fim.h	131;"	d
FIM_WANT_RL_KEY_DUMPOUT	readline.cpp	35;"	d	file:
FIM_WANT_SCREEN_KEY_REMAPPING_PATCH	fim.h	810;"	d
FIM_WANT_SDL_OPTIONS_STRING	fim.h	814;"	d
FIM_WANT_SDL_PROOF_OF_CONCEPT_MOUSE_SUPPORT	fim.h	809;"	d
FIM_WANT_SIMPLE_SHELL_ESCAPING	CommandConsole-cmd.cpp	570;"	d	file:
FIM_WANT_SINGLE_SYSTEM_INVOCATION	fim.h	813;"	d
FIM_WANT_STDIN_FILELOAD_AFTER_CONFIG	fim.h	822;"	d
FIM_WANT_SYSTEM_CALL_DEBUG	CommandConsole-cmd.cpp	29;"	d	file:
FIM_WANT_VIEWPORT_TRANSFORM	Viewport.cpp	36;"	d	file:
FIM_WANT_ZLIB	common.cpp	858;"	d	file:
FIM_WINDOW_H	FimWindow.h	23;"	d
FIM_WITH_LIBPCX	FbiStuffPcx.cpp	26;"	d	file:
FIM_WRAPPERS_H	fim_wrappers.h	23;"	d
FIM_WVMM	FbiStuff.cpp	52;"	d	file:
FIM_XOR	fim.h	125;"	d
FIM_XSTRINGIFY	fim.h	880;"	d
FIM_X_HISTORY	fim.h	/^enum fim_xflags_t { FIM_X_NULL=0,FIM_X_HISTORY=1,FIM_X_QUIET=2,FIM_X_NOAUTOCMD=4};	\/* TODO: may introduce 'sandbox' like flags, here (for instance, for no-system\/pipe-interacting executions) *\/$/;"	e	enum:fim::fim_xflags_t
FIM_X_NOAUTOCMD	fim.h	/^enum fim_xflags_t { FIM_X_NULL=0,FIM_X_HISTORY=1,FIM_X_QUIET=2,FIM_X_NOAUTOCMD=4};	\/* TODO: may introduce 'sandbox' like flags, here (for instance, for no-system\/pipe-interacting executions) *\/$/;"	e	enum:fim::fim_xflags_t
FIM_X_NULL	fim.h	/^enum fim_xflags_t { FIM_X_NULL=0,FIM_X_HISTORY=1,FIM_X_QUIET=2,FIM_X_NOAUTOCMD=4};	\/* TODO: may introduce 'sandbox' like flags, here (for instance, for no-system\/pipe-interacting executions) *\/$/;"	e	enum:fim::fim_xflags_t
FIM_X_QUIET	fim.h	/^enum fim_xflags_t { FIM_X_NULL=0,FIM_X_HISTORY=1,FIM_X_QUIET=2,FIM_X_NOAUTOCMD=4};	\/* TODO: may introduce 'sandbox' like flags, here (for instance, for no-system\/pipe-interacting executions) *\/$/;"	e	enum:fim::fim_xflags_t
FbiStuff	FbiStuff.h	/^class FbiStuff{$/;"	c	namespace:fim
FimBaseNameSorter	Browser.cpp	/^struct FimBaseNameSorter$/;"	s	namespace:fim	file:
FimConsole	DebugConsole.h	/^	class FimConsole$/;"	c	namespace:fim
FimDateSorter	Browser.cpp	/^struct FimDateSorter$/;"	s	namespace:fim	file:
FimDocRefMode	fim.h	/^enum FimDocRefMode{ Txt, Man, DefRefMode=Txt};$/;"	g
FimException	common.h	/^typedef int FimException;$/;"	t
FimInstance	fim.cpp	/^class FimInstance$/;"	c	file:
FimPrintGifError	FbiStuffGif.cpp	/^FimPrintGifError(struct gif_state * gs) {$/;"	f	namespace:fim
FimPrintGifError	FbiStuffGif.cpp	91;"	d	file:
FimWindow	FimWindow.cpp	/^	FimWindow::FimWindow(CommandConsole &c,const Rect& corners, Viewport* vp):$/;"	f	class:fim::FimWindow
FimWindow	FimWindow.cpp	/^	FimWindow::FimWindow(const FimWindow & root):$/;"	f	class:fim::FimWindow
FimWindow	FimWindow.h	/^class FimWindow:public Namespace$/;"	c	namespace:fim
FontServer	FontServer.cpp	/^	FontServer::FontServer( )$/;"	f	class:fim::FontServer
FontServer	FontServer.h	/^class FontServer$/;"	c	namespace:fim
FramebufferDevice	FramebufferDevice.cpp	/^	FramebufferDevice::FramebufferDevice(MiniConsole & mc):	$/;"	f	class:fim::FramebufferDevice
FramebufferDevice	FramebufferDevice.h	/^class FramebufferDevice:public DisplayDevice $/;"	c	namespace:fim
GLWIDTHBYTESPADDED	FbiStuffText.cpp	127;"	d	file:
GLWIDTHBYTESPADDED	FbiStuffText.cpp	158;"	d	file:
GLWIDTHBYTESPADDED	FramebufferDevice.cpp	239;"	d	file:
GLWIDTHBYTESPADDED	FramebufferDevice.cpp	267;"	d	file:
GLWIDTHBYTESPADDED	Imlib2Device.cpp	502;"	d	file:
GLWIDTHBYTESPADDED	Imlib2Device.cpp	535;"	d	file:
GLWIDTHBYTESPADDED	SDLDevice.cpp	827;"	d	file:
GLWIDTHBYTESPADDED	SDLDevice.cpp	859;"	d	file:
HAVE_LIBGRAPHICSMAGICK_TXT_FILEXTENSION_BUG	FbiStuffMagick.cpp	43;"	d	file:
HAVE_LIBGRAPHICSMAGICK_TXT_FILEXTENSION_BUG	FbiStuffMagick.cpp	47;"	d	file:
HAVE_LIBGRAPHICSMAGICK_TXT_FILEXTENSION_BUG	FbiStuffMagick.cpp	49;"	d	file:
HAVE_NEW_EXIF	FbiStuffJpeg.cpp	49;"	d	file:
Image	Image.cpp	/^	Image::Image(const Image& image):$/;"	f	class:fim::Image
Image	Image.cpp	/^	Image::Image(const fim_char_t *fname, FILE*fd, fim_page_t page):$/;"	f	class:fim::Image
Image	Image.cpp	/^	Image::Image(void)$/;"	f	class:fim::Image
Image	Image.h	/^class Image:public Namespace$/;"	c	namespace:fim
ImgDscs	Image.h	/^	ImgDscs(void)$/;"	f	class:ImgDscs
ImgDscs	Image.h	/^class ImgDscs: public std::map<fim_fn_t,fim_ds_t>$/;"	c
ImgDscsCmp	Image.h	/^	template<class T> struct ImgDscsCmp:public std::binary_function<typename T::value_type, typename T::mapped_type, bool>$/;"	s	class:ImgDscs
Imlib2Device	Imlib2Device.cpp	/^	Imlib2Device::Imlib2Device(MiniConsole & mc_, fim::string opts):DisplayDevice(mc_),$/;"	f	class:Imlib2Device
Imlib2Device	Imlib2Device.h	/^class Imlib2Device:public DisplayDevice $/;"	c
JP2_ERR	FbiStuffJasPer.cpp	51;"	d	file:
JP2_OK	FbiStuffJasPer.cpp	52;"	d	file:
Left	FimWindow.h	/^	enum Moves{Up,Down,Left,Right,NoMove};$/;"	e	enum:fim::FimWindow::Moves
Left	FimWindow.h	/^	enum Splitmode{ Left,Right,Upper,Lower};$/;"	e	enum:fim::Rect::Splitmode
Lower	FimWindow.h	/^	enum Splitmode{ Left,Right,Upper,Lower};$/;"	e	enum:fim::Rect::Splitmode
Man	fim.h	/^enum FimDocRefMode{ Txt, Man, DefRefMode=Txt};$/;"	e	enum:FimDocRefMode
MiniConsole	DebugConsole.cpp	/^		MiniConsole::MiniConsole(CommandConsole & cc,int lw, int r)$/;"	f	class:fim::MiniConsole
MiniConsole	DebugConsole.h	/^		MiniConsole(const MiniConsole &mc) :$/;"	f	class:fim::MiniConsole
MiniConsole	DebugConsole.h	/^	class MiniConsole$/;"	c	namespace:fim
Moves	FimWindow.h	/^	enum Moves{Up,Down,Left,Right,NoMove};$/;"	g	class:fim::FimWindow
NDEBUG	fim.h	23;"	d
NULL	FimWindow.h	34;"	d
Namespace	Namespace.h	/^		Namespace($/;"	f	class:fim::Namespace
Namespace	Namespace.h	/^	class Namespace$/;"	c	namespace:fim
NoMove	FimWindow.h	/^	enum Moves{Up,Down,Left,Right,NoMove};$/;"	e	enum:fim::FimWindow::Moves
PALETTE_DEFINED	FbiStuffPcx.cpp	/^bool PALETTE_DEFINED;$/;"	m	namespace:fim	file:
PCX_ERR_GENERIC	FbiStuffPcx.cpp	44;"	d	file:
PCX_ERR_NO_ERROR	FbiStuffPcx.cpp	43;"	d	file:
PCX_HEADER	FbiStuffPcx.cpp	/^PCX_HEADER_S PCX_HEADER;$/;"	m	namespace:fim	file:
PCX_HEADER_S	FbiStuffPcx.cpp	/^}PCX_HEADER_S;$/;"	t	namespace:fim	typeref:struct:fim::__anon3	file:
PCX_RETURN_ERROR	FbiStuffPcx.cpp	88;"	d	file:
Rect	FimWindow.cpp	/^	Rect::Rect(const Rect& rect): x(rect.x), y(rect.y), w(rect.w), h(rect.h){}$/;"	f	class:fim::Rect
Rect	FimWindow.cpp	/^	Rect::Rect(fim_coo_t x,fim_coo_t y,fim_coo_t w,fim_coo_t h):$/;"	f	class:fim::Rect
Rect	FimWindow.h	/^class Rect$/;"	c	namespace:fim
Right	FimWindow.h	/^	enum Moves{Up,Down,Left,Right,NoMove};$/;"	e	enum:fim::FimWindow::Moves
Right	FimWindow.h	/^	enum Splitmode{ Left,Right,Upper,Lower};$/;"	e	enum:fim::Rect::Splitmode
SCANLINE_PAD	FbiStuffText.cpp	123;"	d	file:
SCANLINE_PAD	FbiStuffText.cpp	155;"	d	file:
SCANLINE_PAD	FramebufferDevice.cpp	235;"	d	file:
SCANLINE_PAD	FramebufferDevice.cpp	264;"	d	file:
SCANLINE_PAD	Imlib2Device.cpp	498;"	d	file:
SCANLINE_PAD	Imlib2Device.cpp	532;"	d	file:
SCANLINE_PAD	SDLDevice.cpp	823;"	d	file:
SCANLINE_PAD	SDLDevice.cpp	856;"	d	file:
SCANLINE_PAD_BYTES	FbiStuffText.cpp	126;"	d	file:
SCANLINE_PAD_BYTES	FbiStuffText.cpp	157;"	d	file:
SCANLINE_PAD_BYTES	FramebufferDevice.cpp	238;"	d	file:
SCANLINE_PAD_BYTES	FramebufferDevice.cpp	266;"	d	file:
SCANLINE_PAD_BYTES	Imlib2Device.cpp	501;"	d	file:
SCANLINE_PAD_BYTES	Imlib2Device.cpp	534;"	d	file:
SCANLINE_PAD_BYTES	SDLDevice.cpp	826;"	d	file:
SCANLINE_PAD_BYTES	SDLDevice.cpp	858;"	d	file:
SCANLINE_UNIT	FbiStuffText.cpp	122;"	d	file:
SCANLINE_UNIT	FbiStuffText.cpp	154;"	d	file:
SCANLINE_UNIT	FramebufferDevice.cpp	234;"	d	file:
SCANLINE_UNIT	FramebufferDevice.cpp	263;"	d	file:
SCANLINE_UNIT	Imlib2Device.cpp	497;"	d	file:
SCANLINE_UNIT	Imlib2Device.cpp	531;"	d	file:
SCANLINE_UNIT	SDLDevice.cpp	822;"	d	file:
SCANLINE_UNIT	SDLDevice.cpp	855;"	d	file:
SDLDevice	SDLDevice.cpp	/^	SDLDevice::SDLDevice(MiniConsole & mc_, fim::string opts):DisplayDevice(mc_),$/;"	f	class:SDLDevice
SDLDevice	SDLDevice.h	/^class SDLDevice:public DisplayDevice $/;"	c
SPLASH_COL_BLACK_PTR	FbiStuffPdf.cpp	97;"	d	file:
SPLASH_COL_BLUE_PTR	FbiStuffPdf.cpp	95;"	d	file:
SPLASH_COL_GREEN_PTR	FbiStuffPdf.cpp	94;"	d	file:
SPLASH_COL_RED_PTR	FbiStuffPdf.cpp	93;"	d	file:
SPLASH_COL_WHITE_PTR	FbiStuffPdf.cpp	96;"	d	file:
Spacings	FimWindow.h	/^	enum Spacings{ hspacing=0, vspacing=0};$/;"	g	class:fim::FimWindow
SplashColorsInit	FbiStuffPdf.cpp	/^void SplashColorsInit(void)$/;"	f	namespace:fim
Splitmode	FimWindow.h	/^	enum Splitmode{ Left,Right,Upper,Lower};$/;"	g	class:fim::Rect
TOKSIZE	fim_string.h	/^        static const int TOKSIZE=128*8*4*2;	\/\/max len.NUL included$/;"	m	class:fim::string
Txt	fim.h	/^enum FimDocRefMode{ Txt, Man, DefRefMode=Txt};$/;"	e	enum:FimDocRefMode
UBYTE	FbiStuffPcx.cpp	/^typedef __u8 UBYTE;		\/\/define UNSIGNED BYTE as 1 byte$/;"	t	namespace:fim	file:
UDWORD	FbiStuffPcx.cpp	/^typedef __u32 UDWORD;		\/\/define UNSIGNED DOUBLE WORD as 4 bytes$/;"	t	namespace:fim	file:
UWORD	FbiStuffPcx.cpp	/^typedef __u16 UWORD;		\/\/define UNSIGNED WORD as 2 bytes$/;"	t	namespace:fim	file:
Up	FimWindow.h	/^	enum Moves{Up,Down,Left,Right,NoMove};$/;"	e	enum:fim::FimWindow::Moves
Upper	FimWindow.h	/^	enum Splitmode{ Left,Right,Upper,Lower};$/;"	e	enum:fim::Rect::Splitmode
Var	Var.h	/^	Var(bool v)$/;"	f	class:fim::Var
Var	Var.h	/^	Var(const Var &v)$/;"	f	class:fim::Var
Var	Var.h	/^	Var(const fim::string s)$/;"	f	class:fim::Var
Var	Var.h	/^	Var(const fim_char_t*s)$/;"	f	class:fim::Var
Var	Var.h	/^	Var(fim_int v)$/;"	f	class:fim::Var
Var	Var.h	/^	Var(float v)$/;"	f	class:fim::Var
Var	Var.h	/^	Var(void)$/;"	f	class:fim::Var
Var	Var.h	/^class Var$/;"	c	namespace:fim
Viewport	Viewport.cpp	/^	Viewport::Viewport($/;"	f	class:fim::Viewport
Viewport	Viewport.cpp	/^	Viewport::Viewport(const Viewport &v)$/;"	f	class:fim::Viewport
Viewport	Viewport.h	/^class Viewport:public Namespace,public ViewportState$/;"	c	namespace:fim
ViewportState	fim.h	/^	ViewportState()	:steps_(0) ,hsteps_(0) ,vsteps_(0) ,top_(0) ,left_(0) ,panned_(0x0) {}$/;"	f	class:fim::ViewportState
ViewportState	fim.h	/^class ViewportState$/;"	c	namespace:fim
WindowT	Command.h	/^		WindowT,$/;"	e	enum:fim::Command::__anon4
XSIZ	CACADevice.h	/^	int XSIZ, YSIZ;$/;"	m	class:CACADevice
YSIZ	CACADevice.h	/^	int XSIZ, YSIZ;$/;"	m	class:CACADevice
ZEROF	FbiStuff.cpp	805;"	d	file:
_FIM_STRING_WRAPPER	fim_string.h	28;"	d
_POSIX_PATH_MAX	fim.h	79;"	d
__fini	FbiStuffLoader.h	156;"	d
__init	FbiStuffLoader.h	155;"	d
__list_add	FbiStuffList.h	/^static __inline__ void __list_add(struct list_head * _new,$/;"	f
__list_del	FbiStuffList.h	/^static __inline__ void __list_del(struct list_head * prev,$/;"	f
_both	Var.h	200;"	d
_both	Var.h	287;"	d
_clear_list	Browser.cpp	/^	fim::string Browser::_clear_list(void)$/;"	f	class:fim::Browser
_fb_switch_signal	FramebufferDevice.cpp	/^static void _fb_switch_signal(int signal)$/;"	f	namespace:fim
_matrix_copy_rgb_to_gray	CACADevice.cpp	/^	int _matrix_copy_rgb_to_gray($/;"	f
_numeric	Var.h	203;"	d
_numeric	Var.h	285;"	d
_p_t	Var.h	204;"	d
_p_t	Var.h	284;"	d
_random_shuffle	Browser.cpp	/^	fim::string Browser::_random_shuffle(bool dts)$/;"	f	class:fim::Browser
_reverse	Browser.cpp	/^	fim::string Browser::_reverse(void)$/;"	f	class:fim::Browser
_some_string	Var.h	202;"	d
_some_string	Var.h	286;"	d
_sort	Browser.cpp	/^	fim::string Browser::_sort(const fim_char_t sc)$/;"	f	class:fim::Browser
_string_init	fim_string.cpp	/^	void string::_string_init(void)$/;"	f	class:fim::string
_types	Var.h	201;"	d
_types	Var.h	288;"	d
a	CACADevice.h	/^	unsigned int r[256], g[256], b[256], a[256];$/;"	m	class:CACADevice
aad_	CommandConsole.h	/^	AADevice * aad_;$/;"	m	class:fim::CommandConsole
aainvalid	AADevice.cpp	/^static bool aainvalid;$/;"	v	file:
add	DebugConsole.cpp	/^		fim_err_t MiniConsole::add(const fim_byte_t* cso){return add((const fim_char_t*)cso);}$/;"	f	class:fim::MiniConsole
add	DebugConsole.cpp	/^		fim_err_t MiniConsole::add(const fim_char_t* cso_)$/;"	f	class:fim::MiniConsole
add	FbiStuff.h	/^    int mul,div,add;$/;"	m	struct:fim::op_3x3_parm
addCommand	CommandConsole.cpp	/^	fim_err_t CommandConsole::addCommand(Command *c)$/;"	f	class:fim::CommandConsole
alias	CommandConsole.cpp	/^	fim::string CommandConsole::alias(const fim::string& a, const fim::string& c, const fim::string& d)$/;"	f	class:fim::CommandConsole
aliasRecall	CommandConsole.cpp	/^	fim::string CommandConsole::aliasRecall(fim::string cmd)const$/;"	f	class:fim::CommandConsole
aliases_	CommandConsole.h	/^	aliases_t aliases_;	\/\/alias->commands$/;"	m	class:fim::CommandConsole
aliases_t	CommandConsole.h	/^	typedef std::map<fim::string,std::pair<fim::string,fim::string> > aliases_t;	\/\/alias->[commands,description]$/;"	t	class:fim::CommandConsole
align	Viewport.cpp	/^	void Viewport::align(const char c)$/;"	f	class:fim::Viewport
allow_windowed	AADevice.h	/^	int allow_windowed;$/;"	m	class:AADevice
allowed_resolution	Imlib2Device.cpp	/^	bool Imlib2Device::allowed_resolution(fim_coo_t w, fim_coo_t h)$/;"	f	class:Imlib2Device
allowed_resolution	SDLDevice.cpp	/^	bool SDLDevice::allowed_resolution(fim_coo_t w, fim_coo_t h)$/;"	f	class:SDLDevice
alpha	FbiStuffPcx.cpp	/^	unsigned char alpha;$/;"	m	struct:fim::__anon1	file:
amroot_	FimWindow.h	/^	bool amroot_;$/;"	m	class:fim::FimWindow
angle	FbiStuff.cpp	/^    float angle,sina,cosa;$/;"	m	struct:fim::op_rotate_state	file:
angle	FbiStuff.h	/^    int angle;$/;"	m	struct:fim::op_rotate_parm
angle_	Image.h	/^	fim_scale_t            angle_;$/;"	m	class:fim::Image
appendPostExecutionCommand	CommandConsole.cpp	/^	void CommandConsole::appendPostExecutionCommand(const fim::string &c)$/;"	f	class:fim::CommandConsole
appendPostInitCommand	CommandConsole.cpp	/^	void CommandConsole::appendPostInitCommand(const fim_char_t* c)$/;"	f	class:fim::CommandConsole
appendPreConfigCommand	CommandConsole.cpp	/^	void CommandConsole::appendPreConfigCommand(const fim_char_t* c)$/;"	f	class:fim::CommandConsole
appendedPostInitCommand	CommandConsole.cpp	/^	bool CommandConsole::appendedPostInitCommand(void)const$/;"	f	class:fim::CommandConsole
appendedPreConfigCommand	CommandConsole.cpp	/^	bool CommandConsole::appendedPreConfigCommand(void)const$/;"	f	class:fim::CommandConsole
apply_fullscreen	Imlib2Device.cpp	/^	void Imlib2Device::apply_fullscreen(void)$/;"	f	class:Imlib2Device
args_t	fim.h	/^typedef std::vector<fim::string> args_t;$/;"	t
ascale_	Image.h	/^	fim_scale_t            ascale_;$/;"	m	class:fim::Image
ascii_context_	AADevice.h	/^	aa_context *ascii_context_;$/;"	m	class:AADevice
ascii_hwparms_	AADevice.h	/^	struct aa_hardware_params ascii_hwparms_;$/;"	m	class:AADevice	typeref:struct:AADevice::aa_hardware_params
ascii_save_	AADevice.h	/^	struct aa_savedata ascii_save_;$/;"	m	class:AADevice	typeref:struct:AADevice::aa_savedata
assign	fim_string.cpp	/^	int  string::assign(const fim_char_t *s)$/;"	f	class:fim::string
assign	fim_string.cpp	/^	int  string::assign(const string&str)$/;"	f	class:fim::string
auto_height_scale	Viewport.cpp	/^	void Viewport::auto_height_scale(void)$/;"	f	class:fim::Viewport
auto_scale	Viewport.cpp	/^	void Viewport::auto_scale(void)$/;"	f	class:fim::Viewport
auto_scale_if_bigger	Viewport.cpp	/^	void Viewport::auto_scale_if_bigger(void)$/;"	f	class:fim::Viewport
auto_width_scale	Viewport.cpp	/^	void Viewport::auto_width_scale(void)$/;"	f	class:fim::Viewport
autocmd_add	CommandConsole.cpp	/^	fim::string CommandConsole::autocmd_add(const fim::string &event,const fim::string &pat,const fim::string &cmd)$/;"	f	class:fim::CommandConsole
autocmd_del	CommandConsole.cpp	/^	fim::string CommandConsole::autocmd_del(const fim::string event, const fim::string pattern, const fim::string action)$/;"	f	class:fim::CommandConsole
autocmd_exec	CommandConsole.cpp	/^	fim::string CommandConsole::autocmd_exec(const fim::string &event,const fim::string &fname)$/;"	f	class:fim::CommandConsole
autocmd_exec	CommandConsole.cpp	/^	fim::string CommandConsole::autocmd_exec(const fim::string &event,const fim::string &pat,const fim::string &fname)$/;"	f	class:fim::CommandConsole
autocmd_exec	Namespace.cpp	/^		fim::string Namespace::autocmd_exec(const fim::string &event,const fim::string &fname)$/;"	f	class:fim::Namespace
autocmd_in_stack	CommandConsole.cpp	/^	fim_bool_t CommandConsole::autocmd_in_stack(const autocmds_loop_frame_t& frame)const$/;"	f	class:fim::CommandConsole
autocmd_pop_stack	CommandConsole.cpp	/^	void CommandConsole::autocmd_pop_stack(const autocmds_loop_frame_t& frame)$/;"	f	class:fim::CommandConsole
autocmd_push_stack	CommandConsole.cpp	/^	void CommandConsole::autocmd_push_stack(const autocmds_loop_frame_t& frame)$/;"	f	class:fim::CommandConsole
autocmd_trace_stack	CommandConsole.cpp	/^	void CommandConsole::autocmd_trace_stack(void)$/;"	f	class:fim::CommandConsole
autocmds_	CommandConsole.h	/^	autocmds_t autocmds_;$/;"	m	class:fim::CommandConsole
autocmds_frame_t	CommandConsole.h	/^	typedef std::pair<autocmds_loop_frame_t,fim::string> autocmds_frame_t;$/;"	t	class:fim::CommandConsole
autocmds_list	CommandConsole.cpp	/^	fim::string CommandConsole::autocmds_list(const fim::string event, const fim::string pattern)const$/;"	f	class:fim::CommandConsole
autocmds_loop_frame_t	CommandConsole.h	/^	typedef std::pair<fim::string,fim::string> autocmds_loop_frame_t;$/;"	t	class:fim::CommandConsole
autocmds_loop_stack	CommandConsole.h	/^	autocmds_stack__t autocmds_loop_stack;$/;"	m	class:fim::CommandConsole
autocmds_p_t	CommandConsole.h	/^	typedef std::map<fim::string,args_t >  autocmds_p_t;	\/\/pattern - commands$/;"	t	class:fim::CommandConsole
autocmds_stack	CommandConsole.h	/^	autocmds_stack_t autocmds_stack;$/;"	m	class:fim::CommandConsole
autocmds_stack__t	CommandConsole.h	/^	typedef std::vector<autocmds_loop_frame_t > autocmds_stack__t;$/;"	t	class:fim::CommandConsole
autocmds_stack_t	CommandConsole.h	/^	typedef std::vector<autocmds_frame_t > autocmds_stack_t;$/;"	t	class:fim::CommandConsole
autocmds_t	CommandConsole.h	/^	typedef std::map<fim::string,autocmds_p_t >  autocmds_t;		\/\/autocommand - pattern - commands$/;"	t	class:fim::CommandConsole
b	CACADevice.h	/^	unsigned int r[256], g[256], b[256], a[256];$/;"	m	class:CACADevice
balance	FimWindow.cpp	/^	void FimWindow::balance(void)$/;"	f	class:fim::FimWindow
benchmarkstate	Benchmarkable.h	/^		fim_int benchmarkstate;$/;"	m	class:Benchmarkable
bind	CommandConsole.cpp	/^	fim::string CommandConsole::bind(fim_key_t c,const fim::string binding)$/;"	f	class:fim::CommandConsole
bindings_	CommandConsole.h	/^	bindings_t bindings_;		\/\/code->commands$/;"	m	class:fim::CommandConsole
bindings_help_	CommandConsole.h	/^	bindings_help_t bindings_help_;		\/\/code->commands$/;"	m	class:fim::CommandConsole
bindings_help_t	CommandConsole.h	/^	typedef std::map<fim_key_t,fim::string> bindings_help_t; \/\/ code->help$/;"	t	class:fim::CommandConsole
bindings_t	CommandConsole.h	/^	typedef std::map<fim_key_t,fim::string> bindings_t;		\/\/code->commands$/;"	t	class:fim::CommandConsole
bit1_done	FbiStuffBit1.cpp	/^bit1_done(void *data)$/;"	f	namespace:fim
bit1_init	FbiStuffBit1.cpp	/^bit1_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
bit1_loader	FbiStuffBit1.cpp	/^struct ida_loader bit1_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
bit1_read	FbiStuffBit1.cpp	/^bit1_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
bit1_state	FbiStuffBit1.cpp	/^struct bit1_state {$/;"	s	namespace:fim	file:
bit24_done	FbiStuffBit24.cpp	/^bit24_done(void *data)$/;"	f	namespace:fim
bit24_init	FbiStuffBit24.cpp	/^bit24_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
bit24_loader	FbiStuffBit24.cpp	/^struct ida_loader bit24_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
bit24_read	FbiStuffBit24.cpp	/^bit24_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
bit24_state	FbiStuffBit24.cpp	/^struct bit24_state {$/;"	s	namespace:fim	file:
bit_cnt	FbiStuffBmp.cpp	/^    uint16 bit_cnt;$/;"	m	struct:fim::bmp_hdr	file:
bitmap	CACADevice.h	/^	fim_char_t *bitmap;$/;"	m	class:CACADevice
blue	FbiStuffBmp.cpp	/^    fim_byte_t blue;$/;"	m	struct:fim::bmp_cmap	file:
blue	FbiStuffPcx.cpp	/^	char blue;$/;"	m	struct:fim::__anon2	file:
blue	FbiStuffPcx.cpp	/^	unsigned char blue;$/;"	m	struct:fim::__anon1	file:
blue_	FramebufferDevice.h	/^	unsigned short red_[256],  green_[256],  blue_[256];$/;"	m	class:fim::FramebufferDevice
bmp	FbiStuffPdf.cpp	/^	SplashBitmap*	    bmp ;$/;"	m	struct:fim::pdf_state_t	file:
bmp_cmap	FbiStuffBmp.cpp	/^struct bmp_cmap {$/;"	s	namespace:fim	file:
bmp_done	FbiStuffBmp.cpp	/^bmp_done(void *data)$/;"	f	namespace:fim
bmp_hdr	FbiStuffBmp.cpp	/^struct bmp_hdr {$/;"	s	namespace:fim	file:
bmp_init	FbiStuffBmp.cpp	/^bmp_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
bmp_loader	FbiStuffBmp.cpp	/^static struct ida_loader bmp_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
bmp_read	FbiStuffBmp.cpp	/^bmp_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
bmp_state	FbiStuffBmp.cpp	/^struct bmp_state {$/;"	s	namespace:fim	file:
border_height_	FramebufferDevice.h	/^	static const fim_coo_t border_height_=1;$/;"	m	class:fim::FramebufferDevice
border_height_	Imlib2Device.h	/^	static const fim_coo_t border_height_=1;$/;"	m	class:Imlib2Device
border_height_	SDLDevice.h	/^	static const fim_coo_t border_height_=1;$/;"	m	class:SDLDevice
bp_	DebugConsole.h	/^		fim_char_t *bp_;	\/\/ pointer to the top of the buffer$/;"	m	class:fim::MiniConsole
bpl	FbiStuffPcx.cpp	/^  UWORD          bpl;$/;"	m	struct:fim::__anon3	file:
bpp	FbiStuffPcx.cpp	/^  fim_byte_t     bpp;$/;"	m	struct:fim::__anon3	file:
bpp_	SDLDevice.h	/^	fim_bpp_t Bpp_,bpp_;$/;"	m	class:SDLDevice
browser	Command.h	/^		Browser *browser;$/;"	m	union:fim::Command::__anon6
browser_	CommandConsole.h	/^	Browser browser_;$/;"	m	class:fim::CommandConsole
browserf	Command.h	/^		fim::string (Browser::*browserf)(const std::vector<fim::string>&) ;$/;"	m	class:fim::Command::__anon5::fim
bsize_	DebugConsole.h	/^		int  bsize_;	\/\/ the buffer size$/;"	m	class:fim::MiniConsole
buffer	FbiStuffJpeg.cpp	/^    JSAMPARRAY buffer;            \/* Output row buffer *\/$/;"	m	struct:fim::jpeg_state	file:
buffer_	DebugConsole.h	/^		fim_char_t *buffer_;	\/\/ the raw console buffer$/;"	m	class:fim::MiniConsole
buffer_	Imlib2Device.h	/^   	Imlib_Image buffer_;$/;"	m	class:Imlib2Device
bvi_	SDLDevice.h	/^	SDL_VideoInfo bvi_;$/;"	m	class:SDLDevice
byte_size	Browser.cpp	/^	size_t Browser::byte_size(void)const$/;"	f	class:fim::Browser
byte_size	Cache.cpp	/^	size_t Cache::byte_size(void)const$/;"	f	class:fim::Cache
byte_size	CommandConsole.cpp	/^	size_t CommandConsole::byte_size(void)const$/;"	f	class:fim::CommandConsole
byte_size	DebugConsole.cpp	/^		size_t MiniConsole::byte_size(void)const$/;"	f	class:fim::MiniConsole
byte_size	FimWindow.cpp	/^	size_t FimWindow::byte_size(void)const$/;"	f	class:fim::FimWindow
byte_size	Image.cpp	/^	size_t Image::byte_size(void)const$/;"	f	class:fim::Image
byte_size	Image.h	/^	size_t byte_size(void)const$/;"	f	class:ImgDscs
byte_size	Viewport.cpp	/^	size_t Viewport::byte_size(void)const$/;"	f	class:fim::Viewport
byte_size	fim.h	/^	size_t byte_size(void)const{return mmb+sizeof(*this);}$/;"	f	class:fim_mipmap_t
bytes_per_line	FbiStuffJasPer.cpp	/^	int bytes_per_line; \/* rgb has bytes_per_line bytes per line *\/$/;"	m	struct:fim::jp2_state	file:
bytes_per_line	FbiStuffPcx.cpp	/^	int bytes_per_line; \/* rgb has bytes_per_line bytes per line *\/$/;"	m	struct:fim::pcx_state	file:
bytes_per_line	FbiStuffXyz.cpp	/^	int bytes_per_line; \/* rgb has bytes_per_line bytes per line *\/$/;"	m	struct:fim::xyz_state	file:
c_focused	FimWindow.cpp	/^	const FimWindow & FimWindow::c_focused(void)const$/;"	f	class:fim::FimWindow
c_getImage	Viewport.cpp	/^        const Image* Viewport::c_getImage(void)const$/;"	f	class:fim::Viewport
c_image	Browser.cpp	/^	const Image *Browser::c_image(void)const$/;"	f	class:fim::Browser
c_page	Browser.cpp	/^	fim_int Browser::c_page(void)const$/;"	f	class:fim::Browser
c_page	Image.cpp	/^	fim_int Image::c_page(void)const{return page_;}$/;"	f	class:fim::Image
c_rns	CommandConsole-var.cpp	/^	const Namespace * CommandConsole::c_rns(const fim::string varname)const$/;"	f	class:fim::CommandConsole
c_shadowed	FimWindow.cpp	/^	const FimWindow & FimWindow::c_shadowed(void)const$/;"	f	class:fim::FimWindow
c_str	fim_string.cpp	/^	const fim_char_t*string::c_str(void)const$/;"	f	class:fim::string
caca_bitmap	CACADevice.h	/^	struct caca_bitmap *caca_bitmap;$/;"	m	class:CACADevice	typeref:struct:CACADevice::caca_bitmap
cacheNewImage	Cache.cpp	/^	bool Cache::cacheNewImage( fim::Image* ni )$/;"	f	class:fim::Cache
cache_	Browser.h	/^	Cache cache_;	\/\/ was private$/;"	m	class:fim::Browser
cache_key_t	fim.h	/^typedef std::pair<fim::string,fim_image_source_t > 	   cache_key_t;	\/\/the current cache key$/;"	t	namespace:fim
cacheable	Image.cpp	/^	bool Image::cacheable(void)const { return this->n_pages() == 1 ; }$/;"	f	class:fim::Image
cached_elements	Cache.cpp	/^	int Cache::cached_elements(void)const$/;"	f	class:fim::Cache
cachels_t	Cache.h	/^	typedef std::map<cache_key_t,fim::Image* >  cachels_t;	\/\/filename - image$/;"	t	class:fim::Cache
calc	FbiStuff.cpp	/^    struct ida_rect calc;$/;"	m	struct:fim::op_rotate_state	typeref:struct:fim::op_rotate_state::ida_rect	file:
calc_gamma	FramebufferDevice.h	/^unsigned short calc_gamma(int n, int max)$/;"	f	class:fim::FramebufferDevice
can_hgrow	FimWindow.cpp	/^	bool FimWindow::can_hgrow(const FimWindow & window, fim_coo_t howmuch)$/;"	f	class:fim::FimWindow
can_reload	Image.cpp	/^	bool Image::can_reload(void)const{return !no_file_;}$/;"	f	class:fim::Image
can_vgrow	FimWindow.cpp	/^	bool FimWindow::can_vgrow(const FimWindow & window, fim_coo_t howmuch)$/;"	f	class:fim::FimWindow
catchInteractiveCommand	DisplayDevice.cpp	/^	fim_key_t DisplayDevice::catchInteractiveCommand(fim_ts_t seconds)const$/;"	f	class:DisplayDevice
catchInteractiveCommand	Imlib2Device.cpp	/^	fim_key_t Imlib2Device::catchInteractiveCommand(fim_ts_t seconds)const$/;"	f	class:Imlib2Device
catchInteractiveCommand	SDLDevice.cpp	/^	fim_key_t SDLDevice::catchInteractiveCommand(fim_ts_t seconds)const$/;"	f	class:SDLDevice
catchLoopBreakingCommand	CommandConsole.cpp	/^	fim_int CommandConsole::catchLoopBreakingCommand(fim_ts_t seconds)$/;"	f	class:fim::CommandConsole
cc	fim.cpp	/^	fim::CommandConsole cc;$/;"	m	namespace:fim	file:
cc_	DebugConsole.h	/^		CommandConsole & cc_;	\/\/ temporarily$/;"	m	class:fim::MiniConsole
ccachels_t	Cache.h	/^	typedef std::map<cache_key_t,int >        ccachels_t;	\/\/filename - counter$/;"	t	class:fim::Cache
ccol_	DebugConsole.h	/^		int  ccol_;	\/\/ the currently pointed column$/;"	m	class:fim::MiniConsole
cf_	Browser.h	/^	fim_int cf_;$/;"	m	class:fim::Browser
ch	FbiStuffText.cpp	/^    fim_int cw,ch;$/;"	m	struct:fim::text_state	file:
check_invalid	Image.cpp	/^        bool Image::check_invalid(void)$/;"	f	class:fim::Image
check_invalid	Viewport.cpp	/^        bool Viewport::check_invalid(void)const$/;"	f	class:fim::Viewport
check_valid	Image.cpp	/^        bool Image::check_valid(void)$/;"	f	class:fim::Image
check_valid	Viewport.cpp	/^        bool Viewport::check_valid(void)const$/;"	f	class:fim::Viewport
chfocus	FimWindow.cpp	/^	bool FimWindow::chfocus(void)$/;"	f	class:fim::FimWindow
chomp	common.cpp	/^void chomp(fim_char_t *s)$/;"	f
cimage	FbiStuffMagick.cpp	/^	Image * cimage; \/* Warning: this is NOT to be confused with fim's Image class *\/$/;"	m	struct:magick_state_t	file:
cinfo	FbiStuffJpeg.cpp	/^    struct jpeg_decompress_struct cinfo;$/;"	m	struct:fim::jpeg_state	typeref:struct:fim::jpeg_state::jpeg_decompress_struct	file:
cleanup	CommandConsole.cpp	/^	void CommandConsole::cleanup(void)$/;"	f	class:fim::CommandConsole
cleanup	DisplayDevice.h	/^	virtual void cleanup(void){}\/\/ really, only for making happy fbdev$/;"	f	class:DisplayDevice
cleanup	FramebufferDevice.cpp	/^void FramebufferDevice::cleanup(void)$/;"	f	class:fim::FramebufferDevice
clear	DebugConsole.cpp	/^		fim_err_t MiniConsole::clear(void)$/;"	f	class:fim::MiniConsole
clear_line	FramebufferDevice.cpp	/^fim_byte_t * FramebufferDevice::clear_line(int bpp, int line, int owidth, fim_byte_t *dst)$/;"	f	class:fim::FramebufferDevice
clear_rect	AADevice.cpp	/^	fim_err_t AADevice::clear_rect(fim_coo_t x1, fim_coo_t x2, fim_coo_t y1, fim_coo_t y2)$/;"	f	class:AADevice
clear_rect	CACADevice.cpp	/^	fim_err_t CACADevice::clear_rect(fim_coo_t x1, fim_coo_t x2, fim_coo_t y1,fim_coo_t y2)$/;"	f	class:CACADevice
clear_rect	DummyDisplayDevice.h	/^	virtual fim_err_t clear_rect(fim_coo_t x1, fim_coo_t x2, fim_coo_t y1,fim_coo_t y2){return FIM_ERR_NO_ERROR;}$/;"	f	class:DummyDisplayDevice
clear_rect	FramebufferDevice.h	/^	fim_err_t clear_rect(fim_coo_t x1, fim_coo_t x2, fim_coo_t y1,fim_coo_t y2)$/;"	f	class:fim::FramebufferDevice
clear_rect	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::clear_rect(fim_coo_t x1, fim_coo_t x2, fim_coo_t y1,fim_coo_t y2)$/;"	f	class:Imlib2Device
clear_rect	SDLDevice.cpp	/^	fim_err_t SDLDevice::clear_rect(fim_coo_t x1, fim_coo_t x2, fim_coo_t y1,fim_coo_t y2)$/;"	f	class:SDLDevice
clear_rect_	AADevice.cpp	/^	fim_err_t AADevice::clear_rect_($/;"	f	class:AADevice
clear_rect_	CACADevice.cpp	/^	int CACADevice::clear_rect_($/;"	f	class:CACADevice
clear_rect_	SDLDevice.cpp	/^	fim_err_t SDLDevice::clear_rect_($/;"	f	class:SDLDevice
clear_screen	FramebufferDevice.cpp	/^void FramebufferDevice::clear_screen(void)$/;"	f	class:fim::FramebufferDevice
cline_	DebugConsole.h	/^		int  cline_;	\/\/ the line_ on the top of the buffer$/;"	m	class:fim::MiniConsole
cloneCache_	Cache.h	/^	cloned_cachels_t cloneCache_;$/;"	m	class:fim::Cache
cloneUsageCounter_	Cache.h	/^	cuc_t		cloneUsageCounter_;$/;"	m	class:fim::Cache
clone_pool_	Cache.h	/^	std::set< fim::Image* > clone_pool_;$/;"	m	class:fim::Cache
cloned_cachels_t	Cache.h	/^	typedef std::map<cache_key_t,std::vector<fim::Image*> > cloned_cachels_t;	\/\/filename - cloned images??$/;"	t	class:fim::Cache
close	FimWindow.cpp	/^	bool FimWindow::close(void)$/;"	f	class:fim::FimWindow
cm	Imlib2Device.cpp	/^static Colormap cm;$/;"	v	file:
cmap	FbiStuffBmp.cpp	/^    struct bmp_cmap cmap[256];$/;"	m	struct:fim::bmp_state	typeref:struct:fim::bmp_state::bmp_cmap	file:
cmap_	FramebufferDevice.h	/^	struct fb_cmap cmap_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::fb_cmap
cmdId	lex.h	/^typedef enum { intCon, floatCon, typeOpr, stringCon,cmdId\/*cmdId is dead *\/,vId } nodeEnum;$/;"	e	enum:__anon11
cmd_	Command.h	/^	fim::string cmd_,$/;"	m	class:fim::Command
cmt	FbiStuffPng.cpp	/^    char * cmt;$/;"	m	struct:fim::fim_png_state	file:
color_type	FbiStuffPng.cpp	/^    int          color_type;$/;"	m	struct:fim::fim_png_state	file:
colormap	FbiStuffPcx.cpp	/^  colormap_rgb_s colormap[16];	\/\/amounts to 48 bytes$/;"	m	struct:fim::__anon3	file:
colormap_rgb_s	FbiStuffPcx.cpp	/^} colormap_rgb_s;$/;"	t	namespace:fim	typeref:struct:fim::__anon2	file:
commandConsole	Viewport.h	/^	CommandConsole &commandConsole;$/;"	m	class:fim::Viewport
commandConsole_	Browser.h	/^	CommandConsole &commandConsole_;$/;"	m	class:fim::Browser
commandConsole_	FimWindow.h	/^	CommandConsole &commandConsole_;$/;"	m	class:fim::FimWindow
command_generator	CommandConsole.cpp	/^	fim_char_t * CommandConsole::command_generator (const fim_char_t *text,int state,int mask)const$/;"	f	class:fim::CommandConsole
command_generator	readline.cpp	/^static fim_char_t * command_generator (const fim_char_t *text,int state)$/;"	f	file:
commands_	CommandConsole.h	/^	std::vector<Command*> commands_;			\/\/command->method$/;"	m	class:fim::CommandConsole
completion_display_matches_hook	readline.cpp	/^static void completion_display_matches_hook(fim_char_t **matches,int num,int max)$/;"	f	namespace:rl
compression	FbiStuffBmp.cpp	/^    fim_char_t   compression[4];$/;"	m	struct:fim::bmp_hdr	file:
con	lex.h	/^conNodeType con; \/* constants *\/$/;"	m	union:nodeTypeTag::__anon17
conNodeType	lex.h	/^} conNodeType;$/;"	t	typeref:struct:__anon12
concat	Var.h	/^	Var concat(const Var &v)const{return this->getString()+v.getString();}$/;"	f	class:fim::Var
conf	FbiStuffLoader.h	/^    int   (*conf)(Widget widget, struct ida_image *img);$/;"	m	struct:fim::ida_writer
config	FbiStuffTiff.cpp	/^    uint16         config,nsamples,depth,fillorder,photometric;$/;"	m	struct:fim::tiff_state	file:
console	Command.h	/^		CommandConsole *console;$/;"	m	union:fim::Command::__anon6
console_control	CACADevice.cpp	/^	fim_err_t CACADevice::console_control(fim_cc_t code){return FIM_ERR_GENERIC;}$/;"	f	class:CACADevice
console_control	DisplayDevice.cpp	/^fim_err_t DisplayDevice::console_control(fim_cc_t arg)\/\/experimental$/;"	f	class:DisplayDevice
console_control	DummyDisplayDevice.h	/^	virtual fim_err_t console_control(fim_cc_t code){return FIM_ERR_NO_ERROR;}$/;"	f	class:DummyDisplayDevice
console_switch	DisplayDevice.h	/^	virtual void console_switch(fim_bool_t is_busy){}\/\/ really, only for making happy fbdev$/;"	f	class:DisplayDevice
console_switch	FramebufferDevice.cpp	/^void FramebufferDevice::console_switch(fim_bool_t is_busy)$/;"	f	class:fim::FramebufferDevice
consolef	Command.h	/^		fim::string (CommandConsole::*consolef)(const std::vector<fim::string>&) ;$/;"	m	class:fim::Command::__anon5::fim
convert_line	FramebufferDevice.cpp	/^fim_byte_t * FramebufferDevice::convert_line(int bpp, int line, int owidth, fim_byte_t *dst, fim_byte_t *buffer, int mirror)\/*dez's mirror patch*\/$/;"	f	class:fim::FramebufferDevice
convert_line_8	FramebufferDevice.cpp	/^fim_byte_t * FramebufferDevice::convert_line_8(int bpp, int line, int owidth, fim_byte_t *dst, fim_byte_t *buffer, int mirror)\/*dez's mirror patch*\/$/;"	f	class:fim::FramebufferDevice
corners_	FimWindow.h	/^	Rect corners_;\/\/,status,canvas;$/;"	m	class:fim::FimWindow
cosa	FbiStuff.cpp	/^    float angle,sina,cosa;$/;"	m	struct:fim::op_rotate_state	file:
count_hdivs	FimWindow.cpp	/^	int FimWindow::count_hdivs(void)const$/;"	f	class:fim::FimWindow
count_vdivs	FimWindow.cpp	/^	int FimWindow::count_vdivs(void)const$/;"	f	class:fim::FimWindow
cout	fim.cpp	/^	fim_stream cout\/*(1)*\/;$/;"	m	namespace:fim	file:
ct	FbiStuffPng.cpp	/^static const fim_char_t *ct[] = {$/;"	m	namespace:fim	file:
cuc_t	Cache.h	/^	typedef std::map<fim::Image*,int >  	   cuc_t;	\/\/image - filename$/;"	t	class:fim::Cache
current	Browser.cpp	/^	fim::string Browser::current(void)const$/;"	f	class:fim::Browser
current	CommandConsole.cpp	/^	fim::string CommandConsole::current()const$/;"	f	class:fim::CommandConsole
current_h_	Imlib2Device.h	/^	fim_coo_t current_h_;$/;"	m	class:Imlib2Device
current_h_	SDLDevice.h	/^	fim_coo_t current_h_;$/;"	m	class:SDLDevice
current_image	Browser.cpp	/^	fim_int Browser::current_image(void)const$/;"	f	class:fim::Browser
current_n	Browser.cpp	/^	int Browser::current_n(void)const$/;"	f	class:fim::Browser
current_update_	Imlib2Device.h	/^   	Imlib_Updates updates_, current_update_;$/;"	m	class:Imlib2Device
current_viewport	CommandConsole.cpp	/^	Viewport* CommandConsole::current_viewport(void)const$/;"	f	class:fim::CommandConsole
current_viewport	FimWindow.cpp	/^	Viewport & FimWindow::current_viewport(void)const$/;"	f	class:fim::FimWindow
current_viewportp	FimWindow.cpp	/^	Viewport * FimWindow::current_viewportp(void)const$/;"	f	class:fim::FimWindow
current_w_	Imlib2Device.h	/^	fim_coo_t current_w_;$/;"	m	class:Imlib2Device
current_w_	SDLDevice.h	/^	fim_coo_t current_w_;$/;"	m	class:SDLDevice
current_window	CommandConsole.cpp	/^	const FimWindow & CommandConsole::current_window(void)const$/;"	f	class:fim::CommandConsole
cvar	interpreter.cpp	/^Var cvar(nodeType *p)$/;"	f
cw	FbiStuffText.cpp	/^    fim_int cw,ch;$/;"	m	struct:fim::text_state	file:
cx	FbiStuff.cpp	/^    int cx,cy;$/;"	m	struct:fim::op_rotate_state	file:
cy	FbiStuff.cpp	/^    int cx,cy;$/;"	m	struct:fim::op_rotate_state	file:
cycles_	CommandConsole.h	/^	fim_cycles_t cycles_;					\/\/fim execution cycles_ counter (quite useless)$/;"	m	class:fim::CommandConsole
data	FbiStuffLoader.h	/^    fim_byte_t          *data;$/;"	m	struct:fim::ida_image
data	FbiStuffLoader.h	/^    fim_byte_t     *data;$/;"	m	struct:fim::ida_extra
dc	FbiStuffDjvu.cpp	/^    DDJVUAPI ddjvu_context_t  * dc;$/;"	m	struct:fim::djvu_state_t	file:
dd	FbiStuffDjvu.cpp	/^    DDJVUAPI ddjvu_document_t * dd;$/;"	m	struct:fim::djvu_state_t	file:
dealloc	fim.h	/^	void dealloc(void){if(mdp)fim_free(mdp);reset();}$/;"	f	class:fim_mipmap_t
debug_	DisplayDevice.h	/^	fim_bool_t debug_;\/\/ really, only for making happy fbdev$/;"	m	class:DisplayDevice
default_fbdev	fim.cpp	/^	fim_char_t *default_fbdev=NULL,*default_fbmode=NULL;$/;"	m	namespace:fim	file:
default_fbgamma	fim.cpp	/^	fim_float_t default_fbgamma=-1.0;$/;"	m	namespace:fim	file:
default_fbmode	fim.cpp	/^	fim_char_t *default_fbdev=NULL,*default_fbmode=NULL;$/;"	m	namespace:fim	file:
default_font	FontServer.cpp	/^static const fim_char_t *default_font[] = {$/;"	m	namespace:fim	file:
default_image_	Browser.h	/^	Image *default_image_;	\/\/ experimental$/;"	m	class:fim::Browser
default_vt	fim.cpp	/^	int default_vt=-1;$/;"	m	namespace:fim	file:
depth	FbiStuffTiff.cpp	/^    uint16         config,nsamples,depth,fillorder,photometric;$/;"	m	struct:fim::tiff_state	file:
depth	Imlib2Device.cpp	/^static int      depth;$/;"	v	file:
desaturate	Image.cpp	/^	bool Image::desaturate(void)$/;"	f	class:fim::Image
desc	fim.cpp	/^  const fim_char_t *desc;\/* this is fim specific *\/$/;"	m	struct:fim_options_t	file:
desc_3x3	FbiStuff.cpp	/^struct ida_op desc_3x3 = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_autocrop	FbiStuff.cpp	/^struct ida_op desc_autocrop = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_crop	FbiStuff.cpp	/^struct ida_op desc_crop = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_flip_horz	FbiStuff.cpp	/^struct ida_op desc_flip_horz = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_flip_vert	FbiStuff.cpp	/^struct ida_op desc_flip_vert = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_grayscale	FbiStuff.cpp	/^struct ida_op desc_grayscale = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_invert	FbiStuff.cpp	/^struct ida_op desc_invert = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_resize	FbiStuff.cpp	/^struct ida_op desc_resize = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_rotate	FbiStuff.cpp	/^struct ida_op desc_rotate = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_rotate_ccw	FbiStuff.cpp	/^struct ida_op desc_rotate_ccw = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_rotate_cw	FbiStuff.cpp	/^struct ida_op desc_rotate_cw = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_sharpe	FbiStuff.cpp	/^struct ida_op desc_sharpe = {$/;"	m	namespace:fim	typeref:struct:fim::ida_op	file:
desc_update	Cache.cpp	/^	void Cache::desc_update(void)$/;"	f	class:fim::Cache
desc_update	Image.cpp	/^	void Image::desc_update()$/;"	f	class:fim::Image
dev_init	FramebufferDevice.cpp	/^void FramebufferDevice::dev_init(void)$/;"	f	class:fim::FramebufferDevice
devices_	FramebufferDevice.h	/^	struct DEVS *devices_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::DEVS
devs_default_	FramebufferDevice.h	/^	struct DEVS devs_default_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::DEVS
devs_devfs_	FramebufferDevice.h	/^	struct DEVS devs_devfs_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::DEVS
disp	Imlib2Device.cpp	/^static Display *disp=NULL;$/;"	v	file:
display	AADevice.cpp	/^	fim_err_t AADevice::display($/;"	f	class:AADevice
display	Browser.cpp	/^	fim::string Browser::display(void)$/;"	f	class:fim::Browser
display	CACADevice.cpp	/^	fim_err_t CACADevice::display($/;"	f	class:CACADevice
display	CommandConsole.cpp	/^	bool CommandConsole::display(void)$/;"	f	class:fim::CommandConsole
display	DummyDisplayDevice.h	/^	virtual fim_err_t display($/;"	f	class:DummyDisplayDevice
display	FramebufferDevice.cpp	/^fim_err_t FramebufferDevice::display($/;"	f	class:FramebufferDevice
display	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::display($/;"	f	class:Imlib2Device
display	SDLDevice.cpp	/^	fim_err_t SDLDevice::display($/;"	f	class:SDLDevice
display	Viewport.cpp	/^	bool Viewport::display(void)$/;"	f	class:fim::Viewport
display_reinit	CommandConsole.cpp	/^	fim_err_t CommandConsole::display_reinit(const fim_char_t *rs)$/;"	f	class:fim::CommandConsole
display_status	Browser.cpp	/^	fim::string Browser::display_status(const fim_char_t *l)$/;"	f	class:fim::Browser
displaydevice_	CommandConsole.h	/^	DisplayDevice *displaydevice_;$/;"	m	class:fim::CommandConsole
displaydevice_	Viewport.h	/^        DisplayDevice* displaydevice_;$/;"	m	class:fim::Viewport
dither_	FramebufferDevice.h	/^	int             dither_ , pcd_res_ \/*, steps_*\/ ;$/;"	m	class:fim::FramebufferDevice
dither_line	FramebufferDevice.cpp	/^void inline FramebufferDevice::dither_line(fim_byte_t *src, fim_byte_t *dst, int y, int width,int mirror)$/;"	f	class:fim::FramebufferDevice
dither_line_gray	FramebufferDevice.cpp	/^void FramebufferDevice::dither_line_gray(fim_byte_t *src, fim_byte_t *dst, int y, int width)$/;"	f	class:fim::FramebufferDevice
div	FbiStuff.h	/^    int mul,div,add;$/;"	m	struct:fim::op_3x3_parm
djvu_done	FbiStuffDjvu.cpp	/^djvu_done(void *data)$/;"	f	namespace:fim
djvu_init	FbiStuffDjvu.cpp	/^djvu_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
djvu_loader	FbiStuffDjvu.cpp	/^static struct ida_loader djvu_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
djvu_read	FbiStuffDjvu.cpp	/^djvu_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
djvu_state_t	FbiStuffDjvu.cpp	/^struct djvu_state_t {$/;"	s	namespace:fim	file:
do_dump	DebugConsole.cpp	/^		fim_err_t MiniConsole::do_dump(int amount)const$/;"	f	class:fim::MiniConsole
do_dump	DebugConsole.cpp	/^		fim_err_t MiniConsole::do_dump(int f_, int l)const$/;"	f	class:fim::MiniConsole
do_dump	DebugConsole.cpp	/^		fim_err_t MiniConsole::do_dump(void)const$/;"	f	class:fim::MiniConsole
do_dump_key_codes	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::do_dump_key_codes(const args_t& args)const$/;"	f	class:fim::CommandConsole
do_dump_record_buffer	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::do_dump_record_buffer(const args_t &args)const$/;"	f	class:fim::CommandConsole
do_echo	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::do_echo(const args_t &args)const$/;"	f	class:fim::CommandConsole
do_push	Browser.cpp	/^	fim::string Browser::do_push(const args_t &args)$/;"	f	class:fim::Browser
do_remove	Browser.cpp	/^	fim::string Browser::do_remove(const args_t &args)$/;"	f	class:fim::Browser
done	FbiStuffLoader.h	/^    void  (*done)(void *data);$/;"	m	struct:fim::ida_loader
done	FbiStuffLoader.h	/^    void  (*done)(void *data);$/;"	m	struct:fim::ida_op
dont_record_last_action_	CommandConsole.h	/^	bool dont_record_last_action_;$/;"	m	class:fim::CommandConsole
dp	FbiStuffDjvu.cpp	/^    ddjvu_page_t *dp;$/;"	m	struct:fim::djvu_state_t	file:
dpi	FbiStuff.h	/^    int dpi;$/;"	m	struct:fim::op_resize_parm
dpi	FbiStuffLoader.h	/^    unsigned int      dpi;$/;"	m	struct:fim::ida_image_info
drawOutput	CommandConsole.cpp	/^	fim_bool_t CommandConsole::drawOutput(const fim_char_t *s)const$/;"	f	class:fim::CommandConsole
dummy	CommandConsole.cpp	/^	fim::string CommandConsole::dummy(std::vector<Arg> args)$/;"	f	class:fim::CommandConsole
dummy_img_	Cache.h	/^	Image dummy_img_;	\/\/ experimental$/;"	m	class:fim::Cache
dummydisplaydevice_	CommandConsole.h	/^	DummyDisplayDevice dummydisplaydevice_;$/;"	m	class:fim::CommandConsole
dump	DebugConsole.cpp	/^		fim_err_t MiniConsole::dump(void)$/;"	f	class:fim::MiniConsole
dumpDefaultFimrc	CommandConsole-init.cpp	/^	void CommandConsole::dumpDefaultFimrc(void)const$/;"	f	class:fim::CommandConsole
dump_exif	FbiStuffJpeg.cpp	/^static void dump_exif(FILE *out, ExifData *ed, Namespace *nsp = NULL)$/;"	f	namespace:fim
dump_record_buffer	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::dump_record_buffer(const args_t &args)$/;"	f	class:fim::CommandConsole
dump_reference_manual	CommandConsole-help.cpp	/^	fim::string CommandConsole::dump_reference_manual(const args_t& args)$/;"	f	class:fim::CommandConsole
dupnstr	common.cpp	/^fim_char_t * dupnstr (const fim_char_t c1, double n, const fim_char_t c2)$/;"	f
dupnstr	common.cpp	/^fim_char_t * dupnstr (fim_int n)$/;"	f
dupnstr	common.cpp	/^fim_char_t * dupnstr (float n, const fim_char_t c)$/;"	f
dupsqstr	common.cpp	/^fim_char_t * dupsqstr (const fim_char_t* s)$/;"	f
dupstr	common.cpp	/^fim_char_t * dupstr (const fim_char_t* s)$/;"	f
dupstrn	common.cpp	/^static fim_char_t * dupstrn (const fim_char_t* s, size_t l)$/;"	f	file:
eindex	FontServer.h	/^    FSXCharInfo        **eindex;$/;"	m	struct:fim::fs_font
empty_file_list	Browser.cpp	/^	int Browser::empty_file_list(void)const$/;"	f	class:fim::Browser
encoding	FbiStuffPcx.cpp	/^  fim_byte_t     encoding;$/;"	m	struct:fim::__anon3	file:
enlarge	FimWindow.cpp	/^	fim_err_t FimWindow::enlarge(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT)$/;"	f	class:fim::FimWindow
eq	Var.h	/^	int eq (const char*s)const$/;"	f	class:fim::Var
erase	Cache.cpp	/^	int Cache::erase(fim::Image* oi)$/;"	f	class:fim::Cache
erase_clone	Cache.cpp	/^	int Cache::erase_clone(fim::Image* oi)$/;"	f	class:fim::Cache
ers	Image.cpp	/^static void ers(const char*value, Image *image)$/;"	f	namespace:fim
ev_	Imlib2Device.h	/^   	XEvent ev_;$/;"	m	class:Imlib2Device
event_	SDLDevice.h	/^	SDL_Event event_;$/;"	m	class:SDLDevice
ex	interpreter.cpp	/^Var ex(nodeType *p)$/;"	f
exception	FbiStuffMagick.cpp	/^	ExceptionInfo exception;$/;"	m	struct:magick_state_t	file:
execDefaultConfiguration	CommandConsole.cpp	/^	fim_err_t CommandConsole::execDefaultConfiguration(void)$/;"	f	class:fim::CommandConsole
execute	Command.h	/^	fim::string execute(const std::vector<fim::string> &args)$/;"	f	class:fim::Command
execute	CommandConsole.cpp	/^        fim::string CommandConsole::execute(fim::string cmd, args_t args)$/;"	f	class:fim::CommandConsole
executeBinding	CommandConsole.cpp	/^	void CommandConsole::executeBinding(const fim_key_t c)$/;"	f	class:fim::CommandConsole
executeFile	CommandConsole.cpp	/^	fim_err_t CommandConsole::executeFile(const fim_char_t *s)$/;"	f	class:fim::CommandConsole
executeStdFileDescriptor	CommandConsole.cpp	/^	fim_err_t CommandConsole::executeStdFileDescriptor(FILE* fd)$/;"	f	class:fim::CommandConsole
execute_internal	CommandConsole.cpp	/^	fim_err_t CommandConsole::execute_internal(const fim_char_t *ss, fim_xflags_t xflags)$/;"	f	class:fim::CommandConsole
execute_record_buffer	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::execute_record_buffer(const args_t &args)$/;"	f	class:fim::CommandConsole
executionCycle	CommandConsole.cpp	/^	fim_perr_t CommandConsole::executionCycle(void)$/;"	f	class:fim::CommandConsole
exit	CommandConsole.cpp	/^	void CommandConsole::exit(fim_perr_t i)const$/;"	f	class:fim::CommandConsole
exitBinding_	CommandConsole.h	/^	fim_key_t exitBinding_;				\/\/The key bound to exit. If 0, the special "Any" key.$/;"	m	class:fim::CommandConsole
ext	FbiStuffLoader.h	/^    const fim_char_t  *ext[8];$/;"	m	struct:fim::ida_writer
extents	FontServer.h	/^    FSXCharInfo        *extents;$/;"	m	struct:fim::fs_font
extra	FbiStuffLoader.h	/^    struct ida_extra  *extra;$/;"	m	struct:fim::ida_image_info	typeref:struct:fim::ida_image_info::ida_extra
f	Var.h	/^		float f;$/;"	m	union:fim::Var::__anon18
f	lex.h	/^float f; \/* subscript to sym array *\/$/;"	m	struct:__anon14
f1	FbiStuff.h	/^    int f1[3];$/;"	m	struct:fim::op_3x3_parm
f2	FbiStuff.h	/^    int f2[3];$/;"	m	struct:fim::op_3x3_parm
f3	FbiStuff.h	/^    int f3[3];$/;"	m	struct:fim::op_3x3_parm
f_	DisplayDevice.h	/^	struct fs_font *f_;$/;"	m	class:DisplayDevice	typeref:struct:DisplayDevice::fs_font
f_	FbiStuffText.cpp	/^    struct fs_font *f_;$/;"	m	struct:fim::text_state	typeref:struct:fim::text_state::fs_font	file:
factor	FbiStuff.cpp	/^    int  factor;$/;"	m	struct:fim::op_sharpe_handle	file:
factor	FbiStuff.h	/^    int factor;$/;"	m	struct:fim::op_sharpe_parm
fb0	FramebufferDevice.h	/^    const fim_char_t *fb0;$/;"	m	struct:fim::DEVS
fb_	FramebufferDevice.h	/^	int                       fb_,tty_;$/;"	m	class:fim::FramebufferDevice
fb_activate_current	FramebufferDevice.cpp	/^int FramebufferDevice::fb_activate_current(int tty_)$/;"	f	class:fim::FramebufferDevice
fb_catch_exit_signal	FbiStuffFbtools.cpp	/^fb_catch_exit_signal(int signal)$/;"	f	namespace:fim
fb_catch_exit_signals	FbiStuffFbtools.cpp	/^void fb_catch_exit_signals(void)$/;"	f	namespace:fim
fb_clear_rect	FramebufferDevice.cpp	/^void FramebufferDevice::fb_clear_rect(int x1, int x2, int y1,int y2)$/;"	f	class:fim::FramebufferDevice
fb_fatal_cleanup	FbiStuffFbtools.cpp	/^static sigjmp_buf fb_fatal_cleanup;	\/* posix *\/$/;"	m	namespace:fim	file:
fb_fix_	FramebufferDevice.h	/^	struct fb_fix_screeninfo   fb_fix_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::fb_fix_screeninfo
fb_font_get_current_font	FramebufferDevice.h	/^	struct fs_font * fb_font_get_current_font(void)$/;"	f	class:fim::FramebufferDevice
fb_font_height	FramebufferDevice.cpp	/^	int  FramebufferDevice::fb_font_height(void) { return f_->height; }$/;"	f	class:fim::FramebufferDevice
fb_font_width	FramebufferDevice.cpp	/^	int  FramebufferDevice::fb_font_width(void) { return f_->width; }$/;"	f	class:fim::FramebufferDevice
fb_init	FramebufferDevice.cpp	/^int FramebufferDevice::fb_init(const fim_char_t *device, fim_char_t *mode, int vt_, int try_boz_patch)$/;"	f	class:fim::FramebufferDevice
fb_line	FramebufferDevice.cpp	/^void FramebufferDevice::fb_line(int x1, int x2, int y1,int y2)$/;"	f	class:fim::FramebufferDevice
fb_mem_	FramebufferDevice.h	/^	fim_byte_t             *fb_mem_;$/;"	m	class:fim::FramebufferDevice
fb_mem_offset_	FramebufferDevice.h	/^	int			   fb_mem_offset_;$/;"	m	class:fim::FramebufferDevice
fb_memset	FramebufferDevice.cpp	/^void FramebufferDevice::fb_memset (void *addr, int c, size_t len)$/;"	f	class:fim::FramebufferDevice
fb_ovar_	FramebufferDevice.h	/^	struct fb_var_screeninfo  fb_ovar_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::fb_var_screeninfo
fb_rect	FramebufferDevice.cpp	/^void FramebufferDevice::fb_rect(int x1, int x2, int y1,int y2)$/;"	f	class:fim::FramebufferDevice
fb_setcolor	FramebufferDevice.h	/^	void fb_setcolor(int c) { fb_memset(fb_mem_+fb_mem_offset_,c,fb_fix_.smem_len); }$/;"	f	class:fim::FramebufferDevice
fb_setmode	FramebufferDevice.cpp	/^int FramebufferDevice::fb_setmode(fim_char_t *name)$/;"	f	class:fim::FramebufferDevice
fb_setpixel	FramebufferDevice.cpp	/^void FramebufferDevice::fb_setpixel(int x, int y, unsigned int color)$/;"	f	class:fim::FramebufferDevice
fb_setvt	FramebufferDevice.cpp	/^void FramebufferDevice::fb_setvt(int vtno)$/;"	f	class:fim::FramebufferDevice
fb_status_screen_new	DisplayDevice.cpp	/^void DisplayDevice::fb_status_screen_new(const fim_char_t *msg, fim_bool_t draw, fim_flags_t flags)\/\/experimental$/;"	f	class:DisplayDevice
fb_switch_acquire	FramebufferDevice.cpp	/^void FramebufferDevice::fb_switch_acquire(void)$/;"	f	class:fim::FramebufferDevice
fb_switch_init	FramebufferDevice.cpp	/^int FramebufferDevice::fb_switch_init(void)$/;"	f	class:fim::FramebufferDevice
fb_switch_release	FramebufferDevice.cpp	/^void FramebufferDevice::fb_switch_release(void)$/;"	f	class:fim::FramebufferDevice
fb_switch_signal	FramebufferDevice.cpp	/^void FramebufferDevice::fb_switch_signal(int signal)$/;"	f	class:fim::FramebufferDevice
fb_switch_state_	FramebufferDevice.h	/^	int                        fb_switch_state_;$/;"	m	class:fim::FramebufferDevice
fb_text_box	FramebufferDevice.cpp	/^void FramebufferDevice::fb_text_box(int x, int y, fim_char_t *lines[], unsigned int count)$/;"	f	class:fim::FramebufferDevice
fb_text_init1	FontServer.cpp	/^void FontServer::fb_text_init1(const fim_char_t *font_, struct fs_font **_f)$/;"	f	class:fim::FontServer
fb_text_init2	FramebufferDevice.cpp	/^int FramebufferDevice::fb_text_init2(void)$/;"	f	class:fim::FramebufferDevice
fb_var_	FramebufferDevice.h	/^	struct fb_var_screeninfo   fb_var_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::fb_var_screeninfo
fbdev_	FramebufferDevice.h	/^	fim_char_t                       *fbdev_;$/;"	m	class:fim::FramebufferDevice
fbgamma_	FramebufferDevice.h	/^	float fbgamma_ ;$/;"	m	class:fim::FramebufferDevice
fbi_image_clone	FbiStuff.cpp	/^struct ida_image * fbi_image_clone(const struct ida_image *img)$/;"	f	namespace:fim
fbmode_	FramebufferDevice.h	/^	fim_char_t                       *fbmode_;$/;"	m	class:fim::FramebufferDevice
fbnr	FramebufferDevice.h	/^    const fim_char_t *fbnr;$/;"	m	struct:fim::DEVS
fcmd__stdout	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd__stdout(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_alias	CommandConsole.cpp	/^	fim::string CommandConsole::fcmd_alias(std::vector<Arg> args)$/;"	f	class:fim::CommandConsole
fcmd_align	Browser.cpp	/^	fim::string Browser::fcmd_align(const args_t &args)$/;"	f	class:fim::Browser
fcmd_autocmd	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_autocmd(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_autocmd_del	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_autocmd_del(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_basename	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_basename(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_bind	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_bind(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_cd	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_cd(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_clear	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_clear(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_cmd	FimWindow.cpp	/^        fim::string FimWindow::fcmd_cmd(const std::vector<fim::string> &args)$/;"	f	class:fim::FimWindow
fcmd_commands_list	CommandConsole.cpp	/^	fim::string CommandConsole::fcmd_commands_list(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_desaturate	Browser.cpp	/^	fim::string Browser::fcmd_desaturate(const args_t &args)$/;"	f	class:fim::Browser
fcmd_desc	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_desc(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_display	Browser.cpp	/^	fim::string Browser::fcmd_display(const args_t &args)$/;"	f	class:fim::Browser
fcmd_do_getenv	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_do_getenv(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_dump_key_codes	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_dump_key_codes(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_echo	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_echo(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_eval	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_eval(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_executeFile	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_executeFile(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_foo	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_foo(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_goto_image	Browser.cpp	/^	fim::string Browser::fcmd_goto_image(const args_t &args)$/;"	f	class:fim::Browser
fcmd_help	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_help(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_info	Browser.cpp	/^	fim::string Browser::fcmd_info(const args_t &args)$/;"	f	class:fim::Browser
fcmd_list	Browser.cpp	/^	fim::string Browser::fcmd_list(const args_t &args)$/;"	f	class:fim::Browser
fcmd_load	Browser.cpp	/^	fim::string Browser::fcmd_load(const args_t &args)$/;"	f	class:fim::Browser
fcmd_magnify	Browser.cpp	/^	fim::string Browser::fcmd_magnify(const args_t &args)$/;"	f	class:fim::Browser
fcmd_negate	Browser.cpp	/^	fim::string Browser::fcmd_negate(const args_t &args)$/;"	f	class:fim::Browser
fcmd_no_image	Browser.cpp	/^	fim::string Browser::fcmd_no_image(const args_t &args)$/;"	f	class:fim::Browser
fcmd_pread	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_pread(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_prefetch	Browser.cpp	/^	fim::string Browser::fcmd_prefetch(const args_t &args)$/;"	f	class:fim::Browser
fcmd_pwd	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_pwd(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_quit	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_quit(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_recording	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_recording(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_redisplay	Browser.cpp	/^	fim::string Browser::fcmd_redisplay(const args_t &args)$/;"	f	class:fim::Browser
fcmd_reduce	Browser.cpp	/^	fim::string Browser::fcmd_reduce(const args_t &args)$/;"	f	class:fim::Browser
fcmd_reload	Browser.cpp	/^	fim::string Browser::fcmd_reload(const args_t &args)$/;"	f	class:fim::Browser
fcmd_rotate	Browser.cpp	/^	fim::string Browser::fcmd_rotate(const args_t &args)$/;"	f	class:fim::Browser
fcmd_scale	Browser.cpp	/^	fim::string Browser::fcmd_scale(const args_t &args)$/;"	f	class:fim::Browser
fcmd_scrolldown	Browser.cpp	/^	fim::string Browser::fcmd_scrolldown(const args_t &args)$/;"	f	class:fim::Browser
fcmd_scrollforward	Browser.cpp	/^	fim::string Browser::fcmd_scrollforward(const args_t &args)$/;"	f	class:fim::Browser
fcmd_set	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_set(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_set_in_console	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_set_in_console(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_set_interactive_mode	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_set_interactive_mode(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_status	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_status(const args_t &args)$/;"	f	class:fim::CommandConsole
fcmd_sys_popen	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_sys_popen(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_system	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_system(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_unalias	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_unalias(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_unbind	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::fcmd_unbind(const args_t& args)$/;"	f	class:fim::CommandConsole
fcmd_variables_list	CommandConsole.cpp	/^	fim::string CommandConsole::fcmd_variables_list(const args_t& args)$/;"	f	class:fim::CommandConsole
fd_	FramebufferDevice.h	/^	int                        fd_, switch_last_;$/;"	m	class:fim::FramebufferDevice
fd_	fim_stream.h	/^		fim_str_t fd_;$/;"	m	class:fim::fim_stream
ferror	CommandConsole.cpp	620;"	d	file:
fetch	Image.h	/^	void fetch(const fim_fn_t &dfn, const fim_char_t sc)$/;"	f	class:ImgDscs
ff_stderr	FontServer.cpp	33;"	d	file:
ffdp	FramebufferDevice.cpp	/^static FramebufferDevice *ffdp;$/;"	m	namespace:fim	file:
fh	FbiStuffText.cpp	/^    fim_int fw,fh;$/;"	m	struct:fim::text_state	file:
fi	Image.h	/^	ImgDscs::iterator fi(const key_type & sk)$/;"	f	class:ImgDscs
fid	lex.h	/^fidNodeType fid; \/* identifiers *\/$/;"	m	union:nodeTypeTag::__anon17
fidNodeType	lex.h	/^} fidNodeType;$/;"	t	typeref:struct:__anon14
filename	FbiStuffMatrixMarket.cpp	/^	fim_char_t * filename;$/;"	m	struct:fim::mm_state_t	file:
fill_rect	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::fill_rect(fim_coo_t x1, fim_coo_t x2, fim_coo_t y1,fim_coo_t y2, fim_color_t color)$/;"	f	class:Imlib2Device
fill_rect	SDLDevice.cpp	/^	fim_err_t SDLDevice::fill_rect(fim_coo_t x1, fim_coo_t x2, fim_coo_t y1,fim_coo_t y2, fim_color_t color)$/;"	f	class:SDLDevice
filler	FbiStuffPcx.cpp	/^  fim_byte_t     filler[58];$/;"	m	struct:fim::__anon3	file:
fillorder	FbiStuffTiff.cpp	/^    uint16         config,nsamples,depth,fillorder,photometric;$/;"	m	struct:fim::tiff_state	file:
filter	FbiStuff.cpp	/^    struct op_3x3_parm filter;$/;"	m	struct:fim::op_3x3_handle	typeref:struct:fim::op_3x3_handle::op_3x3_parm	file:
fim	Arg.cpp	/^namespace fim$/;"	n	file:
fim	Arg.h	/^namespace fim$/;"	n
fim	Browser.cpp	/^namespace fim$/;"	n	file:
fim	Browser.h	/^namespace fim$/;"	n
fim	Cache.cpp	/^namespace fim$/;"	n	file:
fim	Cache.h	/^namespace fim$/;"	n
fim	Command.cpp	/^namespace fim$/;"	n	file:
fim	Command.h	/^namespace fim$/;"	n
fim	CommandConsole-cmd.cpp	/^namespace fim$/;"	n	file:
fim	CommandConsole-help.cpp	/^namespace fim$/;"	n	file:
fim	CommandConsole-init.cpp	/^namespace fim$/;"	n	file:
fim	CommandConsole-var.cpp	/^namespace fim$/;"	n	file:
fim	CommandConsole.cpp	/^namespace fim$/;"	n	file:
fim	CommandConsole.h	/^namespace fim$/;"	n
fim	DebugConsole.cpp	/^namespace fim$/;"	n	file:
fim	DebugConsole.h	/^namespace fim$/;"	n
fim	FbiStuff.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuff.h	/^namespace fim$/;"	n
fim	FbiStuffBit1.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffBit24.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffBmp.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffDjvu.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffFbtools.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffFbtools.h	/^namespace fim$/;"	n
fim	FbiStuffGif.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffJasPer.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffJpeg.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffLoader.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffLoader.h	/^namespace fim$/;"	n
fim	FbiStuffMagick.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffMatrixMarket.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffPcx.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffPdf.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffPng.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffPpm.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffPs.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffText.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffTiff.cpp	/^namespace fim$/;"	n	file:
fim	FbiStuffXyz.cpp	/^namespace fim$/;"	n	file:
fim	FimWindow.cpp	/^namespace fim$/;"	n	file:
fim	FimWindow.h	/^namespace fim$/;"	n
fim	FontServer.cpp	/^namespace fim$/;"	n	file:
fim	FontServer.h	/^namespace fim$/;"	n
fim	FramebufferDevice.cpp	/^namespace fim$/;"	n	file:
fim	FramebufferDevice.h	/^namespace fim$/;"	n
fim	Image.cpp	/^namespace fim$/;"	n	file:
fim	Image.h	/^namespace fim$/;"	n
fim	Imlib2Device.cpp	/^namespace fim$/;"	n	file:
fim	Namespace.cpp	/^namespace fim$/;"	n	file:
fim	Namespace.h	/^namespace fim$/;"	n
fim	SDLDevice.cpp	/^namespace fim$/;"	n	file:
fim	Var.cpp	/^namespace fim$/;"	n	file:
fim	Var.h	/^namespace fim$/;"	n
fim	Viewport.cpp	/^namespace fim$/;"	n	file:
fim	Viewport.h	/^namespace fim$/;"	n
fim	common.h	/^namespace fim$/;"	n
fim	fim.cpp	/^namespace fim$/;"	n	file:
fim	fim.h	/^namespace fim$/;"	n
fim	fim.h	/^namespace fim{$/;"	n
fim	fim_limits.h	/^namespace fim$/;"	n
fim	fim_stream.cpp	/^namespace fim$/;"	n	file:
fim	fim_stream.h	/^namespace fim$/;"	n
fim	fim_string.cpp	/^namespace fim$/;"	n	file:
fim	fim_string.h	/^namespace fim$/;"	n
fim	fim_wrappers.h	/^namespace fim$/;"	n
fim	interpreter.cpp	/^namespace fim$/;"	n	file:
fim	readline.cpp	/^namespace fim$/;"	n	file:
fim	readline.h	/^namespace fim$/;"	n
fimBaseNameSorter	Browser.cpp	/^} fimBaseNameSorter;$/;"	m	namespace:fim	typeref:struct:fim::FimBaseNameSorter	file:
fimDateSorter	Browser.cpp	/^} fimDateSorter;$/;"	m	namespace:fim	typeref:struct:fim::FimDateSorter	file:
fim_ExifContentForeachEntryFunc	FbiStuffJpeg.cpp	/^static void fim_ExifContentForeachEntryFunc (ExifEntry *entry, void * user_data)$/;"	f	namespace:fim
fim_ExifDataForeachContentFunc	FbiStuffJpeg.cpp	/^static void fim_ExifDataForeachContentFunc (ExifContent *content, void * user_data)$/;"	f	namespace:fim
fim_aa_char	AADevice.cpp	/^typedef char fim_aa_char;	\/* a type for aalib chars *\/$/;"	t	file:
fim_angle_t	fim_types.h	/^	typedef float fim_angle_t;	\/* a type for angles *\/$/;"	t
fim_atof	common.cpp	/^double fim_atof(const fim_char_t *nptr)$/;"	f
fim_atoi	common.cpp	/^fim_int fim_atoi(const char*s)$/;"	f
fim_background_load	Image.cpp	/^void fim_background_load()$/;"	f	namespace:fim
fim_basename_of	common.cpp	/^const fim_char_t * fim_basename_of(const fim_char_t * s)$/;"	f
fim_bench_subsystem	CommandConsole-init.cpp	/^static fim_err_t fim_bench_subsystem(Benchmarkable * bo)$/;"	f	namespace:fim
fim_bool_t	fim_types.h	/^	typedef bool   fim_bool_t;	\/* a type for bolean expressions *\/$/;"	t
fim_bpp_t	fim_types.h	/^	typedef int fim_bpp_t;		\/* a type for bits Per Pixel *\/$/;"	t
fim_byte_t	FbiStuffJasPer.cpp	/^typedef unsigned char fim_byte_t ;$/;"	t	namespace:fim	file:
fim_byte_t	fim_types.h	/^	typedef unsigned char fim_byte_t;	\/* a type for bytes *\/$/;"	t
fim_bzero	fim_wrappers.h	32;"	d
fim_calloc	fim_wrappers.h	27;"	d
fim_cc_t	fim_types.h	/^	typedef int fim_cc_t;		\/* a type for console control *\/$/;"	t
fim_char_t	fim_types.h	/^	typedef char fim_char_t;	\/* a type for chars *\/$/;"	t
fim_cmd_type_t	fim_types.h	/^	typedef int fim_cmd_type_t;	\/* a type for fim's command types *\/$/;"	t
fim_color_t	fim_types.h	/^	typedef int fim_color_t;	\/* >= 4 bytes *\/$/;"	t
fim_common_test	common.cpp	/^int fim_common_test(void)$/;"	f
fim_completion	readline.cpp	/^static fim_char_t ** fim_completion (const fim_char_t *text, int start,int end)$/;"	f	namespace:rl
fim_coo_t	fim_types.h	/^	typedef int fim_coo_t;		\/* a type for coordinates *\/$/;"	t
fim_cycles_t	fim_types.h	/^	typedef int fim_cycles_t;	\/* a type for fim's cycles *\/$/;"	t
fim_desaturate_rgb	Image.cpp	/^	static void fim_desaturate_rgb(fim_byte_t * data, int howmany)$/;"	f	namespace:fim
fim_dirname	common.cpp	/^fim::string fim_dirname(const fim::string & arg)$/;"	f
fim_ds_t	Image.h	/^typedef std::string fim_ds_t;$/;"	t
fim_dump_man_page	fim.cpp	/^int fim_dump_man_page(void)$/;"	f	class:FimInstance	file:
fim_dump_man_page_snippets	fim.cpp	/^string fim_dump_man_page_snippets(void)$/;"	f	class:FimInstance	file:
fim_empty_string	fim_string.h	40;"	d
fim_err_t	fim_types.h	/^	typedef int fim_err_t;		\/* a type for errors *\/$/;"	t
fim_error_exit	FbiStuffJpeg.cpp	/^static void fim_error_exit (j_common_ptr cinfo)$/;"	f	namespace:fim
fim_execlp	FbiStuff.cpp	/^FILE* FbiStuff::fim_execlp(const fim_char_t *cmd, ...)$/;"	f	class:fim::FbiStuff
fim_extra_flags	FbiStuffLoader.h	/^    unsigned int      fim_extra_flags;\/* FIXME : unclean: regard this as a hack (flag set on a rotated image) *\/$/;"	m	struct:fim::ida_image_info
fim_fclose	common.cpp	/^int fim_fclose(FILE*fp)$/;"	f
fim_fgetc	common.cpp	/^int fim_fgetc(FILE *stream)$/;"	f
fim_filereading_debug	FbiStuff.cpp	/^	int FbiStuff::fim_filereading_debug(void)$/;"	f	class:fim::FbiStuff
fim_flags_t	fim_types.h	/^	typedef int fim_flags_t;	\/* a type for display flags *\/$/;"	t
fim_float_t	fim_types.h	/^	typedef float fim_float_t;	\/* a type for floats *\/$/;"	t
fim_fms_t	fim_types.h	/^	typedef double fim_fms_t;		\/* a type for time, in milliseconds, floating point *\/$/;"	t
fim_fn_t	Image.h	/^typedef std::string fim_fn_t;$/;"	t
fim_fopen	common.cpp	/^FILE *fim_fopen(const char *path, const char *mode)$/;"	f
fim_fread	common.cpp	/^size_t fim_fread(void *ptr, size_t size, size_t nmemb, FILE *stream)$/;"	f
fim_fread_tmpfile	common.cpp	/^FILE * fim_fread_tmpfile(FILE * fp)$/;"	f
fim_free	fim_string.h	37;"	d
fim_free	fim_wrappers.h	30;"	d
fim_free_fs_font	FontServer.cpp	/^void fim_free_fs_font(struct fs_font *f_)$/;"	f	namespace:fim
fim_fseek	common.cpp	/^int fim_fseek(FILE *stream, long offset, int whence)$/;"	f
fim_get_variables_reference	Var.cpp	/^	fim::string fim_get_variables_reference(FimDocRefMode refmode)$/;"	f	namespace:fim
fim_getenv	common.cpp	/^const fim_char_t * fim_getenv(const fim_char_t * name)$/;"	f
fim_getline	common.cpp	/^ssize_t fim_getline(fim_char_t **lineptr, size_t *n, FILE *stream)$/;"	f
fim_help_opt	fim.cpp	/^fim::string fim_help_opt(const char*qs)$/;"	f
fim_image_source_t	fim.h	/^enum fim_image_source_t { FIM_E_FILE=-11, FIM_E_STDIN=-22};	\/* these *\/$/;"	g	namespace:fim
fim_int	fim_types.h	/^	typedef int fim_int;		\/* a type for fim's internal integer type, always signed *\/$/;"	t
fim_int	fim_types.h	/^	typedef int64_t fim_int;	\/* a type for fim's internal integer type, always signed *\/$/;"	t
fim_isquote	common.cpp	/^int fim_isquote(int c){return c=='\\'' || c=='\\"';}$/;"	f
fim_isspace	common.cpp	/^int fim_isspace(int c){return isspace(c);}$/;"	f
fim_jerr	FbiStuffJpeg.cpp	/^   int fim_jerr=0;$/;"	m	namespace:fim	file:
fim_key_t	fim_types.h	/^	typedef int fim_key_t;		\/* a type for keycodes *\/$/;"	t
fim_libdjvu_char	FbiStuffDjvu.cpp	/^typedef char fim_libdjvu_char;$/;"	t	namespace:fim	file:
fim_load_register	FbiStuffLoader.cpp	/^void fim_load_register(struct ida_loader *loader)$/;"	f	namespace:fim
fim_loaders_to_stderr	FbiStuffLoader.cpp	/^	void fim_loaders_to_stderr(void)$/;"	f	namespace:fim
fim_malloc	fim_wrappers.h	29;"	d
fim_memset	fim_wrappers.h	31;"	d
fim_mipmap_t	fim.h	/^	fim_mipmap_t(const fim_mipmap_t&mm){reset();}$/;"	f	class:fim_mipmap_t
fim_mipmap_t	fim.h	/^	fim_mipmap_t(void){reset();}$/;"	f	class:fim_mipmap_t
fim_mipmap_t	fim.h	/^class fim_mipmap_t$/;"	c
fim_mipmaps_compute	FbiStuff.cpp	/^fim_err_t FbiStuff::fim_mipmaps_compute(const struct ida_image *src, fim_mipmap_t * mmp)$/;"	f	class:fim::FbiStuff
fim_negate_rgb	Image.cpp	/^	static void fim_negate_rgb(fim_byte_t * data, int howmany)$/;"	f	namespace:fim
fim_off_t	fim_types.h	/^	typedef int fim_off_t;		\/* a type for pixel offsets (positive)  *\/$/;"	t
fim_opencv_detect_and_draw	fim_plugin.cpp	/^static void fim_opencv_detect_and_draw( IplImage* img, struct ida_image *iimg )$/;"	f	file:
fim_opencv_plugin_example	fim_plugin.cpp	/^static fim_err_t fim_opencv_plugin_example(struct ida_image *img, const fim_char_t *filename)$/;"	f	file:
fim_options	fim.cpp	/^struct fim_options_t fim_options[] = {$/;"	v	typeref:struct:fim_options_t
fim_options_count	fim.cpp	/^const int fim_options_count=sizeof(fim_options)\/sizeof(fim_options_t);$/;"	v
fim_options_t	fim.cpp	/^struct fim_options_t{$/;"	s	file:
fim_page_t	fim_types.h	/^	typedef fim_int   fim_page_t;	\/* a type for multipage document pages *\/$/;"	t
fim_pan_t	fim_types.h	/^	typedef int fim_pan_t;		\/* a type for pixel offsets (neg\/pos)  *\/$/;"	t
fim_perr_t	fim_types.h	/^	typedef int fim_perr_t;		\/* a type for program errors *\/$/;"	t
fim_perror	common.cpp	/^void fim_perror(const fim_char_t *s)$/;"	f
fim_pgor_t	fim_types.h	/^	typedef int   fim_pgor_t;	\/* a type for page orientation *\/$/;"	t
fim_pm_alloc	common.cpp	/^fim_byte_t * fim_pm_alloc(unsigned int width, unsigned int height, bool want_calloc)$/;"	f
fim_png_fp	FbiStuffPng.cpp	/^static FILE*fim_png_fp;$/;"	m	namespace:fim	file:
fim_png_rd_cmts	FbiStuffPng.cpp	/^void fim_png_rd_cmts(void *data, png_infop info)$/;"	f	namespace:fim
fim_png_rw_ptr	FbiStuffPng.cpp	/^void PNGAPI fim_png_rw_ptr(png_structp s, png_bytep p, png_size_t l)$/;"	f	namespace:fim
fim_png_state	FbiStuffPng.cpp	/^struct fim_png_state {$/;"	s	namespace:fim	file:
fim_post_read_plugins_exec	fim_plugin.cpp	/^fim_err_t fim_post_read_plugins_exec(struct ida_image *img, const fim_char_t * filename)$/;"	f
fim_post_rl_getc	readline.cpp	/^static int fim_post_rl_getc(int c)$/;"	f	namespace:rl
fim_rand	common.cpp	/^fim_int fim_rand(void)$/;"	f
fim_readline	readline.cpp	/^fim_char_t * fim_readline(const fim_char_t *prompt)$/;"	f	namespace:fim
fim_realloc	fim_string.h	39;"	d
fim_redraw_t	fim_types.h	/^	enum fim_redraw_t { FIM_REDRAW_UNNECESSARY=0, FIM_REDRAW_NECESSARY=1};$/;"	g
fim_rewind	common.cpp	/^int fim_rewind(FILE *stream)$/;"	f
fim_rl_getc	readline.cpp	/^int fim_rl_getc(FILE * fd)$/;"	f	namespace:rl
fim_rl_pc	readline.cpp	/^static int fim_rl_pc=FIM_SYM_CHAR_NUL;$/;"	v	file:
fim_rl_sdl_aa_getc	readline.cpp	/^int fim_rl_sdl_aa_getc(FILE * fd)$/;"	f	namespace:rl
fim_rl_sdl_aa_getc_hook	readline.cpp	/^static int fim_rl_sdl_aa_getc_hook(void)$/;"	f	namespace:rl
fim_scale_t	fim_types.h	/^	typedef float fim_scale_t;	\/* a type for image scaling *\/$/;"	t
fim_sdl_int	SDLDevice.cpp	/^typedef int fim_sdl_int;$/;"	t	file:
fim_search_rl_startup_hook	readline.cpp	/^int fim_search_rl_startup_hook(void)$/;"	f	namespace:rl
fim_shell_arg_escape	common.cpp	/^	fim::string fim_shell_arg_escape(const fim::string & arg)$/;"	f
fim_size_t	fim_types.h	/^	typedef size_t fim_size_t;	\/* always size_t *\/$/;"	t
fim_snprintf_XB	common.cpp	/^int fim_snprintf_XB(char *str, size_t size, size_t q)$/;"	f
fim_status_t	fim_types.h	/^	typedef int fim_status_t;	\/* a type for fim's status *\/$/;"	t
fim_stdin_	CommandConsole.h	/^	fim_str_t fim_stdin_;	\/\/ the standard input file descriptor$/;"	m	class:fim::CommandConsole
fim_str_t	fim_types.h	/^	typedef int fim_str_t;		\/* a type for stdin\/stdout streams *\/$/;"	t
fim_stralloc	fim_wrappers.h	28;"	d
fim_stream	fim_stream.cpp	/^		fim_stream::fim_stream(fim_str_t fd):fd_(fd)$/;"	f	class:fim::fim_stream
fim_stream	fim_stream.h	/^	class fim_stream$/;"	c	namespace:fim
fim_strlen	common.cpp	/^size_t fim_strlen(const fim_char_t *str)$/;"	f
fim_sys_int	fim_types.h	/^	typedef int fim_sys_int;	\/* always int *\/$/;"	t
fim_time	Cache.cpp	/^	static fim_time_t fim_time(void) \/* stand-alone function *\/$/;"	f	namespace:fim
fim_time_t	Cache.h	/^typedef time_t fim_time_t;$/;"	t
fim_time_t	Cache.h	/^typedef uint64_t fim_time_t;$/;"	t
fim_tms_t	fim_types.h	/^	typedef int fim_tms_t;		\/* a type for time, in milliseconds *\/$/;"	t
fim_ts_t	fim_types.h	/^	typedef int fim_ts_t;		\/* a type for time, in seconds *\/$/;"	t
fim_tus_t	fim_types.h	/^	typedef unsigned long fim_tus_t;	\/* a type for time, in microseconds *\/$/;"	t
fim_var_help_db	Var.cpp	/^	static fim_var_help_t fim_var_help_db;	\/* this is the global help db for fim variables *\/$/;"	m	namespace:fim	file:
fim_var_help_db_init	Var.cpp	/^	void fim_var_help_db_init(void)$/;"	f	namespace:fim
fim_var_help_db_query	Var.cpp	/^	fim::string fim_var_help_db_query(const fim::string &id)$/;"	f	namespace:fim
fim_var_help_t	Var.cpp	/^	typedef std::map<fim::string, fim::string> fim_var_help_t;\/\/variable id -> variable help$/;"	t	namespace:fim	file:
fim_var_t	fim_types.h	/^	typedef int fim_var_t;		\/* a type for fim's variable types *\/$/;"	t
fim_want_rl_cl_with_esc	readline.cpp	/^	static int fim_want_rl_cl_with_esc;$/;"	m	namespace:rl	file:
fim_write_register	FbiStuffLoader.cpp	/^void fim_write_register(struct ida_writer *writer)$/;"	f	namespace:fim
fim_xflags_t	fim.h	/^enum fim_xflags_t { FIM_X_NULL=0,FIM_X_HISTORY=1,FIM_X_QUIET=2,FIM_X_NOAUTOCMD=4};	\/* TODO: may introduce 'sandbox' like flags, here (for instance, for no-system\/pipe-interacting executions) *\/$/;"	g	namespace:fim
fimg_	Image.h	/^	struct ida_image *fimg_    ;     \/* master image *\/$/;"	m	class:fim::Image	typeref:struct:fim::Image::ida_image
finalize	AADevice.cpp	/^	void AADevice::finalize(void)$/;"	f	class:AADevice
finalize	CACADevice.cpp	/^	void CACADevice::finalize(void)$/;"	f	class:CACADevice
finalize	DummyDisplayDevice.h	/^	virtual void  finalize(void){}$/;"	f	class:DummyDisplayDevice
finalize	FramebufferDevice.cpp	/^void FramebufferDevice::finalize (void)$/;"	f	class:FramebufferDevice
finalize	Imlib2Device.cpp	/^	void Imlib2Device::finalize(void)$/;"	f	class:Imlib2Device
finalize	SDLDevice.cpp	/^	void SDLDevice::finalize(void)$/;"	f	class:SDLDevice
finalized_	DisplayDevice.h	/^	fim_bool_t finalized_;$/;"	m	class:DisplayDevice
find	fim_string.cpp	/^	int  string::find(const fim_char_t*ss)const$/;"	f	class:fim::string
find	fim_string.cpp	/^	int  string::find(const string&str)const$/;"	f	class:fim::string
findCommand	CommandConsole.cpp	/^	Command* CommandConsole::findCommand(fim::string cmd)const$/;"	f	class:fim::CommandConsole
findCommandIdx	CommandConsole.cpp	/^	int CommandConsole::findCommandIdx(fim::string cmd)const$/;"	f	class:fim::CommandConsole
find_file_index	Browser.cpp	/^	fim_int Browser::find_file_index(const fim::string nf)const$/;"	f	class:fim::Browser
find_key_for_bound_cmd	CommandConsole.cpp	/^	fim::string CommandConsole::find_key_for_bound_cmd(fim::string binding)$/;"	f	class:fim::CommandConsole
find_keycode_for_bound_cmd	CommandConsole.cpp	/^	fim_key_t CommandConsole::find_keycode_for_bound_cmd(fim::string binding)$/;"	f	class:fim::CommandConsole
find_matching_list	Namespace.cpp	/^		fim_err_t Namespace::find_matching_list(fim::string cmd, args_t & completions, bool prepend_ns)const$/;"	f	class:fim::Namespace
find_regexp_offset	FbiStuff.cpp	/^static long find_regexp_offset(FILE *fp, const fim_char_t *byte_stream, size_t base_offset)$/;"	f	namespace:fim
first_	FimWindow.h	/^	FimWindow *first_,*second_;$/;"	m	class:fim::FimWindow
first_row_dst	FbiStuffDjvu.cpp	/^    fim_byte_t * first_row_dst;$/;"	m	struct:fim::djvu_state_t	file:
first_row_dst	FbiStuffMatrixMarket.cpp	/^	fim_byte_t * first_row_dst;$/;"	m	struct:fim::mm_state_t	file:
first_row_dst	FbiStuffPdf.cpp	/^	fim_byte_t * first_row_dst;$/;"	m	struct:fim::pdf_state_t	file:
first_row_dst	FbiStuffPs.cpp	/^	fim_byte_t * first_row_dst;$/;"	m	struct:fim::ps_state_t	file:
firstforzero	Browser.cpp	25;"	d	file:
firstorone	Browser.cpp	24;"	d	file:
firstorval	Browser.cpp	22;"	d	file:
firstorzero	Browser.cpp	23;"	d	file:
fis_	Image.h	/^	fim_image_source_t fis_;$/;"	m	class:fim::Image
fk	Image.h	/^	key_type fk(const mapped_type & sk) $/;"	f	class:ImgDscs
flag	fim.cpp	/^  int *flag;$/;"	m	struct:fim_options_t	file:
flen	FbiStuffBit1.cpp	/^    uint32 flen;$/;"	m	struct:fim::bit1_state	file:
flen	FbiStuffBit24.cpp	/^    uint32 flen;$/;"	m	struct:fim::bit24_state	file:
flen	FbiStuffJasPer.cpp	/^    	size_t flen; \/* file length *\/$/;"	m	struct:fim::jp2_state	file:
flen	FbiStuffPcx.cpp	/^    	size_t flen; \/* file length *\/$/;"	m	struct:fim::pcx_state	file:
flen	FbiStuffText.cpp	/^    uint32 flen;$/;"	m	struct:fim::text_state	file:
flen	FbiStuffXyz.cpp	/^    	size_t flen; \/* file length *\/$/;"	m	struct:fim::xyz_state	file:
flist_	Browser.h	/^	args_t flist_; \/* the names of files in the slideshow.  *\/$/;"	m	class:fim::Browser
floatCon	lex.h	/^typedef enum { intCon, floatCon, typeOpr, stringCon,cmdId\/*cmdId is dead *\/,vId } nodeEnum;$/;"	e	enum:__anon11
flush	AADevice.cpp	/^	void AADevice::flush(void)$/;"	f	class:AADevice
flush	DisplayDevice.h	/^	virtual void flush(void){};$/;"	f	class:DisplayDevice
flush	Imlib2Device.cpp	/^	void Imlib2Device::flush(void)$/;"	f	class:Imlib2Device
flush	SDLDevice.cpp	/^	void SDLDevice::flush(void)$/;"	f	class:SDLDevice
fname_	Image.h	/^	string  fname_;		\/* viewport variable, too *\/$/;"	m	class:fim::Image
fo	Image.h	/^	ImgDscs::const_iterator fo(const key_type & sk)const$/;"	f	class:ImgDscs
fo	Image.h	/^	ImgDscs::const_iterator fo(const key_type & sk, const ImgDscs::const_iterator & li)const$/;"	f	class:ImgDscs
fo	Image.h	/^	ImgDscs::iterator fo(const key_type & sk, const ImgDscs::iterator & li)$/;"	f	class:ImgDscs
focus_	FimWindow.h	/^	bool focus_;	\/\/ if 0 left\/up ; otherwise right\/lower$/;"	m	class:fim::FimWindow
focused	FimWindow.cpp	/^	FimWindow & FimWindow::focused(void)const$/;"	f	class:fim::FimWindow
font	FontServer.h	/^    Font               font;$/;"	m	struct:fim::fs_font
fontHeader	FontServer.h	/^    FSXFontInfoHeader  fontHeader;$/;"	m	struct:fim::fs_font
fontname_	DisplayDevice.h	/^	const fim_char_t* fontname_;$/;"	m	class:DisplayDevice
fontserver_	CommandConsole.h	/^	FontServer fontserver_;$/;"	m	class:fim::CommandConsole
foo	FramebufferDevice.cpp	/^static void foo(){} \/* let's make our compiler happy *\/$/;"	f	file:
foobar	FbiStuffBmp.cpp	/^    uint32 foobar;$/;"	m	struct:fim::bmp_hdr	file:
fp	FbiStuffBit1.cpp	/^    FILE *fp;$/;"	m	struct:fim::bit1_state	file:
fp	FbiStuffBit24.cpp	/^    FILE *fp;$/;"	m	struct:fim::bit24_state	file:
fp	FbiStuffBmp.cpp	/^    FILE *fp;$/;"	m	struct:fim::bmp_state	file:
fp	FbiStuffJasPer.cpp	/^	FILE *fp;$/;"	m	struct:fim::jp2_state	file:
fp	FbiStuffPcx.cpp	/^	FILE *fp;$/;"	m	struct:fim::pcx_state	file:
fp	FbiStuffText.cpp	/^    FILE *fp;$/;"	m	struct:fim::text_state	file:
fp	FbiStuffXyz.cpp	/^	FILE *fp;$/;"	m	struct:fim::xyz_state	file:
fpush	CommandConsole-cmd.cpp	/^	fim_err_t CommandConsole::fpush(FILE *tfd)$/;"	f	class:fim::CommandConsole
framebuffer_init	FramebufferDevice.cpp	/^	fim_err_t FramebufferDevice::framebuffer_init(void)$/;"	f	class:fim::FramebufferDevice
free	Image.cpp	/^        void Image::free(void)$/;"	f	class:fim::Image
free	Viewport.cpp	/^	void Viewport::free(void)$/;"	f	class:fim::Viewport
freeCachedImage	Cache.cpp	/^	bool Cache::freeCachedImage(Image *image, const ViewportState *vsp)$/;"	f	class:fim::Cache
free_all	Cache.cpp	/^	bool Cache::free_all(void)$/;"	f	class:fim::Cache
free_current_image	Browser.cpp	/^	void Browser::free_current_image(void)$/;"	f	class:fim::Browser
free_image	FbiStuff.cpp	/^void FbiStuff::free_image(struct ida_image *img)$/;"	f	class:fim::FbiStuff
free_some_lru	Cache.cpp	/^	int Cache::free_some_lru(void)$/;"	f	class:fim::Cache
fs_	Image.h	/^	size_t fs_;		\/* file size *\/$/;"	m	class:fim::Image
fs_black_	FramebufferDevice.h	/^	unsigned int       fs_bpp_, fs_black_, fs_white_;\/\/STILL UNINITIALIZED$/;"	m	class:fim::FramebufferDevice
fs_bpp_	FramebufferDevice.h	/^	unsigned int       fs_bpp_, fs_black_, fs_white_;\/\/STILL UNINITIALIZED$/;"	m	class:fim::FramebufferDevice
fs_consolefont	FontServer.cpp	/^struct fs_font* FontServer::fs_consolefont(const fim_char_t **filename)$/;"	f	class:fim::FontServer
fs_font	FontServer.h	/^struct fs_font {$/;"	s	namespace:fim
fs_init_fb	FramebufferDevice.cpp	/^int FramebufferDevice::fs_init_fb(int white8)$/;"	f	class:fim::FramebufferDevice
fs_masktab	FontServer.h	/^static const unsigned fs_masktab[] = {$/;"	m	namespace:fim
fs_ml_puts	Viewport.cpp	/^	void Viewport::fs_ml_puts(const char *str, fim_int doclear)$/;"	f	class:fim::Viewport
fs_puts	AADevice.cpp	/^	fim_err_t AADevice::fs_puts(struct fs_font *f, fim_coo_t x, fim_coo_t y, const fim_char_t *str)$/;"	f	class:AADevice
fs_puts	CACADevice.cpp	/^	fim_err_t CACADevice::fs_puts(struct fs_font *f, fim_coo_t x, fim_coo_t y, const fim_char_t *str){return FIM_ERR_NO_ERROR;}$/;"	f	class:CACADevice
fs_puts	DummyDisplayDevice.h	/^	fim_err_t fs_puts(struct fs_font *f, fim_coo_t x, fim_coo_t y, const fim_char_t *str){return FIM_ERR_NO_ERROR;}$/;"	f	class:DummyDisplayDevice
fs_puts	FramebufferDevice.cpp	/^fim_err_t FramebufferDevice::fs_puts(struct fs_font *f_, fim_coo_t x, fim_coo_t y, const fim_char_t *str)$/;"	f	class:fim::FramebufferDevice
fs_puts	Imlib2Device.cpp	/^fim_err_t Imlib2Device::fs_puts(struct fs_font *f_, fim_coo_t x, fim_coo_t y, const fim_char_t *str)$/;"	f	class:Imlib2Device
fs_puts	SDLDevice.cpp	/^fim_err_t SDLDevice::fs_puts(struct fs_font *f_, fim_coo_t x, fim_coo_t y, const fim_char_t *str)$/;"	f	class:SDLDevice
fs_render_fb	FbiStuffText.cpp	/^static void fs_render_fb(fim_byte_t *ptr, int pitch, FSXCharInfo *charInfo, int fs_bpp_, fim_byte_t *data)$/;"	f	namespace:fim
fs_render_fb	FramebufferDevice.cpp	/^void FramebufferDevice::fs_render_fb(fim_byte_t *ptr, int pitch, FSXCharInfo *charInfo, fim_byte_t *data)$/;"	f	class:fim::FramebufferDevice
fs_render_fb	Imlib2Device.cpp	/^void Imlib2Device::fs_render_fb(fim_coo_t x_, fim_coo_t y, FSXCharInfo *charInfo, fim_byte_t *data)$/;"	f	class:Imlib2Device
fs_render_fb	SDLDevice.cpp	/^void SDLDevice::fs_render_fb(fim_coo_t x_, fim_coo_t y, FSXCharInfo *charInfo, fim_byte_t *data)$/;"	f	class:SDLDevice
fs_setpixel	FramebufferDevice.h	/^	void (*fs_setpixel)(void *ptr, unsigned int color);$/;"	m	class:fim::FramebufferDevice
fs_white_	FramebufferDevice.h	/^	unsigned int       fs_bpp_, fs_black_, fs_white_;\/\/STILL UNINITIALIZED$/;"	m	class:fim::FramebufferDevice
fw	FbiStuffText.cpp	/^    fim_int fw,fh;$/;"	m	struct:fim::text_state	file:
g	CACADevice.h	/^	unsigned int r[256], g[256], b[256], a[256];$/;"	m	class:CACADevice
gBgColor	FbiStuffPdf.cpp	/^static SplashColorPtr  gBgColor = SPLASH_COL_WHITE_PTR;$/;"	m	namespace:fim	file:
gSplashColorMode	FbiStuffPdf.cpp	/^static SplashColorMode gSplashColorMode = splashModeRGB8;$/;"	m	namespace:fim	file:
getAliasesList	CommandConsole.cpp	/^	fim::string CommandConsole::getAliasesList(void)const$/;"	f	class:fim::CommandConsole
getBindingsList	CommandConsole.cpp	/^	fim::string CommandConsole::getBindingsList(void)const$/;"	f	class:fim::CommandConsole
getBoundAction	CommandConsole.cpp	/^	fim::string CommandConsole::getBoundAction(const fim_key_t c)const$/;"	f	class:fim::CommandConsole
getCachedImage	Cache.cpp	/^	Image * Cache::getCachedImage(cache_key_t key)$/;"	f	class:fim::Cache
getClone	Image.cpp	/^	Image * Image::getClone(void)$/;"	f	class:fim::Image
getFloat	Var.h	/^	float getFloat(void)const{$/;"	f	class:fim::Var
getFloatVariable	CommandConsole-var.cpp	/^	fim_float_t CommandConsole::getFloatVariable(const fim::string &varname)const$/;"	f	class:fim::CommandConsole
getFloatVariable	Namespace.cpp	/^		fim_float_t Namespace::getFloatVariable(const fim::string &varname)const$/;"	f	class:fim::Namespace
getGlobalFloatVariable	Namespace.cpp	/^		fim_float_t Namespace::getGlobalFloatVariable(const fim::string &varname)const$/;"	f	class:fim::Namespace
getGlobalIntVariable	Namespace.cpp	/^		fim_int Namespace::getGlobalIntVariable(const fim::string &varname)const$/;"	f	class:fim::Namespace
getGlobalStringVariable	Namespace.cpp	/^		fim::string Namespace::getGlobalStringVariable(const fim::string &varname)const$/;"	f	class:fim::Namespace
getHelp	Command.h	/^	fim::string getHelp(void)const{return help_;}$/;"	f	class:fim::Command
getImage	FimWindow.cpp	/^	const Image *FimWindow::getImage(void)const$/;"	f	class:fim::FimWindow
getImage	Viewport.cpp	/^        Image* Viewport::getImage(void)const$/;"	f	class:fim::Viewport
getInfo	Image.cpp	/^fim::string Image::getInfo(void)$/;"	f	class:fim::Image
getInfoCustom	Image.cpp	/^fim::string Image::getInfoCustom(const fim_char_t * ifsp)const$/;"	f	class:fim::Image
getInt	Var.h	/^	fim_int getInt(void)const{return(type=='i')?i:$/;"	f	class:fim::Var
getIntVariable	CommandConsole-var.cpp	/^	fim_int CommandConsole::getIntVariable(const fim::string &varname)const$/;"	f	class:fim::CommandConsole
getIntVariable	Namespace.cpp	/^		fim_int Namespace::getIntVariable(const fim::string &varname)const$/;"	f	class:fim::Namespace
getKey	Image.cpp	/^	cache_key_t Image::getKey(void)const$/;"	f	class:fim::Image
getName	Image.cpp	/^	const fim_char_t* Image::getName(void)const{return fname_.c_str();}$/;"	f	class:fim::Image
getOrientation	Image.cpp	/^	fim_pgor_t Image::getOrientation(void)const$/;"	f	class:fim::Image
getReport	Cache.cpp	/^	fim::string Cache::getReport(int type)const$/;"	f	class:fim::Cache
getString	Var.h	/^	fim::string getString(void)const$/;"	f	class:fim::Var
getStringVariable	CommandConsole-var.cpp	/^	fim::string CommandConsole::getStringVariable(const fim::string &varname)const$/;"	f	class:fim::CommandConsole
getStringVariable	Namespace.cpp	/^		fim::string Namespace::getStringVariable(const fim::string &varname)const$/;"	f	class:fim::Namespace
getType	Var.h	/^	int getType(void)const{return type;}$/;"	f	class:fim::Var
getVariable	CommandConsole-var.cpp	/^	Var CommandConsole::getVariable(const fim::string &varname)const$/;"	f	class:fim::CommandConsole
getVariable	Namespace.cpp	/^		Var Namespace::getVariable(const fim::string &varname)const$/;"	f	class:fim::Namespace
getVariableType	CommandConsole.cpp	/^	fim_var_t CommandConsole::getVariableType(const fim::string &varname)const$/;"	f	class:fim::CommandConsole
get_alias_info	CommandConsole.cpp	/^	fim::string CommandConsole::get_alias_info(const fim::string aname)const$/;"	f	class:fim::CommandConsole
get_aliases_list	CommandConsole.cpp	/^	fim::string CommandConsole::get_aliases_list(void)const$/;"	f	class:fim::CommandConsole
get_bpp	AADevice.h	/^	fim_bpp_t get_bpp(void)$/;"	f	class:AADevice
get_bpp	CACADevice.h	/^	fim_bpp_t get_bpp(void)$/;"	f	class:CACADevice
get_bpp	DummyDisplayDevice.h	/^	virtual fim_bpp_t get_bpp(void){return 0;}$/;"	f	class:DummyDisplayDevice
get_bpp	FramebufferDevice.h	/^	fim_bpp_t get_bpp(void){return fb_var_.bits_per_pixel; };$/;"	f	class:fim::FramebufferDevice
get_bpp	Imlib2Device.cpp	/^fim_bpp_t Imlib2Device::get_bpp(){return depth; }$/;"	f	class:Imlib2Device
get_bpp	SDLDevice.h	/^	fim_bpp_t get_bpp(void) { return bpp_; };$/;"	f	class:SDLDevice
get_bresults_string	CommandConsole-init.cpp	/^	string CommandConsole::get_bresults_string(fim_int qbi, fim_int qbtimes, fim_fms_t qbttime)const$/;"	f	class:fim::CommandConsole
get_bresults_string	DisplayDevice.cpp	/^string DisplayDevice::get_bresults_string(fim_int qbi, fim_int qbtimes, fim_fms_t qbttime)const$/;"	f	class:DisplayDevice
get_chars_per_column	AADevice.cpp	/^	int AADevice::get_chars_per_column(){return aa_scrheight(ascii_context_);}$/;"	f	class:AADevice
get_chars_per_column	CACADevice.cpp	/^	int CACADevice::get_chars_per_column(){return height();}$/;"	f	class:CACADevice
get_chars_per_column	DummyDisplayDevice.h	/^	virtual int get_chars_per_column(void){return 0;\/* *\/}$/;"	f	class:DummyDisplayDevice
get_chars_per_column	FramebufferDevice.h	/^	int get_chars_per_column(void)$/;"	f	class:fim::FramebufferDevice
get_chars_per_column	Imlib2Device.cpp	/^	int Imlib2Device::get_chars_per_column(void)$/;"	f	class:Imlib2Device
get_chars_per_column	SDLDevice.cpp	/^	int SDLDevice::get_chars_per_column(void)$/;"	f	class:SDLDevice
get_chars_per_line	AADevice.cpp	/^	int AADevice::get_chars_per_line(){return aa_scrwidth(ascii_context_);}$/;"	f	class:AADevice
get_chars_per_line	CACADevice.cpp	/^	int CACADevice::get_chars_per_line(){return txt_width();}$/;"	f	class:CACADevice
get_chars_per_line	DummyDisplayDevice.h	/^	virtual int get_chars_per_line(void){return 0;\/* this is a special value *\/}$/;"	f	class:DummyDisplayDevice
get_chars_per_line	FramebufferDevice.h	/^	int get_chars_per_line(void)$/;"	f	class:fim::FramebufferDevice
get_chars_per_line	Imlib2Device.cpp	/^	int Imlib2Device::get_chars_per_line(void)$/;"	f	class:Imlib2Device
get_chars_per_line	SDLDevice.cpp	/^	int SDLDevice::get_chars_per_line(void)$/;"	f	class:SDLDevice
get_commands_list	CommandConsole.cpp	/^	fim::string CommandConsole::get_commands_list(void)const$/;"	f	class:fim::CommandConsole
get_commands_reference	CommandConsole-help.cpp	/^	fim::string CommandConsole::get_commands_reference(FimDocRefMode refmode)const$/;"	f	class:fim::CommandConsole
get_default_font_list	FontServer.cpp	/^fim::string get_default_font_list(void)$/;"	f	namespace:fim
get_input	AADevice.cpp	/^	fim_sys_int AADevice::get_input(fim_key_t * c, bool want_poll)$/;"	f	class:AADevice
get_input	CACADevice.cpp	/^	fim_sys_int CACADevice::get_input(fim_key_t * c, bool want_poll)$/;"	f	class:CACADevice
get_input	DisplayDevice.cpp	/^	fim_sys_int DisplayDevice::get_input(fim_key_t * c, bool want_poll)$/;"	f	class:DisplayDevice
get_input	Imlib2Device.cpp	/^	fim_sys_int Imlib2Device::get_input(fim_key_t * c, bool want_poll)$/;"	f	class:Imlib2Device
get_input	SDLDevice.cpp	/^	fim_sys_int SDLDevice::get_input(fim_key_t * c, bool want_poll)$/;"	f	class:SDLDevice
get_input_i2l	Imlib2Device.cpp	/^fim_sys_int Imlib2Device::get_input_i2l(fim_key_t * c)$/;"	f	class:Imlib2Device
get_input_inner	SDLDevice.cpp	/^	static fim_sys_int get_input_inner(fim_key_t * c, SDL_Event*eventp, fim_sys_int *keypressp, bool want_poll)$/;"	f	file:
get_lru	Cache.cpp	/^	Image* Cache::get_lru( bool unused )const$/;"	f	class:fim::Cache
get_n_qbenchmarks	CommandConsole-init.cpp	/^	fim_int CommandConsole::get_n_qbenchmarks(void)const$/;"	f	class:fim::CommandConsole
get_n_qbenchmarks	DisplayDevice.cpp	/^fim_int DisplayDevice::get_n_qbenchmarks(void)const$/;"	f	class:DisplayDevice
get_next_filename	Browser.cpp	/^	fim::string Browser::get_next_filename(int n)const$/;"	f	class:fim::Browser
get_reference_manual	CommandConsole-help.cpp	/^	fim::string CommandConsole::get_reference_manual(const args_t& args)$/;"	f	class:fim::CommandConsole
get_variables_list	CommandConsole.cpp	/^	fim::string CommandConsole::get_variables_list(void)const$/;"	f	class:fim::CommandConsole
get_variables_list	Namespace.cpp	/^		fim::string Namespace::get_variables_list(bool with_values)const$/;"	f	class:fim::Namespace
get_variables_reference	CommandConsole-help.cpp	/^	fim::string CommandConsole::get_variables_reference(FimDocRefMode refmode)const$/;"	f	class:fim::CommandConsole
getmilliseconds	common.cpp	/^double getmilliseconds(void)$/;"	f
gh	CommandConsole.cpp	/^	static int gh(Gpm_Event *event, void *clientdata)$/;"	f	namespace:fim
gif	FbiStuffGif.cpp	/^    GifFileType  *gif;$/;"	m	struct:fim::gif_state	file:
gif_done	FbiStuffGif.cpp	/^gif_done(void *data)$/;"	f	namespace:fim
gif_fileread	FbiStuffGif.cpp	/^gif_fileread(struct gif_state *h)$/;"	f	namespace:fim
gif_init	FbiStuffGif.cpp	/^gif_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
gif_loader	FbiStuffGif.cpp	/^static struct ida_loader gif_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
gif_read	FbiStuffGif.cpp	/^gif_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
gif_state	FbiStuffGif.cpp	/^struct gif_state {$/;"	s	namespace:fim	file:
gindex	FontServer.h	/^    fim_byte_t      **gindex;$/;"	m	struct:fim::fs_font
glyphs	FontServer.h	/^    fim_byte_t      *glyphs;$/;"	m	struct:fim::fs_font
goto_image	Browser.cpp	/^	fim::string Browser::goto_image(int n, bool isfg)$/;"	f	class:fim::Browser
goto_image_internal	Browser.cpp	/^	fim::string Browser::goto_image_internal(const fim_char_t *s,fim_xflags_t xflags)$/;"	f	class:fim::Browser
goto_page	Image.cpp	/^	bool Image::goto_page(fim_page_t j)$/;"	f	class:fim::Image
green	FbiStuffBmp.cpp	/^    fim_byte_t green;$/;"	m	struct:fim::bmp_cmap	file:
green	FbiStuffPcx.cpp	/^	char green;$/;"	m	struct:fim::__anon2	file:
green	FbiStuffPcx.cpp	/^	unsigned char green;$/;"	m	struct:fim::__anon1	file:
green_	FramebufferDevice.h	/^	unsigned short red_[256],  green_[256],  blue_[256];$/;"	m	class:fim::FramebufferDevice
green_mult_	FramebufferDevice.h	/^	long     red_mult_, green_mult_;$/;"	m	class:fim::FramebufferDevice
grow	DebugConsole.cpp	/^		fim_err_t MiniConsole::grow(int glines, int gbuffer)$/;"	f	class:fim::MiniConsole
grow	DebugConsole.cpp	/^		fim_err_t MiniConsole::grow(void)$/;"	f	class:fim::MiniConsole
grow_buffer	DebugConsole.cpp	/^		fim_err_t MiniConsole::grow_buffer(int gbuffer)$/;"	f	class:fim::MiniConsole
grow_lines	DebugConsole.cpp	/^		fim_err_t MiniConsole::grow_lines(int glines)$/;"	f	class:fim::MiniConsole
h	FbiStuffBit1.cpp	/^    uint32 h;$/;"	m	struct:fim::bit1_state	file:
h	FbiStuffBit24.cpp	/^    uint32 h;$/;"	m	struct:fim::bit24_state	file:
h	FbiStuffGif.cpp	/^    int w,h;$/;"	m	struct:fim::gif_state	file:
h	FbiStuffJasPer.cpp	/^	int h; \/* image height: 1... *\/$/;"	m	struct:fim::jp2_state	file:
h	FbiStuffPcx.cpp	/^	int h; \/* image height: 1... *\/$/;"	m	struct:fim::pcx_state	file:
h	FbiStuffPng.cpp	/^    png_uint_32  w,h;$/;"	m	struct:fim::fim_png_state	file:
h	FbiStuffPs.cpp	/^	int w,h;$/;"	m	struct:fim::ps_state_t	file:
h	FbiStuffText.cpp	/^    uint32 h;$/;"	m	struct:fim::text_state	file:
h	FbiStuffXyz.cpp	/^	int h; \/* image height: 1... *\/$/;"	m	struct:fim::xyz_state	file:
h	FimWindow.h	/^	fim_coo_t x,y,w,h;	\/\/ units, not pixels$/;"	m	class:fim::Rect
h	Imlib2Device.h	/^        int w, h, text_w, text_h; \/\/ FIXME: temporary vals$/;"	m	class:Imlib2Device
handle_console_switch	AADevice.h	/^	fim_bool_t handle_console_switch(void)$/;"	f	class:AADevice
handle_console_switch	CACADevice.cpp	/^	fim_bool_t CACADevice::handle_console_switch(){return true;}$/;"	f	class:CACADevice
handle_console_switch	DummyDisplayDevice.h	/^	virtual fim_bool_t handle_console_switch(void){return false;}$/;"	f	class:DummyDisplayDevice
handle_console_switch	FramebufferDevice.h	/^	fim_bool_t handle_console_switch(void)$/;"	f	class:fim::FramebufferDevice
handle_console_switch	Imlib2Device.h	/^	fim_bool_t handle_console_switch(void){return false;}$/;"	f	class:Imlib2Device
handle_console_switch	SDLDevice.h	/^	fim_bool_t handle_console_switch(void) { return false; }$/;"	f	class:SDLDevice
handle_ddjvu_messages	FbiStuffDjvu.cpp	/^   void handle_ddjvu_messages(ddjvu_context_t *ctx, int wait)$/;"	f	namespace:fim
has_arg	fim.cpp	/^  int has_arg;$/;"	m	struct:fim_options_t	file:
has_mm	Image.cpp	/^	bool Image::has_mm(void)const { return mm_.ok(); }$/;"	f	class:fim::Image
have_nextpage	Image.cpp	/^	bool Image::have_nextpage(int j)const$/;"	f	class:fim::Image
have_prevpage	Image.cpp	/^	bool Image::have_prevpage(int j)const$/;"	f	class:fim::Image
hdr	FbiStuffBmp.cpp	/^    struct bmp_hdr  hdr;$/;"	m	struct:fim::bmp_state	typeref:struct:fim::bmp_state::bmp_hdr	file:
height	AADevice.cpp	/^	fim_coo_t AADevice::height(){ return aa_imgheight(ascii_context_) ;}$/;"	f	class:AADevice
height	CACADevice.cpp	/^	int CACADevice::height(){ return caca_get_width() ;}$/;"	f	class:CACADevice
height	DummyDisplayDevice.h	/^	virtual fim_coo_t height(void){return 1;\/* 0 would be so cruel *\/}$/;"	f	class:DummyDisplayDevice
height	FbiStuff.cpp	/^    unsigned int width,height,srcrow;$/;"	m	struct:fim::op_resize_state	file:
height	FbiStuff.h	/^    int height;$/;"	m	struct:fim::op_resize_parm
height	FbiStuffBmp.cpp	/^    uint32 height;$/;"	m	struct:fim::bmp_hdr	file:
height	FbiStuffLoader.h	/^    unsigned int      height;$/;"	m	struct:fim::ida_image_info
height	FbiStuffMatrixMarket.cpp	/^	int height ;$/;"	m	struct:fim::mm_state_t	file:
height	FbiStuffPpm.cpp	/^    int           width,height;$/;"	m	struct:fim::ppm_state	file:
height	FbiStuffTiff.cpp	/^    uint32         width,height;$/;"	m	struct:fim::tiff_state	file:
height	FimWindow.cpp	/^	fim_coo_t FimWindow::height(void)const$/;"	f	class:fim::FimWindow
height	FontServer.h	/^    int                maxenc,width,height;$/;"	m	struct:fim::fs_font
height	FramebufferDevice.h	/^	int height(void)$/;"	f	class:fim::FramebufferDevice
height	Image.cpp	/^	int Image::height(void)const$/;"	f	class:fim::Image
height	Imlib2Device.cpp	/^	fim_coo_t Imlib2Device::height(void)$/;"	f	class:Imlib2Device
height	SDLDevice.cpp	/^	fim_coo_t SDLDevice::height(void)$/;"	f	class:SDLDevice
help_	Command.h	/^		    help_ ;$/;"	m	class:fim::Command
help_and_exit	fim.cpp	/^fim_perr_t help_and_exit(const fim_char_t *argv0, fim_perr_t code=FIM_PERR_NO_ERROR, const fim_char_t*helparg=NULL)$/;"	f	class:FimInstance	file:
henlarge	FimWindow.cpp	/^	fim_err_t FimWindow::henlarge(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT)$/;"	f	class:fim::FimWindow
hlgrow	FimWindow.cpp	/^	fim_err_t FimWindow::hlgrow(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT)   {  return corners_.hlgrow(  units); } $/;"	f	class:fim::FimWindow
hlgrow	FimWindow.cpp	/^	fim_err_t Rect::hlgrow(fim_coo_t units)   { x-=units; w+=units ; return FIM_ERR_NO_ERROR; } $/;"	f	class:fim::Rect
hlshrink	FimWindow.cpp	/^	fim_err_t FimWindow::hlshrink(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT) {  return corners_.hlshrink(units); }$/;"	f	class:fim::FimWindow
hlshrink	FimWindow.cpp	/^	fim_err_t Rect::hlshrink(fim_coo_t units) { x+=units; w-=units ; return FIM_ERR_NO_ERROR; }$/;"	f	class:fim::Rect
hnormalize	FimWindow.cpp	/^	fim_err_t FimWindow::hnormalize(fim_coo_t x, fim_coo_t w)$/;"	f	class:fim::FimWindow
hres	FbiStuffPcx.cpp	/^  UWORD          hres, vres;$/;"	m	struct:fim::__anon3	file:
hrgrow	FimWindow.cpp	/^	fim_err_t FimWindow::hrgrow(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT)   {  return corners_.hrgrow(  units); } $/;"	f	class:fim::FimWindow
hrgrow	FimWindow.cpp	/^	fim_err_t Rect::hrgrow(fim_coo_t units)   { w+=units; return FIM_ERR_NO_ERROR; } $/;"	f	class:fim::Rect
hrshrink	FimWindow.cpp	/^	fim_err_t FimWindow::hrshrink(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT) {  return corners_.hrshrink(units); }$/;"	f	class:fim::FimWindow
hrshrink	FimWindow.cpp	/^	fim_err_t Rect::hrshrink(fim_coo_t units) { w-=units; return FIM_ERR_NO_ERROR; }$/;"	f	class:fim::Rect
hspacing	FimWindow.h	/^	enum Spacings{ hspacing=0, vspacing=0};$/;"	e	enum:fim::FimWindow::Spacings
hsplit	FimWindow.cpp	/^	Rect Rect::hsplit(Splitmode s){return split(s);}$/;"	f	class:fim::Rect
hsplit	FimWindow.cpp	/^	void FimWindow::hsplit(void)$/;"	f	class:fim::FimWindow
hsteps_	fim.h	/^	fim_off_t	steps_,hsteps_,vsteps_,top_,left_,panned_ ;	\/* viewport variables *\/$/;"	m	class:fim::ViewportState
i	FbiStuffLoader.h	/^    struct ida_image_info  i;$/;"	m	struct:fim::ida_image	typeref:struct:fim::ida_image::ida_image_info
i	FbiStuffPng.cpp	/^    struct ida_image_info *i; $/;"	m	struct:fim::fim_png_state	typeref:struct:fim::fim_png_state::ida_image_info	file:
i	Var.h	/^		fim_int i;$/;"	m	union:fim::Var::__anon18
i	lex.h	/^int i; \/* subscript to sym array *\/$/;"	m	struct:__anon15
ic_	CommandConsole.h	/^	fim_status_t 	ic_;				\/\/in console if 1. not if 0. willing to exit from console mode if -1$/;"	m	class:fim::CommandConsole
id	lex.h	/^idNodeType id; \/* identifiers *\/$/;"	m	union:nodeTypeTag::__anon17
idNodeType	lex.h	/^} idNodeType;$/;"	t	typeref:struct:__anon15
id_	CommandConsole.h	/^	ImgDscs id_;$/;"	m	class:fim::CommandConsole
ida_extra	FbiStuffLoader.h	/^struct ida_extra {$/;"	s	namespace:fim
ida_extype	FbiStuffLoader.h	/^enum ida_extype {$/;"	g	namespace:fim
ida_image	FbiStuffLoader.h	/^struct ida_image {$/;"	s	namespace:fim
ida_image_info	FbiStuffLoader.h	/^struct ida_image_info {$/;"	s	namespace:fim
ida_loader	FbiStuffLoader.h	/^struct ida_loader {$/;"	s	namespace:fim
ida_op	FbiStuffLoader.h	/^struct ida_op {$/;"	s	namespace:fim
ida_rect	FbiStuffLoader.h	/^struct ida_rect {$/;"	s	namespace:fim
ida_writer	FbiStuffLoader.h	/^struct ida_writer {$/;"	s	namespace:fim
il	FbiStuffGif.cpp	/^    GifPixelType *il;$/;"	m	struct:fim::gif_state	file:
il2_initialize	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::il2_initialize(void)$/;"	f	class:Imlib2Device
image	Browser.cpp	/^	Image *Browser::image(void)const$/;"	f	class:fim::Browser
image	FbiStuffJasPer.cpp	/^	jas_image_t *image;$/;"	m	struct:fim::jp2_state	file:
image	FbiStuffJpeg.cpp	/^    fim_byte_t *image,*ptr;$/;"	m	struct:fim::jpeg_state	file:
image	FbiStuffMagick.cpp	/^	Image * image; \/* Warning: this is NOT to be confused with fim's Image class *\/$/;"	m	struct:magick_state_t	file:
image	FbiStuffPng.cpp	/^    png_bytep    image;$/;"	m	struct:fim::fim_png_state	file:
image	FbiStuffTiff.cpp	/^    uint32*        image;$/;"	m	struct:fim::tiff_state	file:
image	Imlib2Device.h	/^	Imlib_Image image;\/\/ FIXME: -> tmpimage$/;"	m	class:Imlib2Device
imageCache_	Cache.h	/^	cachels_t 	imageCache_;$/;"	m	class:fim::Cache
image_	Viewport.h	/^	Image  *image_;	\/\/ !! $/;"	m	class:fim::Viewport
image_info	FbiStuffMagick.cpp	/^	ImageInfo *image_info;$/;"	m	struct:magick_state_t	file:
image_size	FbiStuffBmp.cpp	/^    uint32 image_size;$/;"	m	struct:fim::bmp_hdr	file:
img_	Image.h	/^        struct ida_image *img_     ;     \/* local (eventually) copy images *\/$/;"	m	class:fim::Image	typeref:struct:fim::Image::ida_image
img_byte_size	Cache.cpp	/^	size_t Cache::img_byte_size(void)const$/;"	f	class:fim::Cache
imp_colors	FbiStuffBmp.cpp	/^    uint32 imp_colors;        \/* important colors *\/$/;"	m	struct:fim::bmp_hdr	file:
in	FbiStuffJasPer.cpp	/^	jas_stream_t *in;$/;"	m	struct:fim::jp2_state	file:
inConsole	CommandConsole.cpp	/^	fim_bool_t CommandConsole::inConsole(void)const$/;"	f	class:fim::CommandConsole
infile	FbiStuffGif.cpp	/^    FILE         *infile;$/;"	m	struct:fim::gif_state	file:
infile	FbiStuffJpeg.cpp	/^    FILE * infile;                \/* source file *\/$/;"	m	struct:fim::jpeg_state	file:
infile	FbiStuffPng.cpp	/^    FILE         *infile;$/;"	m	struct:fim::fim_png_state	file:
infile	FbiStuffPpm.cpp	/^    FILE          *infile;$/;"	m	struct:fim::ppm_state	file:
info	Browser.cpp	/^	fim::string Browser::info(void)$/;"	f	class:fim::Browser
info	FbiStuffPng.cpp	/^    png_infop    info;$/;"	m	struct:fim::fim_png_state	file:
init	CommandConsole-init.cpp	/^	fim_err_t CommandConsole::init(fim::string device)$/;"	f	class:fim::CommandConsole
init	FbiStuffLoader.h	/^    void* (*init)(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	m	struct:fim::ida_loader
init	FbiStuffLoader.h	/^    void* (*init)(const struct ida_image *src, struct ida_rect *rect,$/;"	m	struct:fim::ida_op
init_console	AADevice.cpp	/^	fim_err_t AADevice::init_console(void)$/;"	f	class:AADevice
init_console	DisplayDevice.cpp	/^fim_err_t DisplayDevice::init_console(void)$/;"	f	class:DisplayDevice
init_dither	FramebufferDevice.cpp	/^void FramebufferDevice::init_dither(int shades_r, int shades_g, int shades_b, int shades_gray)$/;"	f	class:fim::FramebufferDevice
init_one	FramebufferDevice.h	/^void init_one(int32_t *lut, int bits, int shift)$/;"	f	class:fim::FramebufferDevice
init_rd	FbiStuffBit1.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffBit24.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffBmp.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffDjvu.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffGif.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffJasPer.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffJpeg.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffMagick.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffMatrixMarket.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffPcx.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffPdf.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffPng.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffPpm.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffPs.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffText.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffTiff.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_rd	FbiStuffXyz.cpp	/^static void __init init_rd(void)$/;"	f	namespace:fim
init_wr	FbiStuff.cpp	/^static void init_wr(void)$/;"	f	namespace:fim
init_wr	FbiStuffJpeg.cpp	/^static void __init init_wr(void)$/;"	f	namespace:fim
init_wr	FbiStuffPng.cpp	/^static void __init init_wr(void)$/;"	f	namespace:fim
init_wr	FbiStuffPpm.cpp	/^static void __init init_wr(void)$/;"	f	namespace:fim
init_wr	FbiStuffTiff.cpp	/^static void __init init_wr(void)$/;"	f	namespace:fim
initialize	AADevice.cpp	/^	fim_err_t AADevice::initialize(sym_keys_t &sym_keys)$/;"	f	class:AADevice
initialize	CACADevice.cpp	/^	fim_err_t CACADevice::initialize(sym_keys_t &sym_keys)$/;"	f	class:CACADevice
initialize	DummyDisplayDevice.h	/^	virtual fim_err_t initialize(sym_keys_t &sym_keys){return FIM_ERR_NO_ERROR;}$/;"	f	class:DummyDisplayDevice
initialize	FramebufferDevice.h	/^	fim_err_t initialize (sym_keys_t &sym_keys){\/*still unused : FIXME *\/ ;return FIM_ERR_NO_ERROR;}$/;"	f	class:fim::FramebufferDevice
initialize	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::initialize(sym_keys_t &sym_keys)$/;"	f	class:Imlib2Device
initialize	SDLDevice.cpp	/^	fim_err_t SDLDevice::initialize(sym_keys_t &sym_keys)$/;"	f	class:SDLDevice
initialize_keys	Imlib2Device.cpp	/^static fim_err_t initialize_keys(sym_keys_t &sym_keys)$/;"	f	file:
initialize_readline	readline.cpp	/^void initialize_readline (fim_bool_t with_no_display_device, fim_bool_t wcs)$/;"	f	namespace:rl
initialized	Imlib2Device.cpp	/^static bool      initialized=false;$/;"	v	file:
inleft	FbiStuff.cpp	/^    float xscale,yscale,inleft;$/;"	m	struct:fim::op_resize_state	file:
int2lsbf	common.cpp	/^int int2lsbf(int in)$/;"	f
int2msbf	common.cpp	/^int int2msbf(int in)$/;"	f
intCon	lex.h	/^typedef enum { intCon, floatCon, typeOpr, stringCon,cmdId\/*cmdId is dead *\/,vId } nodeEnum;$/;"	e	enum:__anon11
invalid_	Image.h	/^	fim_bool_t invalid_;		\/\/the first time the image is loaded it is set to 1$/;"	m	class:fim::Image
isSetVar	Namespace.cpp	/^		fim_bool_t Namespace::isSetVar(const fim::string &varname)const$/;"	f	class:fim::Namespace
isVariable	CommandConsole.cpp	/^	bool CommandConsole::isVariable(const fim::string &varname)const$/;"	f	class:fim::CommandConsole
is_dir	common.cpp	/^	bool is_dir(const fim::string nf)$/;"	f
is_file	CommandConsole.cpp	/^        bool CommandConsole::is_file(fim::string nf)const$/;"	f	class:fim::CommandConsole
is_file	common.cpp	/^	bool is_file(const fim::string nf)$/;"	f
is_file_nonempty	common.cpp	/^	bool is_file_nonempty(const fim::string nf)$/;"	f
is_flipped	Image.cpp	/^	int Image::is_flipped(void)const$/;"	f	class:fim::Image
is_in_cache	Cache.cpp	/^	bool Cache::is_in_cache(cache_key_t key)const$/;"	f	class:fim::Cache
is_in_cache	Cache.cpp	/^	bool Cache::is_in_cache(fim::Image* oi)const$/;"	f	class:fim::Cache
is_in_clone_cache	Cache.cpp	/^	bool Cache::is_in_clone_cache(fim::Image* oi)const$/;"	f	class:fim::Cache
is_mirrored	Image.cpp	/^	int Image::is_mirrored(void)const$/;"	f	class:fim::Image
is_multipage	Image.cpp	/^	bool Image::is_multipage(void)const$/;"	f	class:fim::Image
isempty	fim_string.cpp	/^	bool string::isempty(void)const$/;"	f	class:fim::string
ishsplit	FimWindow.cpp	/^	bool FimWindow::ishsplit(void)const$/;"	f	class:fim::FimWindow
isleaf	FimWindow.cpp	/^	bool FimWindow::isleaf(void)const$/;"	f	class:fim::FimWindow
issplit	FimWindow.cpp	/^	bool FimWindow::issplit(void)const$/;"	f	class:fim::FimWindow
istrncpy	CommandConsole.cpp	619;"	d	file:
isvalid	FimWindow.cpp	/^	bool FimWindow::isvalid(void)const$/;"	f	class:fim::FimWindow
isvsplit	FimWindow.cpp	/^	bool FimWindow::isvsplit(void)const$/;"	f	class:fim::FimWindow
jerr	FbiStuffJpeg.cpp	/^    struct jpeg_error_mgr jerr;$/;"	m	struct:fim::jpeg_state	typeref:struct:fim::jpeg_state::jpeg_error_mgr	file:
jp2_done	FbiStuffJasPer.cpp	/^jp2_done(void *data)$/;"	f	namespace:fim
jp2_image_render	FbiStuffJasPer.cpp	/^static int jp2_image_render(jas_image_t *image, int vw, int vh, fim_byte_t *vdata)$/;"	f	namespace:fim
jp2_init	FbiStuffJasPer.cpp	/^jp2_init(FILE *fp, const fim_char_t *filename, unsigned int page, struct ida_image_info *i, int thumbnail)$/;"	f	namespace:fim
jp2_loader	FbiStuffJasPer.cpp	/^struct ida_loader jp2_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
jp2_read	FbiStuffJasPer.cpp	/^jp2_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
jp2_state	FbiStuffJasPer.cpp	/^struct jp2_state {$/;"	s	namespace:fim	file:
jp2_vctocc	FbiStuffJasPer.cpp	54;"	d	file:
jpeg_button_cb	FbiStuffJpeg.cpp	/^jpeg_button_cb(Widget widget, XtPointer clientdata, XtPointer call_data)$/;"	f	namespace:fim
jpeg_conf	FbiStuffJpeg.cpp	/^jpeg_conf(Widget parent, struct ida_image *img)$/;"	f	namespace:fim
jpeg_done	FbiStuffJpeg.cpp	/^jpeg_done(void *data)$/;"	f	namespace:fim
jpeg_init	FbiStuffJpeg.cpp	/^jpeg_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
jpeg_loader	FbiStuffJpeg.cpp	/^static struct ida_loader jpeg_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
jpeg_quality	FbiStuffJpeg.cpp	/^static int jpeg_quality = 75;$/;"	m	namespace:fim	file:
jpeg_read	FbiStuffJpeg.cpp	/^jpeg_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
jpeg_shell	FbiStuffJpeg.cpp	/^static Widget jpeg_shell;$/;"	m	namespace:fim	file:
jpeg_state	FbiStuffJpeg.cpp	/^struct jpeg_state {$/;"	s	namespace:fim	file:
jpeg_text	FbiStuffJpeg.cpp	/^static Widget jpeg_text;$/;"	m	namespace:fim	file:
jpeg_write	FbiStuffJpeg.cpp	/^jpeg_write(FILE *fp, struct ida_image *img)$/;"	f	namespace:fim
jpeg_writer	FbiStuffJpeg.cpp	/^struct ida_writer jpeg_writer = {$/;"	m	namespace:fim	typeref:struct:fim::ida_writer	file:
k	defaultConfiguration.cpp	/^		fim_char_t k[4];k[1]='\\0';$/;"	v
kd_mode_	FramebufferDevice.h	/^	int                       kd_mode_;$/;"	m	class:fim::FramebufferDevice
key_syms_	CommandConsole.h	/^	key_syms_t key_syms_;\/\/code->symbol$/;"	m	class:fim::CommandConsole
key_syms_t	CommandConsole.h	/^	typedef std::map<fim_key_t, fim::string> key_syms_t;\/\/code->symbol$/;"	t	class:fim::CommandConsole
key_syms_update	CommandConsole.cpp	/^	fim_bool_t CommandConsole::key_syms_update(void)$/;"	f	class:fim::CommandConsole
keypress_	SDLDevice.h	/^	int keypress_ ;$/;"	m	class:SDLDevice
label	FbiStuffLoader.h	/^    const fim_char_t  *label;$/;"	m	struct:fim::ida_writer
last_action_	CommandConsole.h	/^	fim::string last_action_;$/;"	m	class:fim::CommandConsole
last_regexp_	Browser.h	/^	fim::string last_regexp_; \/\/ was private$/;"	m	class:fim::Browser
last_src_dir_	Browser.h	/^	int last_src_dir_;$/;"	m	class:fim::Browser
last_used	Cache.cpp	/^	fim_time_t Cache::last_used(cache_key_t key)const$/;"	f	class:fim::Cache
le16_to_cpu	FbiStuffBmp.cpp	51;"	d	file:
le16_to_cpu	FbiStuffBmp.cpp	54;"	d	file:
le32_to_cpu	FbiStuffBmp.cpp	52;"	d	file:
le32_to_cpu	FbiStuffBmp.cpp	56;"	d	file:
left	FimWindow.cpp	/^	FimWindow & FimWindow::left(void)$/;"	f	class:fim::FimWindow
left_	fim.h	/^	fim_off_t	steps_,hsteps_,vsteps_,top_,left_,panned_ ;	\/* viewport variables *\/$/;"	m	class:fim::ViewportState
len	fim_string.h	/^	int len;	\/* the allocated amount *\/$/;"	m	class:fim::string
length	fim_string.cpp	/^	int  string::length(void)const$/;"	f	class:fim::string
lexer	fim.cpp	/^	FlexLexer *lexer;$/;"	v
li_	Image.h	/^	ImgDscs::iterator li_;$/;"	m	class:ImgDscs
line_	DebugConsole.h	/^		fim_char_t **line_;	\/\/ the (displayed) line_ pointers array$/;"	m	class:fim::MiniConsole
line_length	DebugConsole.cpp	/^		int MiniConsole::line_length(int li)$/;"	f	class:fim::MiniConsole
linear_palette	FramebufferDevice.h	/^void linear_palette(int bit)$/;"	f	class:fim::FramebufferDevice
linebuf	FbiStuff.cpp	/^    int  *linebuf;$/;"	m	struct:fim::op_sharpe_handle	file:
linebuf	FbiStuff.cpp	/^    int *linebuf;$/;"	m	struct:fim::op_3x3_handle	file:
linelength	FbiStuffJpeg.cpp	/^    int row_stride,linelength;    \/* physical row width in output buffer *\/$/;"	m	struct:fim::jpeg_state	file:
lines_count	common.cpp	/^int lines_count(const fim_char_t*s, int cols)$/;"	f
list	FbiStuffLoader.h	/^    struct list_head list;$/;"	m	struct:fim::ida_loader	typeref:struct:fim::ida_loader::list_head
list	FbiStuffLoader.h	/^    struct list_head list;$/;"	m	struct:fim::ida_writer	typeref:struct:fim::ida_writer::list_head
list_add	FbiStuffList.h	/^static __inline__ void list_add(struct list_head *_new, struct list_head *head)$/;"	f
list_add_tail	FbiStuffList.h	/^static __inline__ void list_add_tail(struct list_head *_new, struct list_head *head)$/;"	f
list_del	FbiStuffList.h	/^static __inline__ void list_del(struct list_head *entry)$/;"	f
list_del_init	FbiStuffList.h	/^static __inline__ void list_del_init(struct list_head *entry)$/;"	f
list_empty	FbiStuffList.h	/^static __inline__ int list_empty(struct list_head *head)$/;"	f
list_entry	FbiStuffList.h	177;"	d
list_for_each	FbiStuffList.h	185;"	d
list_for_each_prev	FbiStuffList.h	203;"	d
list_for_each_safe	FbiStuffList.h	194;"	d
list_head	FbiStuffList.h	/^struct list_head {$/;"	s
list_splice	FbiStuffList.h	/^static __inline__ void list_splice(struct list_head *list, struct list_head *head)$/;"	f
load	Image.cpp	/^	bool Image::load(const fim_char_t *fname, FILE* fd, int want_page)$/;"	f	class:fim::Image
loadCurrentImage	Browser.cpp	/^	fim_err_t Browser::loadCurrentImage(void)$/;"	f	class:fim::Browser
loadNewImage	Cache.cpp	/^	Image * Cache::loadNewImage(cache_key_t key, fim_page_t page)$/;"	f	class:fim::Cache
load_add_extra	FbiStuffLoader.cpp	/^int load_add_extra(struct ida_image_info *info, enum ida_extype type,$/;"	f	namespace:fim
load_bits_lsb	FbiStuffLoader.cpp	/^void load_bits_lsb(fim_byte_t *dst, fim_byte_t *src, int width,$/;"	f	namespace:fim
load_bits_msb	FbiStuffLoader.cpp	/^void load_bits_msb(fim_byte_t *dst, fim_byte_t *src, int width,$/;"	f	namespace:fim
load_error_handle	Browser.cpp	/^	int Browser::load_error_handle(fim::string c)$/;"	f	class:fim::Browser
load_find_extra	FbiStuffLoader.cpp	/^struct ida_extra* load_find_extra(struct ida_image_info *info,$/;"	f	namespace:fim
load_free_extras	FbiStuffLoader.cpp	/^int load_free_extras(struct ida_image_info *info)$/;"	f	namespace:fim
load_gray	FbiStuffLoader.cpp	/^void load_gray(fim_byte_t *dst, fim_byte_t *src, int width)$/;"	f	namespace:fim
load_graya	FbiStuffLoader.cpp	/^void load_graya(fim_byte_t *dst, fim_byte_t *src, int width)$/;"	f	namespace:fim
load_or_save_history	CommandConsole.cpp	/^	fim_err_t CommandConsole::load_or_save_history(bool load_or_save)$/;"	f	class:fim::CommandConsole
load_rgba	FbiStuffLoader.cpp	/^void load_rgba(fim_byte_t *dst, fim_byte_t *src, int width)$/;"	f	namespace:fim
lock	DisplayDevice.h	/^	virtual void lock(void){}$/;"	f	class:DisplayDevice
lock	Imlib2Device.cpp	/^	void Imlib2Device::lock(void)$/;"	f	class:Imlib2Device
lock	SDLDevice.cpp	/^	void SDLDevice::lock(void)$/;"	f	class:SDLDevice
lower	FimWindow.cpp	/^	FimWindow & FimWindow::lower(void)$/;"	f	class:fim::FimWindow
lru_	Cache.h	/^	lru_t		lru_;$/;"	m	class:fim::Cache
lru_t	Cache.h	/^	typedef std::map<fim::Image*,fim_time_t > 	   lru_t;	\/\/filename - last usage time$/;"	t	class:fim::Cache
lru_touch	Cache.cpp	/^	int Cache::lru_touch(cache_key_t key)$/;"	f	class:fim::Cache
lsize_	DebugConsole.h	/^		int  lsize_;	\/\/ the lines array size$/;"	m	class:fim::MiniConsole
lut_blue_	FramebufferDevice.h	/^	int32_t         lut_red_[256], lut_green_[256], lut_blue_[256];$/;"	m	class:fim::FramebufferDevice
lut_green_	FramebufferDevice.h	/^	int32_t         lut_red_[256], lut_green_[256], lut_blue_[256];$/;"	m	class:fim::FramebufferDevice
lut_init	FramebufferDevice.h	/^void lut_init(int depth)$/;"	f	class:fim::FramebufferDevice
lut_red_	FramebufferDevice.h	/^	int32_t         lut_red_[256], lut_green_[256], lut_blue_[256];$/;"	m	class:fim::FramebufferDevice
lwidth_	DebugConsole.h	/^		int  lwidth_;$/;"	m	class:fim::MiniConsole
magic	FbiStuffLoader.h	/^    const fim_char_t  *magic;$/;"	m	struct:fim::ida_loader
magick_cleanup	FbiStuffMagick.cpp	/^static void magick_cleanup(void)$/;"	f	namespace:fim
magick_done	FbiStuffMagick.cpp	/^magick_done(void *data)$/;"	f	namespace:fim
magick_init	FbiStuffMagick.cpp	/^magick_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
magick_loader	FbiStuffMagick.cpp	/^struct ida_loader magick_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
magick_read	FbiStuffMagick.cpp	/^magick_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
magick_state_t	FbiStuffMagick.cpp	/^struct magick_state_t {$/;"	s	file:
magnify	Image.cpp	/^	void Image::magnify(fim_scale_t factor)$/;"	f	class:fim::Image
main	fim.cpp	/^	fim_perr_t main(int argc,char *argv[])$/;"	f	class:FimInstance
main	fim.cpp	/^fim_perr_t main(int argc,char *argv[])$/;"	f
mandesc	fim.cpp	/^  const fim_char_t *mandesc;\/* this is fim specific *\/$/;"	m	struct:fim_options_t	file:
mangle_tcattr_	CommandConsole.h	/^	bool mangle_tcattr_;$/;"	m	class:fim::CommandConsole
manufacturer	FbiStuffPcx.cpp	/^  fim_byte_t     manufacturer;$/;"	m	struct:fim::__anon3	file:
markCurrentFile	CommandConsole.cpp	/^	void CommandConsole::markCurrentFile(void)$/;"	f	class:fim::CommandConsole
marked_files_	CommandConsole.h	/^	marked_files_t marked_files_;		\/\/filenames$/;"	m	class:fim::CommandConsole
marked_files_list	CommandConsole.cpp	/^	fim::string CommandConsole::marked_files_list(void)const$/;"	f	class:fim::CommandConsole
marked_files_t	CommandConsole.h	/^	typedef std::set<fim::string> marked_files_t;	\/\/$/;"	t	class:fim::CommandConsole
matrix	FramebufferDevice.cpp	/^typedef vector  matrix[DITHER_LEVEL];$/;"	t	namespace:fim	file:
matrix_copy_rgb_to_gray	AADevice.cpp	/^	static fim_err_t matrix_copy_rgb_to_gray($/;"	f	file:
max	readline.cpp	31;"	d	file:
max_string	fim_string.h	/^	static int  max_string(void){return TOKSIZE-1;}$/;"	f	class:fim::string
maxc	FbiStuffText.cpp	/^    long maxc;$/;"	m	struct:fim::text_state	file:
maxenc	FontServer.h	/^    int                maxenc,width,height;$/;"	m	struct:fim::fs_font
mc_	CommandConsole.h	/^	MiniConsole mc_;$/;"	m	class:fim::CommandConsole
mc_	DisplayDevice.h	/^	MiniConsole & mc_;$/;"	m	class:DisplayDevice
mdp	fim.h	/^	fim_byte_t* mdp; \/* mipmap data pointer *\/$/;"	m	class:fim_mipmap_t
memorize_last	CommandConsole.cpp	/^	fim::string CommandConsole::memorize_last(const fim::string &cmd)$/;"	f	class:fim::CommandConsole
min	AADevice.cpp	35;"	d	file:
min	CACADevice.cpp	30;"	d	file:
min	DebugConsole.cpp	134;"	d	file:
min	DebugConsole.cpp	28;"	d	file:
min	FramebufferDevice.cpp	493;"	d	file:
min	readline.cpp	30;"	d	file:
mipmap_compute	FbiStuff.cpp	/^static fim_err_t mipmap_compute(const fim_coo_t w, const fim_coo_t h, const int hw, const int hh, const fim_byte_t *FIM_RSTRCT src, fim_byte_t * FIM_RSTRCT dst)$/;"	f	namespace:fim
mlen	FbiStuffLoader.h	/^    int   mlen;$/;"	m	struct:fim::ida_loader
mm_	Image.h	/^	fim_mipmap_t mm_;$/;"	m	class:fim::Image
mm_done	FbiStuffMatrixMarket.cpp	/^mm_done(void *data)$/;"	f	namespace:fim
mm_free	Image.cpp	/^	void Image::mm_free(void) { mm_.dealloc(); }$/;"	f	class:fim::Image
mm_init	FbiStuffMatrixMarket.cpp	/^mm_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
mm_loader	FbiStuffMatrixMarket.cpp	/^static struct ida_loader mm_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
mm_make	Image.cpp	/^	void Image::mm_make(void) { mm_.dealloc(); FbiStuff::fim_mipmaps_compute(fimg_,&mm_); }$/;"	f	class:fim::Image
mm_read	FbiStuffMatrixMarket.cpp	/^mm_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
mm_state_t	FbiStuffMatrixMarket.cpp	/^struct mm_state_t {$/;"	s	namespace:fim	file:
mmb	fim.h	/^	size_t mmb; \/* mipmap bytes (total) *\/$/;"	m	class:fim_mipmap_t
mmh	fim.h	/^	fim_int mmh[FIM_MAX_MIPMAPS]; \/* mipmap height *\/$/;"	m	class:fim_mipmap_t
mmoffs	fim.h	/^	size_t mmoffs[FIM_MAX_MIPMAPS]; \/* mipmap offset *\/$/;"	m	class:fim_mipmap_t
mmsize	fim.h	/^	size_t mmsize[FIM_MAX_MIPMAPS]; \/* mipmap size *\/$/;"	m	class:fim_mipmap_t
mmw	fim.h	/^	fim_int mmw[FIM_MAX_MIPMAPS]; \/* mipmap width *\/$/;"	m	class:fim_mipmap_t
moff	FbiStuffLoader.h	/^    int   moff;$/;"	m	struct:fim::ida_loader
move_focus	FimWindow.cpp	/^	FimWindow::Moves FimWindow::move_focus(Moves move)$/;"	f	class:fim::FimWindow
mpf	FbiStuffMagick.cpp	/^	MagickPassFail mpf; $/;"	m	struct:magick_state_t	file:
ms	FbiStuffMagick.cpp	/^static struct magick_state_t ms;$/;"	v	typeref:struct:magick_state_t	file:
ms_	Image.h	/^	size_t ms_;		\/* memory size *\/$/;"	m	class:fim::Image
mul	FbiStuff.h	/^    int mul,div,add;$/;"	m	struct:fim::op_3x3_parm
n_files	Browser.cpp	/^	fim_int Browser::n_files(void)const$/;"	f	class:fim::Browser
n_pages	Browser.cpp	/^	fim_int Browser::n_pages(void)const$/;"	f	class:fim::Browser
n_pages	Image.cpp	/^	int Image::n_pages()const{return (fimg_?fimg_->i.npages:0);}$/;"	f	class:fim::Image
name	FbiStuffLoader.h	/^    const fim_char_t  *name;$/;"	m	struct:fim::ida_loader
name	FbiStuffLoader.h	/^    const fim_char_t  *name;$/;"	m	struct:fim::ida_op
name	fim.cpp	/^  const fim_char_t *name;$/;"	m	struct:fim_options_t	file:
name_	AADevice.h	/^	fim_char_t name_[2];	\/* For ascii_save_.name *\/$/;"	m	class:AADevice
ndirs	FbiStuffTiff.cpp	/^    tdir_t         ndirs;     \/* Number of directories                     *\/$/;"	m	struct:fim::tiff_state	file:
need_free	Cache.cpp	/^	bool Cache::need_free(void)const$/;"	f	class:fim::Cache
negate	Image.cpp	/^	bool Image::negate(void)$/;"	f	class:fim::Image
newangle_	Image.h	/^	fim_scale_t            newangle_;$/;"	m	class:fim::Image
newlines_count	common.cpp	/^int newlines_count(const fim_char_t*s)$/;"	f
newscale_	Image.h	/^	fim_scale_t            newscale_;$/;"	m	class:fim::Image
next	Browser.cpp	/^	fim::string Browser::next(int n)$/;"	f	class:fim::Browser
next	FbiStuffList.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	FbiStuffLoader.h	/^    struct ida_extra  *next;$/;"	m	struct:fim::ida_extra	typeref:struct:fim::ida_extra::ida_extra
next_page	Image.cpp	/^	bool Image::next_page(int j)$/;"	f	class:fim::Image
next_row	common.cpp	/^const fim_char_t* next_row(const fim_char_t*s, int cols)$/;"	f
nmm	fim.h	/^	int nmm; \/* number of mipmaps *\/$/;"	m	class:fim_mipmap_t
no_file_	Image.h	/^	fim_bool_t no_file_;	\/\/no file is associated to this image (used for reading from \/dev\/stdin at most once.)$/;"	m	class:fim::Image
nochars	CommandConsole.cpp	/^	static  bool nochars(const fim_char_t *s)$/;"	f	namespace:fim
nodeEnum	lex.h	/^typedef enum { intCon, floatCon, typeOpr, stringCon,cmdId\/*cmdId is dead *\/,vId } nodeEnum;$/;"	t	typeref:enum:__anon11
nodeType	lex.h	/^} nodeType;$/;"	t	typeref:struct:nodeTypeTag
nodeTypeTag	lex.h	/^typedef struct nodeTypeTag {$/;"	s
nofile_	Browser.h	/^	const fim::string nofile_; \/* a dummy empty filename *\/$/;"	m	class:fim::Browser
nops	lex.h	/^int nops; \/* number of operands *\/$/;"	m	struct:__anon16
normalize	FimWindow.cpp	/^	bool FimWindow::normalize(void)$/;"	f	class:fim::FimWindow
np	FbiStuffPcx.cpp	/^	int np; \/* number of pages: 1... *\/$/;"	m	struct:fim::pcx_state	file:
np	FbiStuffXyz.cpp	/^	int np; \/* number of pages: 1... *\/$/;"	m	struct:fim::xyz_state	file:
npages	FbiStuffLoader.h	/^    unsigned int      npages;$/;"	m	struct:fim::ida_image_info
ns_char_	Namespace.h	/^		fim_char_t ns_char_; \/\/ ns_char_ ':' varname$/;"	m	class:fim::Namespace
nsamples	FbiStuffTiff.cpp	/^    uint16         config,nsamples,depth,fillorder,photometric;$/;"	m	struct:fim::tiff_state	file:
nsp	FbiStuffLoader.h	/^    fim::Namespace *nsp;$/;"	m	struct:fim::ida_image_info
null_display	Viewport.cpp	/^	void Viewport::null_display(void)$/;"	f	class:fim::Viewport
num_colors	FbiStuffBmp.cpp	/^    uint32 num_colors;        \/* used colors *\/$/;"	m	struct:fim::bmp_hdr	file:
oblue_	FramebufferDevice.h	/^	unsigned short            ored_[256], ogreen_[256], oblue_[256];$/;"	m	class:fim::FramebufferDevice
ocmap_	FramebufferDevice.h	/^	struct fb_cmap            ocmap_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::fb_cmap
od	FbiStuffPdf.cpp	/^	SplashOutputDev *   od ;$/;"	m	struct:fim::pdf_state_t	file:
offsets	FontServer.h	/^    FSOffset           *offsets;$/;"	m	struct:fim::fs_font
ogreen_	FramebufferDevice.h	/^	unsigned short            ored_[256], ogreen_[256], oblue_[256];$/;"	m	class:fim::FramebufferDevice
ok	fim.h	/^	bool ok(void)const{return mmb > 0;}$/;"	f	class:fim_mipmap_t
onBottom	Viewport.cpp	/^	bool Viewport::onBottom(void)const$/;"	f	class:fim::Viewport
onLeft	Viewport.cpp	/^	bool Viewport::onLeft(void)const$/;"	f	class:fim::Viewport
onRight	Viewport.cpp	/^	bool Viewport::onRight(void)const$/;"	f	class:fim::Viewport
onTop	Viewport.cpp	/^	bool Viewport::onTop(void)const$/;"	f	class:fim::Viewport
only_viewport_	Browser.h	/^	Viewport *only_viewport_;$/;"	m	class:fim::Browser
op	lex.h	/^struct nodeTypeTag *op[1]; \/* operands (expandable) *\/$/;"	m	struct:__anon16	typeref:struct:__anon16::nodeTypeTag
op_3x3_calc_line	FbiStuff.cpp	/^op_3x3_calc_line(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_3x3_calc_pixel	FbiStuff.cpp	/^op_3x3_calc_pixel(struct op_3x3_parm *p, fim_byte_t *s1,$/;"	f	namespace:fim
op_3x3_clip_line	FbiStuff.cpp	/^op_3x3_clip_line(fim_byte_t *dst, int *src, int left, int right)$/;"	f	namespace:fim
op_3x3_free	FbiStuff.cpp	/^op_3x3_free(void *data)$/;"	f	namespace:fim
op_3x3_handle	FbiStuff.cpp	/^struct op_3x3_handle {$/;"	s	namespace:fim	file:
op_3x3_init	FbiStuff.cpp	/^op_3x3_init(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_3x3_parm	FbiStuff.h	/^struct op_3x3_parm {$/;"	s	namespace:fim
op_3x3_work	FbiStuff.cpp	/^op_3x3_work(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_autocrop_init_	FbiStuff.cpp	/^op_autocrop_init_(const struct ida_image *src, struct ida_rect *unused,$/;"	f	namespace:fim
op_crop_init_	FbiStuff.cpp	/^op_crop_init_(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_crop_work_	FbiStuff.cpp	/^op_crop_work_(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_flip_horz_	FbiStuff.cpp	/^op_flip_horz_(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_flip_vert_	FbiStuff.cpp	/^op_flip_vert_(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_free_done	FbiStuff.cpp	/^void  op_free_done(void *data) { fim_free(data); }$/;"	f	namespace:fim
op_grayscale	FbiStuff.cpp	/^op_grayscale(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_invert_	FbiStuff.cpp	/^op_invert_(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_none_data	FbiStuff.cpp	/^static fim_byte_t op_none_data;$/;"	m	namespace:fim	file:
op_none_data_	FbiStuff.cpp	/^static fim_byte_t op_none_data_;$/;"	m	namespace:fim	file:
op_none_done	FbiStuff.cpp	/^void  op_none_done(void *data) {}$/;"	f	namespace:fim
op_none_init	FbiStuff.cpp	/^void* op_none_init(const struct ida_image *src,  struct ida_rect *sel,$/;"	f	namespace:fim
op_resize_done	FbiStuff.cpp	/^op_resize_done(void *data)$/;"	f	namespace:fim
op_resize_init	FbiStuff.cpp	/^op_resize_init(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_resize_parm	FbiStuff.h	/^struct op_resize_parm {$/;"	s	namespace:fim
op_resize_state	FbiStuff.cpp	/^struct op_resize_state {$/;"	s	namespace:fim	file:
op_resize_work	FbiStuff.cpp	/^op_resize_work(const struct ida_image *FIM_RSTRCT src, struct ida_rect *rect,$/;"	f	namespace:fim
op_resize_work_row_expand	FbiStuff.cpp	/^void op_resize_work_row_expand(struct ida_image *src, struct ida_rect *rect, fim_byte_t *dst, int line, void *data)$/;"	f	namespace:fim
op_resize_work_row_expand_i_unrolled	FbiStuff.cpp	/^static inline void op_resize_work_row_expand_i_unrolled(const struct ida_image *src, struct ida_rect *rect, fim_byte_t *dst, int line, void *data, int sr)$/;"	f	namespace:fim
op_resize_work_unrolled2_row_expand	FbiStuff.cpp	/^static inline void op_resize_work_unrolled2_row_expand(const struct ida_image *src, struct ida_rect *rect, fim_byte_t *dst, int line, void *data, int sr)$/;"	f	namespace:fim
op_resize_work_unrolled4_row_expand	FbiStuff.cpp	/^const inline void op_resize_work_unrolled4_row_expand(const struct ida_image *src, struct ida_rect *rect, fim_byte_t *FIM_RSTRCT dst, int line, void *FIM_RSTRCT data, int sr)$/;"	f	namespace:fim
op_rotate_ccw_	FbiStuff.cpp	/^op_rotate_ccw_(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_rotate_cw_	FbiStuff.cpp	/^op_rotate_cw_(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_rotate_done	FbiStuff.cpp	/^op_rotate_done(void *data)$/;"	f	namespace:fim
op_rotate_getpixel	FbiStuff.cpp	/^fim_byte_t* op_rotate_getpixel(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_rotate_init	FbiStuff.cpp	/^op_rotate_init(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_rotate_init_	FbiStuff.cpp	/^op_rotate_init_(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_rotate_parm	FbiStuff.h	/^struct op_rotate_parm {$/;"	s	namespace:fim
op_rotate_state	FbiStuff.cpp	/^struct op_rotate_state {$/;"	s	namespace:fim	file:
op_rotate_work	FbiStuff.cpp	/^op_rotate_work(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_sharpe_free	FbiStuff.cpp	/^op_sharpe_free(void *data)$/;"	f	namespace:fim
op_sharpe_handle	FbiStuff.cpp	/^struct op_sharpe_handle {$/;"	s	namespace:fim	file:
op_sharpe_init	FbiStuff.cpp	/^op_sharpe_init(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
op_sharpe_parm	FbiStuff.h	/^struct op_sharpe_parm {$/;"	s	namespace:fim
op_sharpe_work	FbiStuff.cpp	/^op_sharpe_work(const struct ida_image *src, struct ida_rect *rect,$/;"	f	namespace:fim
oper	lex.h	/^int oper; \/* operator *\/$/;"	m	struct:__anon16
operator !=	Var.h	/^	Var operator!=(const Var &v)const {$/;"	f	class:fim::Var
operator !=	fim_string.cpp	/^	bool string::operator!=(const string& s)const$/;"	f	class:fim::string
operator %	Var.h	/^	Var operator% (const Var &v)const { return getInt()%v.getInt(); }$/;"	f	class:fim::Var
operator &	Var.h	/^	Var operator& (const Var &v)const$/;"	f	class:fim::Var
operator &&	Var.h	/^	Var operator&&(const Var &v)const { return getInt()&&v.getInt(); }$/;"	f	class:fim::Var
operator ()	Browser.cpp	/^	bool operator() (fim::string lfn, fim::string rfn)$/;"	f	struct:fim::FimBaseNameSorter
operator ()	Browser.cpp	/^	bool operator() (fim::string lfn, fim::string rfn)$/;"	f	struct:fim::FimDateSorter
operator ()	Image.h	/^		bool operator() (const typename T::value_type &vo, const typename T::mapped_type mo) const$/;"	f	struct:ImgDscs::ImgDscsCmp
operator *	Var.h	/^	Var operator* (const Var &v)const$/;"	f	class:fim::Var
operator +	Var.h	/^	Var operator+ (const Var &v)const$/;"	f	class:fim::Var
operator +	fim_string.cpp	/^	string string::operator+(const string& s)const$/;"	f	class:fim::string
operator +=	fim_string.cpp	/^	string string::operator+=(const string& s)$/;"	f	class:fim::string
operator -	Var.h	/^	Var operator- (const Var &v)const$/;"	f	class:fim::Var
operator -	Var.h	/^	Var operator- (void)const {$/;"	f	class:fim::Var
operator /	Var.h	/^	Var operator\/ (const Var &v)const$/;"	f	class:fim::Var
operator <	Arg.cpp	/^	bool Arg::operator <(fim_int i){fim_int v=fim_atoi(val_.c_str());return v <i;}$/;"	f	class:fim::Arg
operator <	Command.h	/^	bool operator < (Command c)const{return cmd_< c.cmd_;}$/;"	f	class:fim::Command
operator <	Var.h	/^	Var  operator< (const Var &v)const { return getFloat()< v.getFloat(); }$/;"	f	class:fim::Var
operator <	fim_string.cpp	/^	bool string::operator <(const fim_char_t *s)const$/;"	f	class:fim::string
operator <	fim_string.cpp	/^	bool string::operator <(const string& s)const$/;"	f	class:fim::string
operator <<	Image.cpp	/^	std::ostream& operator<<(std::ostream &os, const ImgDscs & id)$/;"	f
operator <<	Namespace.cpp	/^	std::ostream& operator<<(std::ostream &os, const Namespace & ns)$/;"	f	namespace:fim
operator <<	Var.cpp	/^	std::ostream& operator<<(std::ostream &os, const Var & var)$/;"	f	namespace:fim
operator <<	fim_stream.cpp	/^		fim_stream& fim_stream::operator<<(const  fim::string&s)$/;"	f	class:fim::fim_stream
operator <<	fim_stream.cpp	/^		fim_stream& fim_stream::operator<<(const  fim_char_t* s)$/;"	f	class:fim::fim_stream
operator <<	fim_stream.cpp	/^		fim_stream& fim_stream::operator<<(const fim_byte_t* s)$/;"	f	class:fim::fim_stream
operator <<	fim_stream.cpp	/^		fim_stream& fim_stream::operator<<(fim_int i)$/;"	f	class:fim::fim_stream
operator <<	fim_stream.cpp	/^		fim_stream& fim_stream::operator<<(float f)$/;"	f	class:fim::fim_stream
operator <<	fim_stream.cpp	/^		fim_stream& fim_stream::operator<<(int i)$/;"	f	class:fim::fim_stream
operator <<	fim_string.cpp	/^	std::ostream& operator<<(std::ostream &os, const Browser & b)$/;"	f	namespace:fim
operator <<	fim_string.cpp	/^	std::ostream& operator<<(std::ostream &os, const std::vector<fim::string> & v)$/;"	f	namespace:fim
operator <<	fim_string.cpp	/^	std::ostream& operator<<(std::ostream &os,const string& s)$/;"	f	namespace:fim
operator <<	interpreter.cpp	/^std::ostream & operator<<(std::ostream &os,const nodeType &p)$/;"	f
operator <=	Arg.cpp	/^	bool Arg::operator<=(fim_int i){fim_int v=fim_atoi(val_.c_str());return v<=i;}$/;"	f	class:fim::Arg
operator <=	Command.h	/^	bool operator <=(Command c)const{return cmd_<=c.cmd_;}$/;"	f	class:fim::Command
operator <=	Var.h	/^	Var  operator<=(const Var &v)const { return getFloat()<=v.getFloat(); }$/;"	f	class:fim::Var
operator <=	fim_string.cpp	/^	bool string::operator<=(const string& s)const$/;"	f	class:fim::string
operator =	Browser.h	/^	Browser& operator= (const Browser &b){return *this;\/* a nilpotent assignation *\/}$/;"	f	class:fim::Browser
operator =	CommandConsole.cpp	/^	CommandConsole& CommandConsole::operator= (const CommandConsole&cc)$/;"	f	class:fim::CommandConsole
operator =	DebugConsole.cpp	/^		MiniConsole& MiniConsole::operator= (const MiniConsole&mc){return *this;\/* a nilpotent assignment *\/}$/;"	f	class:fim::MiniConsole
operator =	FimWindow.cpp	/^	FimWindow & FimWindow ::operator= (const FimWindow &w){return *this;\/* a nilpotent assignation *\/}$/;"	f	class:fim::FimWindow
operator =	Image.h	/^	Image& operator= (const Image &i){return *this;\/* a nilpotent assignation *\/}$/;"	f	class:fim::Image
operator =	Var.h	/^	const Var& operator= (const Var &v){set(v);return *this;}$/;"	f	class:fim::Var
operator =	Var.h	/^	const Var& operator= (fim::string &s){setString(s);return *this;}$/;"	f	class:fim::Var
operator =	Var.h	/^	const Var& operator= (float f){setFloat(f);return *this;}$/;"	f	class:fim::Var
operator =	Var.h	/^	const Var& operator= (int   i){DBG("2i:"<<i<<"\\n";type='i');this->i=i;return *this;}$/;"	f	class:fim::Var
operator =	Viewport.cpp	/^	Viewport& Viewport::operator= (const Viewport&v){return *this;\/* a nilpotent assignation *\/}$/;"	f	class:fim::Viewport
operator =	fim_string.cpp	/^	string& string::operator =(const string& s)$/;"	f	class:fim::string
operator ==	Arg.cpp	/^	bool Arg::operator==(fim_int i){fim_int v=fim_atoi(val_.c_str());return v==i;}$/;"	f	class:fim::Arg
operator ==	FimWindow.cpp	/^	bool FimWindow::operator==(const FimWindow&window)const$/;"	f	class:fim::FimWindow
operator ==	FimWindow.cpp	/^	bool Rect::operator==(const Rect&rect)const$/;"	f	class:fim::Rect
operator ==	Var.h	/^	Var operator==(const Var &v)const {DBG("EQV\\n"); return 1-(*this != v).getInt(); }$/;"	f	class:fim::Var
operator ==	fim_string.cpp	/^	bool string::operator==(const fim_char_t *  s)const$/;"	f	class:fim::string
operator ==	fim_string.cpp	/^	bool string::operator==(const string& s)const$/;"	f	class:fim::string
operator >	Arg.cpp	/^	bool Arg::operator >(fim_int i){fim_int v=fim_atoi(val_.c_str());return v >i;}$/;"	f	class:fim::Arg
operator >	Var.h	/^	Var  operator> (const Var &v)const { return getFloat()> v.getFloat(); }$/;"	f	class:fim::Var
operator >	fim_string.cpp	/^	bool string::operator >(const fim_char_t *s)const$/;"	f	class:fim::string
operator >	fim_string.cpp	/^	bool string::operator >(const string& s)const$/;"	f	class:fim::string
operator >=	Arg.cpp	/^	bool Arg::operator>=(fim_int i){fim_int v=fim_atoi(val_.c_str());return v>=i;}$/;"	f	class:fim::Arg
operator >=	Var.h	/^	Var  operator>=(const Var &v)const { return getFloat()>=v.getFloat(); }$/;"	f	class:fim::Var
operator >=	fim_string.cpp	/^	bool string::operator>=(const string& s)const$/;"	f	class:fim::string
operator string::fim_int	fim_string.cpp	/^	operator string::fim_int()const{return fim_atoi(s);}$/;"	f	namespace:fim
operator string::float	fim_string.cpp	/^	operator string::float()const{return fim_atof(s);}$/;"	f	namespace:fim
operator string::int	fim_string.cpp	/^	operator string::int()const{return atoi(s);}$/;"	f	namespace:fim
operator |	Var.h	/^	Var operator| (const Var &v)const$/;"	f	class:fim::Var
operator ||	Var.h	/^	Var operator||(const Var &v)const { return getInt()||v.getInt(); }$/;"	f	class:fim::Var
opr	lex.h	/^oprNodeType opr; \/* operators *\/$/;"	m	union:nodeTypeTag::__anon17
oprNodeType	lex.h	/^} oprNodeType;$/;"	t	typeref:struct:__anon16
optdesc	fim.cpp	/^  const fim_char_t *optdesc;\/* this is fim specific *\/$/;"	m	struct:fim_options_t	file:
options	fim.cpp	/^struct option options[fim_options_count];$/;"	v	typeref:struct:option
opts_	SDLDevice.h	/^	fim::string opts_;$/;"	m	class:SDLDevice
ored_	FramebufferDevice.h	/^	unsigned short            ored_[256], ogreen_[256], oblue_[256];$/;"	m	class:fim::FramebufferDevice
orientation_	Image.h	/^	fim_pgor_t              orientation_;	\/\/ orthogonal rotation$/;"	m	class:fim::Image
orig_vt_no_	FramebufferDevice.h	/^	int                       orig_vt_no_;$/;"	m	class:fim::FramebufferDevice
original_height	Image.cpp	/^	fim_coo_t Image::original_height(void)const$/;"	f	class:fim::Image
original_width	Image.cpp	/^	fim_coo_t Image::original_width(void)const$/;"	f	class:fim::Image
outprof	FbiStuffJasPer.cpp	/^	jas_cmprof_t *outprof;$/;"	m	struct:fim::jp2_state	file:
page_	Image.h	/^	fim_page_t		 page_;$/;"	m	class:fim::Image
paletteinfo	FbiStuffPcx.cpp	/^  UWORD          paletteinfo;$/;"	m	struct:fim::__anon3	file:
pan	Browser.cpp	/^	fim::string Browser::pan(const args_t &args)$/;"	f	class:fim::Browser
pan	Viewport.cpp	/^	fim::string Viewport::pan(const args_t &args)$/;"	f	class:fim::Viewport
pan	Viewport.cpp	/^	fim::string Viewport::pan(const fim_char_t*a1, const fim_char_t*a2)$/;"	f	class:fim::Viewport
pan_down	Viewport.cpp	/^	void Viewport::pan_down(fim_pan_t s)$/;"	f	class:fim::Viewport
pan_left	Viewport.cpp	/^	void Viewport::pan_left(fim_pan_t s)$/;"	f	class:fim::Viewport
pan_right	Viewport.cpp	/^	void Viewport::pan_right(fim_pan_t s)$/;"	f	class:fim::Viewport
pan_up	Viewport.cpp	/^	void Viewport::pan_up(fim_pan_t s)$/;"	f	class:fim::Viewport
panned_	fim.h	/^	fim_off_t	steps_,hsteps_,vsteps_,top_,left_,panned_ ;	\/* viewport variables *\/$/;"	m	class:fim::ViewportState
parse_optstring	Imlib2Device.cpp	/^fim_err_t Imlib2Device::parse_optstring(const fim_char_t *os)$/;"	f	class:Imlib2Device
parse_optstring	SDLDevice.cpp	/^fim_err_t SDLDevice::parse_optstring(const fim_char_t *os)$/;"	f	class:SDLDevice
pcd_res_	FramebufferDevice.h	/^	int             dither_ , pcd_res_ \/*, steps_*\/ ;$/;"	m	class:fim::FramebufferDevice
pcx_done	FbiStuffPcx.cpp	/^pcx_done(void *data)$/;"	f	namespace:fim
pcx_err_t	FbiStuffPcx.cpp	/^typedef int pcx_err_t;$/;"	t	namespace:fim	file:
pcx_init	FbiStuffPcx.cpp	/^pcx_init(FILE *fp, const fim_char_t *filename, unsigned int page, struct ida_image_info *i, int thumbnail)$/;"	f	namespace:fim
pcx_load_image_fp	FbiStuffPcx.cpp	/^static pcx_err_t pcx_load_image_fp(FILE *fp, unsigned int page, unsigned char * rgb, int bytes_per_line)$/;"	f	namespace:fim
pcx_load_image_info_fp	FbiStuffPcx.cpp	/^static pcx_err_t pcx_load_image_info_fp(FILE *fp, int * numpagesp, unsigned int *wp, unsigned int *hp)$/;"	f	namespace:fim
pcx_loader	FbiStuffPcx.cpp	/^struct ida_loader pcx_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
pcx_read	FbiStuffPcx.cpp	/^pcx_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
pcx_state	FbiStuffPcx.cpp	/^struct pcx_state {$/;"	s	namespace:fim	file:
pd	FbiStuffPdf.cpp	/^	PDFDoc *            pd ;$/;"	m	struct:fim::pdf_state_t	file:
pdf_done	FbiStuffPdf.cpp	/^pdf_done(void *data)$/;"	f	namespace:fim
pdf_init	FbiStuffPdf.cpp	/^pdf_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
pdf_loader	FbiStuffPdf.cpp	/^static struct ida_loader pdf_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
pdf_read	FbiStuffPdf.cpp	/^pdf_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
pdf_state_t	FbiStuffPdf.cpp	/^struct pdf_state_t {$/;"	s	namespace:fim	file:
pf	FbiStuffDjvu.cpp	/^    ddjvu_format_t * pf;$/;"	m	struct:fim::djvu_state_t	file:
pgm_loader	FbiStuffPpm.cpp	/^struct ida_loader pgm_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
pgm_read	FbiStuffPpm.cpp	/^pgm_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
photometric	FbiStuffTiff.cpp	/^    uint16         config,nsamples,depth,fillorder,photometric;$/;"	m	struct:fim::tiff_state	file:
pick_word	common.cpp	/^static int pick_word(const fim_char_t *f, unsigned int *w)$/;"	f	file:
place	Viewport.cpp	/^	bool Viewport::place(const fim_pan_t px, const fim_pan_t py)$/;"	f	class:fim::Viewport
planes	FbiStuffBmp.cpp	/^    uint16 planes;$/;"	m	struct:fim::bmp_hdr	file:
planes	FbiStuffPcx.cpp	/^  fim_byte_t     planes;$/;"	m	struct:fim::__anon3	file:
png	FbiStuffPng.cpp	/^    png_structp  png;$/;"	m	struct:fim::fim_png_state	file:
png_done	FbiStuffPng.cpp	/^png_done(void *data)$/;"	f	namespace:fim
png_init	FbiStuffPng.cpp	/^png_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
png_loader	FbiStuffPng.cpp	/^struct ida_loader png_loader$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
png_read	FbiStuffPng.cpp	/^png_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
png_write	FbiStuffPng.cpp	/^png_write(FILE *fp, struct ida_image *img)$/;"	f	namespace:fim
png_writer	FbiStuffPng.cpp	/^static struct ida_writer png_writer = {$/;"	m	namespace:fim	typeref:struct:fim::ida_writer	file:
pnm_done	FbiStuffPpm.cpp	/^pnm_done(void *data)$/;"	f	namespace:fim
pnm_init	FbiStuffPpm.cpp	/^pnm_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
pop	Browser.cpp	/^	const fim::string Browser::pop(fim::string filename)$/;"	f	class:fim::Browser
pop_current	Browser.cpp	/^	const fim::string Browser::pop_current(void)$/;"	f	class:fim::Browser
pop_current	Browser.cpp	/^	fim::string Browser::pop_current(const args_t &args)$/;"	f	class:fim::Browser
postExecutionCommand_	CommandConsole.h	/^	fim::string postExecutionCommand_;$/;"	m	class:fim::CommandConsole
postInitCommand_	CommandConsole.h	/^	fim::string postInitCommand_;$/;"	m	class:fim::CommandConsole
post_wmresize	SDLDevice.cpp	/^	fim_err_t SDLDevice::post_wmresize(void)$/;"	f	class:SDLDevice
ppm_loader	FbiStuffPpm.cpp	/^struct ida_loader ppm_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
ppm_read	FbiStuffPpm.cpp	/^ppm_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
ppm_state	FbiStuffPpm.cpp	/^struct ppm_state {$/;"	s	namespace:fim	file:
ppm_write	FbiStuff.cpp	/^ppm_write(FILE *fp, struct ida_image *img)$/;"	f	namespace:fim
ppm_write	FbiStuffPpm.cpp	/^ppm_write(FILE *fp, struct ida_image *img)$/;"	f	namespace:fim
ppm_writer	FbiStuff.cpp	/^static struct ida_writer ppm_writer = {$/;"	m	namespace:fim	typeref:struct:fim::ida_writer	file:
ppm_writer	FbiStuffPpm.cpp	/^static struct ida_writer ppm_writer = {$/;"	m	namespace:fim	typeref:struct:fim::ida_writer	file:
preConfigCommand_	CommandConsole.h	/^	fim::string preConfigCommand_;$/;"	m	class:fim::CommandConsole
pre_autocmd_add	CommandConsole.cpp	/^	fim::string CommandConsole::pre_autocmd_add(const fim::string &cmd)$/;"	f	class:fim::CommandConsole
pre_autocmd_exec	CommandConsole.cpp	/^	fim::string CommandConsole::pre_autocmd_exec(void)$/;"	f	class:fim::CommandConsole
prect	FbiStuffDjvu.cpp	/^    ddjvu_rect_t prect;$/;"	m	struct:fim::djvu_state_t	file:
prefetch	Cache.cpp	/^	int Cache::prefetch(cache_key_t key)$/;"	f	class:fim::Cache
present	Browser.cpp	/^	bool Browser::present(const fim::string nf)const$/;"	f	class:fim::Browser
prev	Browser.cpp	/^	fim::string Browser::prev(int n)$/;"	f	class:fim::Browser
prev	FbiStuffList.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prev_page	Image.cpp	/^	bool Image::prev_page(int j)$/;"	f	class:fim::Image
print	Browser.cpp	/^	std::ostream& Browser::print(std::ostream &os)const$/;"	f	class:fim::Browser
print	FimWindow.cpp	/^	void Rect::print()$/;"	f	class:fim::Rect
print	Image.h	/^	std::ostream& print(std::ostream &os)const$/;"	f	class:ImgDscs
print	Namespace.cpp	/^	std::ostream& Namespace::print(std::ostream &os)const$/;"	f	class:fim::Namespace
print	Var.cpp	/^	std::ostream& Var::print(std::ostream &os)const$/;"	f	class:fim::Var
print	fim_string.cpp	/^	std::ostream& string::print(std::ostream &os)const$/;"	f	class:fim::string
printHelpMessage	CommandConsole.cpp	/^	void CommandConsole::printHelpMessage(const fim_char_t *pn)const$/;"	f	class:fim::CommandConsole
printVariable	CommandConsole.cpp	/^	fim_err_t CommandConsole::printVariable(const fim::string &varname)const$/;"	f	class:fim::CommandConsole
print_commands	CommandConsole-help.cpp	/^	fim::string CommandConsole::print_commands(void)const$/;"	f	class:fim::CommandConsole
print_finfo	FramebufferDevice.cpp	/^static void print_finfo(struct fb_fix_screeninfo *finfo)$/;"	f	namespace:fim
print_vinfo	FramebufferDevice.cpp	/^static void print_vinfo(struct fb_var_screeninfo *vinfo)$/;"	f	namespace:fim
probe_font_file	FontServer.cpp	/^static int probe_font_file(const fim_char_t *fontfilename)$/;"	f	namespace:fim
prompt_	CommandConsole.h	/^	fim_char_t prompt_[2];$/;"	m	class:fim::CommandConsole
propData	FontServer.h	/^    fim_byte_t      *propData;$/;"	m	struct:fim::fs_font
propInfo	FontServer.h	/^    FSPropInfo         propInfo;$/;"	m	struct:fim::fs_font
propOffsets	FontServer.h	/^    FSPropOffset       *propOffsets;$/;"	m	struct:fim::fs_font
ps_done	FbiStuffPs.cpp	/^ps_done(void *data)$/;"	f	namespace:fim
ps_init	FbiStuffPs.cpp	/^ps_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
ps_loader	FbiStuffPs.cpp	/^static struct ida_loader ps_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
ps_read	FbiStuffPs.cpp	/^ps_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
ps_state_t	FbiStuffPs.cpp	/^struct ps_state_t {$/;"	s	namespace:fim	file:
psteps_	Viewport.h	/^	fim_bool_t	psteps_;$/;"	m	class:fim::Viewport
ptr	FbiStuffJpeg.cpp	/^    fim_byte_t *image,*ptr;$/;"	m	struct:fim::jpeg_state	file:
push	Browser.cpp	/^	bool Browser::push(fim::string nf, fim_flags_t pf)$/;"	f	class:fim::Browser
push	CommandConsole.cpp	/^	bool CommandConsole::push(const fim::string nf, fim_flags_t pf)$/;"	f	class:fim::CommandConsole
push_dir	Browser.cpp	/^	bool Browser::push_dir(fim::string nf, fim_flags_t pf)$/;"	f	class:fim::Browser
push_scriptfile	CommandConsole.cpp	/^	bool CommandConsole::push_scriptfile(const fim::string ns)$/;"	f	class:fim::CommandConsole
quickbench	CommandConsole-init.cpp	/^	void CommandConsole::quickbench(fim_int qbi)$/;"	f	class:fim::CommandConsole
quickbench	DisplayDevice.cpp	/^void DisplayDevice::quickbench(fim_int qbi)$/;"	f	class:DisplayDevice
quickbench_finalize	CommandConsole-init.cpp	/^	void CommandConsole::quickbench_finalize(fim_int qbi)$/;"	f	class:fim::CommandConsole
quickbench_finalize	DisplayDevice.cpp	/^void DisplayDevice::quickbench_finalize(fim_int qbi)$/;"	f	class:DisplayDevice
quickbench_init	CommandConsole-init.cpp	/^	void CommandConsole::quickbench_init(fim_int qbi)$/;"	f	class:fim::CommandConsole
quickbench_init	DisplayDevice.cpp	/^void DisplayDevice::quickbench_init(fim_int qbi)$/;"	f	class:DisplayDevice
quit	CommandConsole.cpp	/^	fim_perr_t CommandConsole::quit(fim_perr_t i)$/;"	f	class:fim::CommandConsole
r	CACADevice.h	/^	unsigned int r[256], g[256], b[256], a[256];$/;"	m	class:CACADevice
rcachels_t	Cache.h	/^	typedef std::map<fim::Image*,cache_key_t >  rcachels_t;	\/\/image - filename$/;"	t	class:fim::Cache
re	Var.h	/^	int re (const Var &v)const$/;"	f	class:fim::Var
re_match	Var.h	/^	Var re_match(const Var &v)const { return getString().re_match(v.getString().c_str()); }$/;"	f	class:fim::Var
read	FbiStuffLoader.h	/^    void  (*read)(fim_byte_t *dst, unsigned int line, void *data);$/;"	m	struct:fim::ida_loader
readStdFileDescriptor	CommandConsole.cpp	/^	fim::string CommandConsole::readStdFileDescriptor(FILE* fd, int*rp)$/;"	f	class:fim::CommandConsole
read_image	FbiStuff.cpp	/^struct ida_image* FbiStuff::read_image(const fim_char_t *filename, FILE* fd, fim_int page, Namespace *nsp)$/;"	f	class:fim::FbiStuff
real_height	FbiStuffLoader.h	/^    unsigned int      real_height;$/;"	m	struct:fim::ida_image_info
real_width	FbiStuffLoader.h	/^    unsigned int      real_width;$/;"	m	struct:fim::ida_image_info
reallocate	fim_string.cpp	/^	int string::reallocate(int l=0)$/;"	f	class:fim::string
reassignWindow	Viewport.cpp	/^        void Viewport::reassignWindow(FimWindow *w)$/;"	f	class:fim::Viewport
recenter	Viewport.cpp	/^	void Viewport::recenter(void)$/;"	f	class:fim::Viewport
recenter_horizontally	Viewport.cpp	/^	void Viewport::recenter_horizontally(void)$/;"	f	class:fim::Viewport
recenter_vertically	Viewport.cpp	/^	void Viewport::recenter_vertically(void)$/;"	f	class:fim::Viewport
recordMode_	CommandConsole.h	/^	bool recordMode_;$/;"	m	class:fim::CommandConsole
record_action	CommandConsole.cpp	/^	void CommandConsole::record_action(const fim::string &cmd)$/;"	f	class:fim::CommandConsole
recorded_action_t	CommandConsole.h	/^	typedef std::pair<fim::string,fim_tms_t > recorded_action_t;$/;"	t	class:fim::CommandConsole
recorded_actions_	CommandConsole.h	/^	recorded_actions_t recorded_actions_;$/;"	m	class:fim::CommandConsole
recorded_actions_t	CommandConsole.h	/^	typedef std::vector<recorded_action_t > recorded_actions_t;$/;"	t	class:fim::CommandConsole
recursive_display	FimWindow.cpp	/^	bool FimWindow::recursive_display(void)const$/;"	f	class:fim::FimWindow
recursive_redisplay	FimWindow.cpp	/^	bool FimWindow::recursive_redisplay(void)const$/;"	f	class:fim::FimWindow
red	FbiStuffBmp.cpp	/^    fim_byte_t red;$/;"	m	struct:fim::bmp_cmap	file:
red	FbiStuffPcx.cpp	/^	char red;$/;"	m	struct:fim::__anon2	file:
red	FbiStuffPcx.cpp	/^	unsigned char red;$/;"	m	struct:fim::__anon1	file:
red_	FramebufferDevice.h	/^	unsigned short red_[256],  green_[256],  blue_[256];$/;"	m	class:fim::FramebufferDevice
red_mult_	FramebufferDevice.h	/^	long     red_mult_, green_mult_;$/;"	m	class:fim::FramebufferDevice
redisplay	Browser.cpp	/^	void Browser::redisplay(void)$/;"	f	class:fim::Browser
redisplay	CommandConsole.cpp	/^	bool CommandConsole::redisplay(void)$/;"	f	class:fim::CommandConsole
redisplay	Viewport.cpp	/^	bool Viewport::redisplay(void)$/;"	f	class:fim::Viewport
redisplay	readline.cpp	/^static void redisplay(void)$/;"	f	namespace:rl
redisplay_hook	readline.cpp	/^static int redisplay_hook(void)$/;"	f	namespace:rl
redraw_	DisplayDevice.h	/^	fim_redraw_t redraw_;$/;"	m	class:DisplayDevice
reduce	Image.cpp	/^	void Image::reduce(fim_scale_t factor)$/;"	f	class:fim::Image
reformat	DebugConsole.cpp	/^		fim_err_t MiniConsole::reformat(int newlwidth)$/;"	f	class:fim::MiniConsole
regexp_goto	Browser.cpp	/^	fim::string Browser::regexp_goto(const args_t &args, int src_dir)$/;"	f	class:fim::Browser
regexp_match	CommandConsole.cpp	/^	bool CommandConsole::regexp_match(const fim_char_t*s, const fim_char_t*r, int rsic)const$/;"	f	class:fim::CommandConsole
regexp_match	common.cpp	/^	bool regexp_match(const fim_char_t*s, const fim_char_t*r, int ignorecase, int ignorenewlines)$/;"	f
reinit	AADevice.cpp	/^	fim_err_t AADevice::reinit(const fim_char_t *rs)$/;"	f	class:AADevice
reinit	DisplayDevice.cpp	/^	fim_err_t DisplayDevice::reinit(const fim_char_t *rs){return FIM_ERR_NO_ERROR;}$/;"	f	class:DisplayDevice
reinit	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::reinit(const fim_char_t *rs)$/;"	f	class:Imlib2Device
reinit	SDLDevice.cpp	/^	fim_err_t SDLDevice::reinit(const fim_char_t *rs)$/;"	f	class:SDLDevice
reload	Browser.cpp	/^	fim::string Browser::reload(void)$/;"	f	class:fim::Browser
reload	Image.cpp	/^	bool Image::reload(void)$/;"	f	class:fim::Image
reltime	Cache.cpp	/^	fim_time_t Cache::reltime(void)const$/;"	f	class:fim::Cache
repeat_last	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::repeat_last(const args_t &args)$/;"	f	class:fim::CommandConsole
res_cm_to_inch	FbiStuffLoader.h	124;"	d
res_inch_to_m	FbiStuffLoader.h	126;"	d
res_m_to_inch	FbiStuffLoader.h	125;"	d
rescale	Image.cpp	/^	fim_err_t Image::rescale( fim_scale_t ns )$/;"	f	class:fim::Image
reserved	FbiStuffPcx.cpp	/^  fim_byte_t     reserved;$/;"	m	struct:fim::__anon3	file:
reset	Image.cpp	/^	void Image::reset(void)$/;"	f	class:fim::Image
reset	Image.h	/^	void reset(void)$/;"	f	class:ImgDscs
reset	Viewport.cpp	/^        void Viewport::reset(void)$/;"	f	class:fim::Viewport
reset	fim.h	/^	void reset(void){nmm=0;mmb=0;mdp=NULL;}$/;"	f	class:fim_mipmap_t
reset	fim_string.cpp	/^	int string::reset(int l)$/;"	f	class:fim::string
reset_wm_caption	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::reset_wm_caption(void)$/;"	f	class:Imlib2Device
reset_wm_caption	SDLDevice.cpp	/^	fim_err_t SDLDevice::reset_wm_caption(void)$/;"	f	class:SDLDevice
resize	AADevice.cpp	/^	fim_err_t AADevice::resize(fim_coo_t w, fim_coo_t h)$/;"	f	class:AADevice
resize	CommandConsole.cpp	/^	fim_err_t CommandConsole::resize(fim_coo_t w, fim_coo_t h)$/;"	f	class:fim::CommandConsole
resize	DisplayDevice.cpp	/^	fim_err_t DisplayDevice::resize(fim_coo_t w, fim_coo_t h){return FIM_ERR_NO_ERROR;}$/;"	f	class:DisplayDevice
resize	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::resize(fim_coo_t w, fim_coo_t h)$/;"	f	class:Imlib2Device
resize	SDLDevice.cpp	/^	fim_err_t SDLDevice::resize(fim_coo_t w, fim_coo_t h)$/;"	f	class:SDLDevice
resunit	FbiStuffTiff.cpp	/^    uint16         resunit;$/;"	m	struct:fim::tiff_state	file:
return_code_	CommandConsole.h	/^	fim_int return_code_;	\/* new, to support the 'return' command *\/$/;"	m	class:fim::CommandConsole
reverseCache_	Cache.h	/^	rcachels_t	reverseCache_;$/;"	m	class:fim::Cache
reverseMove	FimWindow.cpp	/^	FimWindow::Moves FimWindow::reverseMove(Moves move)$/;"	f	class:fim::FimWindow
rgb	FbiStuffJasPer.cpp	/^	fim_byte_t*rgb; \/* pixels, from upper left to lower right, line by line *\/$/;"	m	struct:fim::jp2_state	file:
rgb	FbiStuffPcx.cpp	/^	fim_byte_t*rgb; \/* pixels, from upper left to lower right, line by line *\/$/;"	m	struct:fim::pcx_state	file:
rgb	FbiStuffXyz.cpp	/^	fim_byte_t*rgb; \/* pixels, from upper left to lower right, line by line *\/$/;"	m	struct:fim::xyz_state	file:
rgb2bgr	FbiStuff.cpp	/^static void rgb2bgr(fim_byte_t *data, const fim_coo_t w, const fim_coo_t h) $/;"	f	namespace:fim
right	FimWindow.cpp	/^	FimWindow & FimWindow::right(void)$/;"	f	class:fim::FimWindow
rl	fim.h	/^namespace rl$/;"	n
rl	readline.cpp	/^namespace rl$/;"	n	file:
rl	readline.h	/^namespace rl$/;"	n
rnid	CommandConsole-var.cpp	/^	fim::string CommandConsole::rnid(const fim::string & varname)const$/;"	f	class:fim::CommandConsole
rns	CommandConsole-var.cpp	/^	Namespace * CommandConsole::rns(const fim::string varname)$/;"	f	class:fim::CommandConsole
rnsp_	Namespace.h	/^		CommandConsole*rnsp_; \/\/ root Namespace pointer$/;"	m	class:fim::Namespace
rotate	Image.cpp	/^	fim_err_t Image::rotate( fim_scale_t angle_ )$/;"	f	class:fim::Image
rotate_image	FbiStuff.cpp	/^FbiStuff::rotate_image(struct ida_image *src, float angle)$/;"	f	class:fim::FbiStuff
rotate_image90	FbiStuff.cpp	/^FbiStuff::rotate_image90(struct ida_image *src, unsigned int rotation)$/;"	f	class:fim::FbiStuff
rotation	FbiStuffDjvu.cpp	/^    ddjvu_page_rotation_t rotation;$/;"	m	struct:fim::djvu_state_t	file:
row	FbiStuffGif.cpp	/^    GifPixelType *row;$/;"	m	struct:fim::gif_state	file:
row	FbiStuffPpm.cpp	/^    fim_byte_t *row;$/;"	m	struct:fim::ppm_state	file:
row	FbiStuffTiff.cpp	/^    uint32*        row;$/;"	m	struct:fim::tiff_state	file:
row_stride	FbiStuffDjvu.cpp	/^    int row_stride;    \/* physical row width in output buffer *\/$/;"	m	struct:fim::djvu_state_t	file:
row_stride	FbiStuffJpeg.cpp	/^    int row_stride,linelength;    \/* physical row width in output buffer *\/$/;"	m	struct:fim::jpeg_state	file:
row_stride	FbiStuffPdf.cpp	/^	int row_stride;    \/* physical row width in output buffer *\/$/;"	m	struct:fim::pdf_state_t	file:
row_stride	FbiStuffPs.cpp	/^	int row_stride;    \/* physical row width in output buffer *\/$/;"	m	struct:fim::ps_state_t	file:
rowbuf	FbiStuff.cpp	/^    float *rowbuf;$/;"	m	struct:fim::op_resize_state	file:
rows_	DebugConsole.h	/^		int  rows_;$/;"	m	class:fim::MiniConsole
rrect	FbiStuffDjvu.cpp	/^    ddjvu_rect_t rrect;$/;"	m	struct:fim::djvu_state_t	file:
s	Var.h	/^	fim::string s;$/;"	m	class:fim::Var
s	fim_string.h	/^	fim_char_t s[TOKSIZE];$/;"	m	class:fim::string
s	fim_string.h	/^	fim_char_t*s;		\/* the string : can be NULL *\/$/;"	m	class:fim::string
s	lex.h	/^fim_char_t *s; \/* subscript to sym array *\/$/;"	m	struct:__anon13
sanitize_action	CommandConsole.cpp	/^	fim::string CommandConsole::sanitize_action(const fim::string &cmd)const$/;"	f	class:fim::CommandConsole
sanitize_string_from_nongraph	common.cpp	/^void sanitize_string_from_nongraph(fim_char_t *s, int c)$/;"	f
sanitize_string_from_nongraph_except_newline	common.cpp	/^void sanitize_string_from_nongraph_except_newline(fim_char_t *s, int c)$/;"	f
saved_attributes_	CommandConsole.h	/^	struct termios  saved_attributes_;$/;"	m	class:fim::CommandConsole	typeref:struct:fim::CommandConsole::termios
saved_fl_	CommandConsole.h	/^	fim_sys_int             saved_fl_; \/* file status flags for stdin *\/$/;"	m	class:fim::CommandConsole
scale_	Image.h	/^	fim_scale_t            scale_;	\/* viewport variables *\/$/;"	m	class:fim::Image
scale_image	FbiStuff.cpp	/^FbiStuff::scale_image(const struct ida_image *src, \/*const fim_mipmap_t *mmp,*\/ float scale, float ascale$/;"	f	class:fim::FbiStuff
scale_increment	Image.cpp	/^	fim_err_t Image::scale_increment(fim_scale_t ds)$/;"	f	class:fim::Image
scale_multiply	Image.cpp	/^	fim_err_t Image::scale_multiply(fim_scale_t sm)$/;"	f	class:fim::Image
scale_position_magnify	Viewport.cpp	/^	void Viewport::scale_position_magnify(fim_scale_t factor)$/;"	f	class:fim::Viewport
scale_position_reduce	Viewport.cpp	/^	void Viewport::scale_position_reduce(fim_scale_t factor)$/;"	f	class:fim::Viewport
scon	lex.h	/^stringNodeType scon; \/* string constant *\/$/;"	m	union:nodeTypeTag::__anon17
screen_	SDLDevice.h	/^	SDL_Surface *screen_;$/;"	m	class:SDLDevice
scripts_	CommandConsole.h	/^	args_t scripts_;		\/\/scripts to execute : FIX ME PRIVATE$/;"	m	class:fim::CommandConsole
scroll_	DebugConsole.h	/^		int  scroll_;$/;"	m	class:fim::MiniConsole
scroll_down	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::scroll_down(const args_t& args)$/;"	f	class:fim::CommandConsole
scroll_down	DebugConsole.cpp	/^		fim_err_t MiniConsole::scroll_down(void)$/;"	f	class:fim::MiniConsole
scroll_up	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::scroll_up(const args_t& args)$/;"	f	class:fim::CommandConsole
scroll_up	DebugConsole.cpp	/^		fim_err_t MiniConsole::scroll_up(void)$/;"	f	class:fim::MiniConsole
sd	FbiStuffPs.cpp	/^	SpectreDocument * sd;$/;"	m	struct:fim::ps_state_t	file:
sdl_window_update	SDLDevice.cpp	/^	bool SDLDevice::sdl_window_update(void)$/;"	f	class:SDLDevice
second_	FimWindow.h	/^	FimWindow *first_,*second_;$/;"	m	class:fim::FimWindow
set	Var.h	/^	int   set(const Var &v)$/;"	f	class:fim::Var
setAndCacheStdinCachedImage	Cache.cpp	/^	Image * Cache::setAndCacheStdinCachedImage(Image * image)$/;"	f	class:fim::Cache
setFloat	Var.h	/^	float setFloat(float f){type='f';return this->f=f;}$/;"	f	class:fim::Var
setGlobalVariable	Namespace.cpp	/^		fim_int Namespace::setGlobalVariable(const fim::string& varname,const fim_char_t*value)$/;"	f	class:fim::Namespace
setGlobalVariable	Namespace.cpp	/^		fim_int Namespace::setGlobalVariable(const fim::string& varname,fim_int value)$/;"	f	class:fim::Namespace
setGlobalVariable	Namespace.cpp	/^	        fim_float_t Namespace::setGlobalVariable(const fim::string& varname,fim_float_t value)$/;"	f	class:fim::Namespace
setImage	Viewport.cpp	/^        void Viewport::setImage(fim::Image* ni)$/;"	f	class:fim::Viewport
setInt	Var.h	/^	fim_int   setInt(fim_int i){type='i';return this->i=i;}$/;"	f	class:fim::Var
setRows	DebugConsole.cpp	/^		fim_err_t MiniConsole::setRows(int nr)$/;"	f	class:fim::MiniConsole
setState	Viewport.cpp	/^	void Viewport::setState(const ViewportState & viewportState)$/;"	f	class:fim::Viewport
setString	Var.h	/^	fim::string setString(fim::string &s){type='s';this->s=s;return this->s;}$/;"	f	class:fim::Var
setVariable	CommandConsole-var.cpp	/^	Var CommandConsole::setVariable(const fim::string varname,const Var&value)$/;"	f	class:fim::CommandConsole
setVariable	CommandConsole-var.cpp	/^	fim_float_t CommandConsole::setVariable(const fim::string& varname,fim_float_t value)$/;"	f	class:fim::CommandConsole
setVariable	CommandConsole-var.cpp	/^	fim_int CommandConsole::setVariable(const fim::string& varname,const fim_char_t*value)$/;"	f	class:fim::CommandConsole
setVariable	CommandConsole-var.cpp	/^	fim_int CommandConsole::setVariable(const fim::string& varname,fim_int value)$/;"	f	class:fim::CommandConsole
setVariable	Namespace.cpp	/^		Var Namespace::setVariable(const fim::string& varname,const Var&value)$/;"	f	class:fim::Namespace
setVariable	Namespace.cpp	/^		fim_float_t Namespace::setVariable(const fim::string& varname,fim_float_t value)$/;"	f	class:fim::Namespace
setVariable	Namespace.cpp	/^		fim_int Namespace::setVariable(const fim::string& varname,const fim_char_t*value)$/;"	f	class:fim::Namespace
setVariable	Namespace.cpp	/^		fim_int Namespace::setVariable(const fim::string& varname,fim_int value)$/;"	f	class:fim::Namespace
set_default_fbgamma	FramebufferDevice.h	/^	int set_default_fbgamma(float fbgamma_)$/;"	f	class:fim::FramebufferDevice
set_default_image	Browser.cpp	/^	void Browser::set_default_image(Image *stdin_image)$/;"	f	class:fim::Browser
set_default_vt	FramebufferDevice.h	/^	int set_default_vt(int default_vt)$/;"	f	class:fim::FramebufferDevice
set_fbdev	FramebufferDevice.h	/^	fim_err_t set_fbdev(fim_char_t *fbdev_)$/;"	f	class:fim::FramebufferDevice
set_fbmode	FramebufferDevice.h	/^	fim_err_t set_fbmode(fim_char_t *fbmode_)$/;"	f	class:fim::FramebufferDevice
set_status_bar	CommandConsole.cpp	/^	void CommandConsole::set_status_bar(const fim_char_t *desc, const fim_char_t *info)$/;"	f	class:fim::CommandConsole
set_status_bar	CommandConsole.cpp	/^	void CommandConsole::set_status_bar(fim::string desc, const fim_char_t *info)$/;"	f	class:fim::CommandConsole
set_wm_caption	CommandConsole.cpp	/^	bool CommandConsole::set_wm_caption(const fim_char_t *str)$/;"	f	class:fim::CommandConsole
set_wm_caption	DisplayDevice.cpp	/^	fim_err_t DisplayDevice::set_wm_caption(const fim_char_t *msg){return FIM_ERR_UNSUPPORTED;}$/;"	f	class:DisplayDevice
set_wm_caption	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::set_wm_caption(const fim_char_t *msg)$/;"	f	class:Imlib2Device
set_wm_caption	SDLDevice.cpp	/^	fim_err_t SDLDevice::set_wm_caption(const fim_char_t *msg)$/;"	f	class:SDLDevice
setheight	FimWindow.cpp	/^	fim_coo_t FimWindow::setheight(fim_coo_t h)$/;"	f	class:fim::FimWindow
setpixel	SDLDevice.cpp	/^	inline void SDLDevice::setpixel(SDL_Surface *screen_, fim_coo_t x, fim_coo_t y, Uint8 r, Uint8 g, Uint8 b)$/;"	f	class:SDLDevice
setpixel1	FramebufferDevice.h	/^	static void setpixel1(void *ptr, unsigned int color)$/;"	f	class:fim::FramebufferDevice
setpixel2	FramebufferDevice.h	/^	static void setpixel2(void *ptr, unsigned int color)$/;"	f	class:fim::FramebufferDevice
setpixel3	FramebufferDevice.h	/^	static void setpixel3(void *ptr, unsigned int color)$/;"	f	class:fim::FramebufferDevice
setpixel4	FramebufferDevice.h	/^	static void setpixel4(void *ptr, unsigned int color)$/;"	f	class:fim::FramebufferDevice
setroot	FimWindow.cpp	/^	void FimWindow::setroot(void)$/;"	f	class:fim::FimWindow
setscale	Image.cpp	/^	fim_err_t Image::setscale(fim_scale_t ns)$/;"	f	class:fim::Image
setwidth	FimWindow.cpp	/^	fim_coo_t FimWindow::setwidth(fim_coo_t w)$/;"	f	class:fim::FimWindow
setxorigin	FimWindow.cpp	/^	fim_coo_t FimWindow::setxorigin(fim_coo_t x)$/;"	f	class:fim::FimWindow
setyorigin	FimWindow.cpp	/^	fim_coo_t FimWindow::setyorigin(fim_coo_t y)$/;"	f	class:fim::FimWindow
shadowed	FimWindow.cpp	/^	FimWindow & FimWindow::shadowed(void)const$/;"	f	class:fim::FimWindow
should_redraw	Image.cpp	/^	void Image::should_redraw(int should)const$/;"	f	class:fim::Image
should_redraw	Viewport.cpp	/^	void Viewport::should_redraw(void)const$/;"	f	class:fim::Viewport
show_must_go_on_	CommandConsole.h	/^	fim_int show_must_go_on_;$/;"	m	class:fim::CommandConsole
show_version	fim.cpp	/^	void FimInstance::show_version(void)$/;"	f	class:FimInstance
sina	FbiStuff.cpp	/^    float angle,sina,cosa;$/;"	m	struct:fim::op_rotate_state	file:
size	FbiStuffBmp.cpp	/^    uint32 size;              \/* == BitMapInfoHeader *\/$/;"	m	struct:fim::bmp_hdr	file:
size	FbiStuffLoader.h	/^    unsigned int      size;$/;"	m	struct:fim::ida_extra
size	fim_string.cpp	/^	int  string::size(void)const$/;"	f	class:fim::string
slurp_binary_FD	common.cpp	/^	fim_byte_t* slurp_binary_FD(FILE* fd, size_t  *rs)$/;"	f
slurp_binary_fd	common.cpp	/^	fim_char_t* slurp_binary_fd(int fd,int *rs)$/;"	f
slurp_file	common.cpp	/^	fim::string slurp_file(fim::string filename)$/;"	f
snprintf_centering_info	Viewport.cpp	/^	int Viewport::snprintf_centering_info(char *str, size_t size)const$/;"	f	class:fim::Viewport
sp	FbiStuffPs.cpp	/^	SpectrePage * sp;$/;"	m	struct:fim::ps_state_t	file:
splashColBlack	FbiStuffPdf.cpp	/^static SplashColor splashColBlack;$/;"	m	namespace:fim	file:
splashColBlue	FbiStuffPdf.cpp	/^static SplashColor splashColBlue;$/;"	m	namespace:fim	file:
splashColGreen	FbiStuffPdf.cpp	/^static SplashColor splashColGreen;$/;"	m	namespace:fim	file:
splashColRed	FbiStuffPdf.cpp	/^static SplashColor splashColRed;$/;"	m	namespace:fim	file:
splashColWhite	FbiStuffPdf.cpp	/^static SplashColor splashColWhite;$/;"	m	namespace:fim	file:
splashColorSet	FbiStuffPdf.cpp	/^static void splashColorSet(SplashColorPtr col, Guchar red, Guchar green, Guchar blue, Guchar alpha)$/;"	f	namespace:fim
split	FimWindow.cpp	/^	Rect Rect::split(Splitmode s)$/;"	f	class:fim::Rect
split	FimWindow.cpp	/^	void FimWindow::split(void)$/;"	f	class:fim::FimWindow
src	FbiStuffPs.cpp	/^	SpectreRenderContext * src;$/;"	m	struct:fim::ps_state_t	file:
srcrow	FbiStuff.cpp	/^    unsigned int width,height,srcrow;$/;"	m	struct:fim::op_resize_state	file:
ss	FbiStuffPs.cpp	/^	SpectreStatus ss;$/;"	m	struct:fim::ps_state_t	file:
ss	fim_string.h	/^	std::string ss;$/;"	m	class:fim::string
start_recording	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::start_recording(void)$/;"	f	class:fim::CommandConsole
status_line	AADevice.cpp	/^	fim_err_t AADevice::status_line(const fim_char_t *msg)$/;"	f	class:AADevice
status_line	CACADevice.cpp	/^	fim_err_t CACADevice::status_line(const fim_char_t *msg)$/;"	f	class:CACADevice
status_line	DummyDisplayDevice.h	/^	virtual fim_err_t status_line(const fim_char_t *msg){return FIM_ERR_NO_ERROR;}$/;"	f	class:DummyDisplayDevice
status_line	FramebufferDevice.cpp	/^fim_err_t FramebufferDevice::status_line(const fim_char_t *msg)$/;"	f	class:fim::FramebufferDevice
status_line	Imlib2Device.cpp	/^	fim_err_t Imlib2Device::status_line(const fim_char_t *msg)$/;"	f	class:Imlib2Device
status_line	SDLDevice.cpp	/^	fim_err_t SDLDevice::status_line(const fim_char_t *msg)$/;"	f	class:SDLDevice
status_line_height	AADevice.cpp	/^	fim_coo_t AADevice::status_line_height(void)const$/;"	f	class:AADevice
status_line_height	CACADevice.cpp	/^	fim_coo_t CACADevice::status_line_height(void)const$/;"	f	class:CACADevice
status_line_height	DummyDisplayDevice.h	/^	virtual fim_coo_t status_line_height(void)const{return 0;}$/;"	f	class:DummyDisplayDevice
status_line_height	FramebufferDevice.cpp	/^fim_coo_t FramebufferDevice::status_line_height(void)const$/;"	f	class:FramebufferDevice
status_line_height	Imlib2Device.cpp	/^	fim_coo_t Imlib2Device::status_line_height(void)const$/;"	f	class:Imlib2Device
status_line_height	SDLDevice.cpp	/^	fim_coo_t SDLDevice::status_line_height(void)const$/;"	f	class:SDLDevice
status_screen	CACADevice.h	/^	void status_screen(int desc,int draw_output){}$/;"	f	class:CACADevice
status_screen	CommandConsole.cpp	/^	void CommandConsole::status_screen(const fim_char_t *desc)$/;"	f	class:fim::CommandConsole
status_screen_	Imlib2Device.h	/^	void status_screen_(int desc,int draw_output){ return ; }$/;"	f	class:Imlib2Device
status_screen_	SDLDevice.h	/^	void status_screen_(int desc,int draw_output){ return ; }$/;"	f	class:SDLDevice
steps_	fim.h	/^	fim_off_t	steps_,hsteps_,vsteps_,top_,left_,panned_ ;	\/* viewport variables *\/$/;"	m	class:fim::ViewportState
steps_reset	Viewport.cpp	/^        void Viewport::steps_reset(void)$/;"	f	class:fim::Viewport
stop_recording	CommandConsole-cmd.cpp	/^	fim::string CommandConsole::stop_recording(void)$/;"	f	class:fim::CommandConsole
strchr_count	common.cpp	/^int strchr_count(const fim_char_t*s, int c)$/;"	f
string	fim_string.cpp	/^	string::string(const fim_char_t *str)$/;"	f	class:fim::string
string	fim_string.cpp	/^	string::string(const fim_int i)$/;"	f	class:fim::string
string	fim_string.cpp	/^	string::string(const int i)$/;"	f	class:fim::string
string	fim_string.cpp	/^	string::string(const string& s)$/;"	f	class:fim::string
string	fim_string.cpp	/^	string::string(const unsigned int i)$/;"	f	class:fim::string
string	fim_string.cpp	/^	string::string(void)$/;"	f	class:fim::string
string	fim_string.h	/^	class string{$/;"	c	namespace:fim
stringCon	lex.h	/^typedef enum { intCon, floatCon, typeOpr, stringCon,cmdId\/*cmdId is dead *\/,vId } nodeEnum;$/;"	e	enum:__anon11
stringNodeType	lex.h	/^} stringNodeType;$/;"	t	typeref:struct:__anon13
svga_display_image_new	FramebufferDevice.cpp	/^void FramebufferDevice::svga_display_image_new($/;"	f	class:fim::FramebufferDevice
svga_dither_palette	FramebufferDevice.h	/^void svga_dither_palette(int r, int g, int b)$/;"	f	class:fim::FramebufferDevice
swap	FimWindow.cpp	/^	bool FimWindow::swap(void)$/;"	f	class:fim::FimWindow
swap_bytes_in_int	common.cpp	/^int swap_bytes_in_int(int in)$/;"	f
swap_word	FbiStuffPcx.cpp	/^UWORD swap_word(UWORD x) {$/;"	f	namespace:fim
switch_if_needed	DisplayDevice.h	/^	virtual void switch_if_needed(void){}\/\/ really, only for making happy fbdev$/;"	f	class:DisplayDevice
switch_if_needed	FramebufferDevice.h	/^	void switch_if_needed(void)$/;"	f	class:fim::FramebufferDevice
switch_last_	FramebufferDevice.h	/^	int                        fd_, switch_last_;$/;"	m	class:fim::FramebufferDevice
sym_keys_	CommandConsole.h	/^	sym_keys_t	sym_keys_;	\/\/symbol->code$/;"	m	class:fim::CommandConsole
sym_keys_t	fim.h	/^	typedef std::map<fim::string,fim_key_t > sym_keys_t;	\/\/symbol->code$/;"	t	namespace:fim
term_	FramebufferDevice.h	/^	struct termios            term_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::termios
text_done	FbiStuffText.cpp	/^text_done(void *data)$/;"	f	namespace:fim
text_h	Imlib2Device.h	/^        int w, h, text_w, text_h; \/\/ FIXME: temporary vals$/;"	m	class:Imlib2Device
text_init	FbiStuffText.cpp	/^text_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
text_loader	FbiStuffText.cpp	/^struct ida_loader text_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
text_read	FbiStuffText.cpp	/^text_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
text_state	FbiStuffText.cpp	/^struct text_state {$/;"	s	namespace:fim	file:
text_w	Imlib2Device.h	/^        int w, h, text_w, text_h; \/\/ FIXME: temporary vals$/;"	m	class:Imlib2Device
thumbnail	FbiStuffJpeg.cpp	/^    fim_byte_t  *thumbnail;$/;"	m	struct:fim::jpeg_state	file:
thumbnail	FbiStuffLoader.h	/^    int               thumbnail;$/;"	m	struct:fim::ida_image_info
thumbnail_mgr	FbiStuffJpeg.cpp	/^   static struct jpeg_source_mgr thumbnail_mgr ;$/;"	m	namespace:fim	typeref:struct:fim::jpeg_source_mgr	file:
thumbnail_src_fill	FbiStuffJpeg.cpp	/^static int thumbnail_src_fill(struct jpeg_decompress_struct *cinfo)$/;"	f	namespace:fim
thumbnail_src_skip	FbiStuffJpeg.cpp	/^static void thumbnail_src_skip(struct jpeg_decompress_struct *cinfo,$/;"	f	namespace:fim
thumbnail_src_term	FbiStuffJpeg.cpp	/^static void thumbnail_src_term(struct jpeg_decompress_struct *cinfo)$/;"	f	namespace:fim
tif	FbiStuffTiff.cpp	/^    TIFF*          tif;$/;"	m	struct:fim::tiff_state	file:
tiff1_loader	FbiStuffTiff.cpp	/^static struct ida_loader tiff1_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
tiff2_loader	FbiStuffTiff.cpp	/^static struct ida_loader tiff2_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
tiff_done	FbiStuffTiff.cpp	/^tiff_done(void *data)$/;"	f	namespace:fim
tiff_init	FbiStuffTiff.cpp	/^tiff_init(FILE *fp, const fim_char_t *filename, unsigned int page,$/;"	f	namespace:fim
tiff_read	FbiStuffTiff.cpp	/^tiff_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
tiff_state	FbiStuffTiff.cpp	/^struct tiff_state {$/;"	s	namespace:fim	file:
tiff_write	FbiStuffTiff.cpp	/^tiff_write(FILE *fp, struct ida_image *img)$/;"	f	namespace:fim
tiff_writer	FbiStuffTiff.cpp	/^static struct ida_writer tiff_writer = {$/;"	m	namespace:fim	typeref:struct:fim::ida_writer	file:
time0_	Cache.h	/^	time_t time0_;$/;"	m	class:fim::Cache
tiny	Image.cpp	/^        bool Image::tiny(void)const$/;"	f	class:fim::Image
toggle_fullscreen	Imlib2Device.cpp	/^	void Imlib2Device::toggle_fullscreen(void)$/;"	f	class:Imlib2Device
top_	fim.h	/^	fim_off_t	steps_,hsteps_,vsteps_,top_,left_,panned_ ;	\/* viewport variables *\/$/;"	m	class:fim::ViewportState
touch	Cache.cpp	/^	void Cache::touch(cache_key_t key)$/;"	f	class:fim::Cache
tpos	FbiStuffJpeg.cpp	/^    unsigned int   tpos, tsize;$/;"	m	struct:fim::jpeg_state	file:
transform	Viewport.cpp	/^	void Viewport::transform(bool mirror, bool flip)$/;"	f	class:fim::Viewport
trec	common.cpp	/^void trec(fim_char_t *str,const fim_char_t *f,const fim_char_t*t)$/;"	f
trhex	common.cpp	/^void trhex(fim_char_t *str)$/;"	f
tsize	FbiStuffJpeg.cpp	/^    unsigned int   tpos, tsize;$/;"	m	struct:fim::jpeg_state	file:
tty_	FramebufferDevice.h	/^	int                       fb_,tty_;$/;"	m	class:fim::FramebufferDevice
tty_raw	CommandConsole.cpp	/^	void CommandConsole::tty_raw(void)$/;"	f	class:fim::CommandConsole
tty_restore	CommandConsole.cpp	/^	void CommandConsole::tty_restore(void)$/;"	f	class:fim::CommandConsole
ttynr	FramebufferDevice.h	/^    const fim_char_t *ttynr;$/;"	m	struct:fim::DEVS
txt_height	AADevice.cpp	/^	fim_coo_t AADevice::txt_height(){ return aa_scrheight(ascii_context_) ;}$/;"	f	class:AADevice
txt_height	CACADevice.cpp	/^	int CACADevice::txt_height(){ return width() ;}$/;"	f	class:CACADevice
txt_width	AADevice.cpp	/^	fim_coo_t AADevice::txt_width() { return aa_scrwidth(ascii_context_ ) ;}$/;"	f	class:AADevice
txt_width	CACADevice.cpp	/^	int CACADevice::txt_width() { return width() ;}$/;"	f	class:CACADevice
type	Command.h	/^	fim_cmd_type_t type;$/;"	m	class:fim::Command
type	FbiStuffLoader.h	/^    enum ida_extype   type;$/;"	m	struct:fim::ida_extra	typeref:enum:fim::ida_extra::ida_extype
type	Var.h	/^	int type;$/;"	m	class:fim::Var
type	lex.h	/^nodeEnum type; \/* type of node *\/$/;"	m	struct:nodeTypeTag
typeHint	lex.h	/^int typeHint; \/* WARNING : THIS COULD BE HARMFUL, DUE TO C HACKS.. *\/$/;"	m	struct:nodeTypeTag
typeOpr	lex.h	/^typedef enum { intCon, floatCon, typeOpr, stringCon,cmdId\/*cmdId is dead *\/,vId } nodeEnum;$/;"	e	enum:__anon11
uint16	FbiStuffBit1.cpp	/^typedef unsigned short uint16;$/;"	t	namespace:fim	file:
uint16	FbiStuffBit24.cpp	/^typedef unsigned short uint16;$/;"	t	namespace:fim	file:
uint16	FbiStuffBmp.cpp	/^typedef unsigned short uint16;$/;"	t	namespace:fim	file:
uint16	FbiStuffText.cpp	/^typedef unsigned short uint16;$/;"	t	namespace:fim	file:
uint32	FbiStuffBit1.cpp	/^typedef unsigned int   uint32;$/;"	t	namespace:fim	file:
uint32	FbiStuffBit24.cpp	/^typedef unsigned int   uint32;$/;"	t	namespace:fim	file:
uint32	FbiStuffBmp.cpp	/^typedef unsigned int   uint32;$/;"	t	namespace:fim	file:
uint32	FbiStuffText.cpp	/^typedef unsigned int   uint32;$/;"	t	namespace:fim	file:
unbind	CommandConsole.cpp	/^	fim::string CommandConsole::unbind(const fim::string& kfstr)$/;"	f	class:fim::CommandConsole
unbind	CommandConsole.cpp	/^	fim::string CommandConsole::unbind(fim_key_t c)$/;"	f	class:fim::CommandConsole
unlock	DisplayDevice.h	/^	virtual void unlock(void){}$/;"	f	class:DisplayDevice
unlock	Imlib2Device.cpp	/^	void Imlib2Device::unlock(void)$/;"	f	class:Imlib2Device
unlock	SDLDevice.cpp	/^	void SDLDevice::unlock(void)$/;"	f	class:SDLDevice
unmarkCurrentFile	CommandConsole.cpp	/^	void CommandConsole::unmarkCurrentFile(void)$/;"	f	class:fim::CommandConsole
unused	FbiStuffBmp.cpp	/^    fim_byte_t unused;$/;"	m	struct:fim::bmp_cmap	file:
update	FimWindow.cpp	/^	fim_err_t FimWindow::update(const Rect& corners)$/;"	f	class:fim::FimWindow
update	Image.cpp	/^	bool Image::update(void)$/;"	f	class:fim::Image
updates_	Imlib2Device.h	/^   	Imlib_Updates updates_, current_update_;$/;"	m	class:Imlib2Device
upper	FimWindow.cpp	/^	FimWindow & FimWindow::upper(void)$/;"	f	class:fim::FimWindow
urgb	FbiStuffPcx.cpp	/^} urgb;$/;"	t	namespace:fim	typeref:struct:fim::__anon1	file:
usageCounter_	Cache.h	/^	ccachels_t	usageCounter_;$/;"	m	class:fim::Cache
useCachedImage	Cache.cpp	/^	Image * Cache::useCachedImage(cache_key_t key, ViewportState *vsp, fim_page_t page)$/;"	f	class:fim::Cache
used_image	Cache.cpp	/^	int Cache::used_image(cache_key_t key)const$/;"	f	class:fim::Cache
vId	lex.h	/^typedef enum { intCon, floatCon, typeOpr, stringCon,cmdId\/*cmdId is dead *\/,vId } nodeEnum;$/;"	e	enum:__anon11
val	fim.cpp	/^  int val;$/;"	m	struct:fim_options_t	file:
val_	Arg.h	/^	fim::string val_;$/;"	m	class:fim::Arg
valid	Image.h	/^	bool valid(void)const{return !invalid_;}$/;"	f	class:fim::Image
value	lex.h	/^fim_int value; \/* value of constant *\/$/;"	m	struct:__anon12
var	interpreter.cpp	/^std::vector<fim::string> var(nodeType *p)$/;"	f
variables_	Namespace.h	/^		variables_t variables_;	\/\/id->var$/;"	m	class:fim::Namespace
variables_t	Namespace.h	/^	typedef std::map<const fim::string,Var> variables_t;	\/\/id->var$/;"	t	namespace:fim
varname_generator	readline.cpp	/^static fim_char_t * varname_generator (const fim_char_t *text,int state)$/;"	f	file:
vcachels_t	Cache.h	/^	typedef std::map<cache_key_t,ViewportState >        vcachels_t;	\/\/filename to viewport state$/;"	t	class:fim::Cache
vector	FramebufferDevice.cpp	/^typedef unsigned long vector[DITHER_LEVEL];$/;"	t	namespace:fim	file:
venlarge	FimWindow.cpp	/^	fim_err_t FimWindow::venlarge(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT)$/;"	f	class:fim::FimWindow
version	FbiStuffPcx.cpp	/^  fim_byte_t     version;$/;"	m	struct:fim::__anon3	file:
vi_	SDLDevice.h	/^	const SDL_VideoInfo* vi_;$/;"	m	class:SDLDevice
viewport	Browser.cpp	/^	Viewport* Browser::viewport(void)const$/;"	f	class:fim::Browser
viewportInfo_	Cache.h	/^	vcachels_t	viewportInfo_;$/;"	m	class:fim::Cache
viewport_	CommandConsole.h	/^	Viewport* viewport_;$/;"	m	class:fim::CommandConsole
viewport_	FimWindow.h	/^	Viewport *viewport_;$/;"	m	class:fim::FimWindow
viewport_height	Viewport.cpp	/^	fim_coo_t Viewport::viewport_height(void)const$/;"	f	class:fim::Viewport
viewport_width	Viewport.cpp	/^	fim_coo_t Viewport::viewport_width(void)const$/;"	f	class:fim::Viewport
vis	Imlib2Device.cpp	/^static Visual  *vis=NULL;$/;"	v	file:
visible_	FramebufferDevice.h	/^	int visible_ ;$/;"	m	class:fim::FramebufferDevice
vlgrow	FimWindow.cpp	/^	fim_err_t FimWindow::vlgrow(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT)   {  return corners_.vlgrow(  units); } $/;"	f	class:fim::FimWindow
vlgrow	FimWindow.cpp	/^	fim_err_t Rect::vlgrow(fim_coo_t units)   { h+=units; return FIM_ERR_NO_ERROR; } $/;"	f	class:fim::Rect
vlshrink	FimWindow.cpp	/^	fim_err_t FimWindow::vlshrink(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT) {  return corners_.vlshrink(units); }$/;"	f	class:fim::FimWindow
vlshrink	FimWindow.cpp	/^	fim_err_t Rect::vlshrink(fim_coo_t units) { h-=units; return FIM_ERR_NO_ERROR; }$/;"	f	class:fim::Rect
vnormalize	FimWindow.cpp	/^	fim_err_t FimWindow::vnormalize(fim_coo_t y, fim_coo_t h)$/;"	f	class:fim::FimWindow
vres	FbiStuffPcx.cpp	/^  UWORD          hres, vres;$/;"	m	struct:fim::__anon3	file:
vspacing	FimWindow.h	/^	enum Spacings{ hspacing=0, vspacing=0};$/;"	e	enum:fim::FimWindow::Spacings
vsplit	FimWindow.cpp	/^	Rect Rect::vsplit(Splitmode s){return split(s);}$/;"	f	class:fim::Rect
vsplit	FimWindow.cpp	/^	void FimWindow::vsplit(void)$/;"	f	class:fim::FimWindow
vsteps_	fim.h	/^	fim_off_t	steps_,hsteps_,vsteps_,top_,left_,panned_ ;	\/* viewport variables *\/$/;"	m	class:fim::ViewportState
vt_	FramebufferDevice.h	/^	int             vt_ ;$/;"	m	class:fim::FramebufferDevice
vt_mode_	FramebufferDevice.h	/^	struct vt_mode            vt_mode_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::vt_mode
vt_omode_	FramebufferDevice.h	/^	struct vt_mode            vt_omode_;$/;"	m	class:fim::FramebufferDevice	typeref:struct:fim::FramebufferDevice::vt_mode
vugrow	FimWindow.cpp	/^	fim_err_t FimWindow::vugrow(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT)   {  return corners_.vugrow(  units); } $/;"	f	class:fim::FimWindow
vugrow	FimWindow.cpp	/^	fim_err_t Rect::vugrow(fim_coo_t units)   { y-=units; h+=units ; return FIM_ERR_NO_ERROR; } $/;"	f	class:fim::Rect
vushrink	FimWindow.cpp	/^	fim_err_t FimWindow::vushrink(fim_coo_t units=FIM_CNS_WGROW_STEPS_DEFAULT) {  return corners_.vushrink(units); }$/;"	f	class:fim::FimWindow
vushrink	FimWindow.cpp	/^	fim_err_t Rect::vushrink(fim_coo_t units) { y+=units; h-=units ; return FIM_ERR_NO_ERROR; }$/;"	f	class:fim::Rect
w	FbiStuffBit1.cpp	/^    uint32 w;$/;"	m	struct:fim::bit1_state	file:
w	FbiStuffBit24.cpp	/^    uint32 w;$/;"	m	struct:fim::bit24_state	file:
w	FbiStuffGif.cpp	/^    int w,h;$/;"	m	struct:fim::gif_state	file:
w	FbiStuffJasPer.cpp	/^	int w; \/* image width: 1... *\/$/;"	m	struct:fim::jp2_state	file:
w	FbiStuffPcx.cpp	/^	int w; \/* image width: 1... *\/$/;"	m	struct:fim::pcx_state	file:
w	FbiStuffPng.cpp	/^    png_uint_32  w,h;$/;"	m	struct:fim::fim_png_state	file:
w	FbiStuffPs.cpp	/^	int w,h;$/;"	m	struct:fim::ps_state_t	file:
w	FbiStuffText.cpp	/^    uint32 w;$/;"	m	struct:fim::text_state	file:
w	FbiStuffXyz.cpp	/^	int w; \/* image width: 1... *\/$/;"	m	struct:fim::xyz_state	file:
w	FimWindow.h	/^	fim_coo_t x,y,w,h;	\/\/ units, not pixels$/;"	m	class:fim::Rect
w	Imlib2Device.h	/^        int w, h, text_w, text_h; \/\/ FIXME: temporary vals$/;"	m	class:Imlib2Device
want_mouse_display_	Imlib2Device.h	/^	bool want_mouse_display_;$/;"	m	class:Imlib2Device
want_mouse_display_	SDLDevice.h	/^	bool want_mouse_display_;$/;"	m	class:SDLDevice
want_resize_	Imlib2Device.h	/^	bool want_resize_;$/;"	m	class:Imlib2Device
want_resize_	SDLDevice.h	/^	bool want_resize_;$/;"	m	class:SDLDevice
want_windowed_	Imlib2Device.h	/^	bool want_windowed_;$/;"	m	class:Imlib2Device
want_windowed_	SDLDevice.h	/^	bool want_windowed_;$/;"	m	class:SDLDevice
width	AADevice.cpp	/^	fim_coo_t AADevice::width() { return aa_imgwidth(ascii_context_ ) ;}$/;"	f	class:AADevice
width	CACADevice.cpp	/^	int CACADevice::width() { return caca_get_height();}$/;"	f	class:CACADevice
width	DummyDisplayDevice.h	/^	virtual fim_coo_t width(void){return 1;\/* 0 would be so cruel *\/}$/;"	f	class:DummyDisplayDevice
width	FbiStuff.cpp	/^    unsigned int width,height,srcrow;$/;"	m	struct:fim::op_resize_state	file:
width	FbiStuff.h	/^    int width;$/;"	m	struct:fim::op_resize_parm
width	FbiStuffBmp.cpp	/^    uint32 width;$/;"	m	struct:fim::bmp_hdr	file:
width	FbiStuffLoader.h	/^    unsigned int      width;$/;"	m	struct:fim::ida_image_info
width	FbiStuffMatrixMarket.cpp	/^	int width  ;$/;"	m	struct:fim::mm_state_t	file:
width	FbiStuffPpm.cpp	/^    int           width,height;$/;"	m	struct:fim::ppm_state	file:
width	FbiStuffTiff.cpp	/^    uint32         width,height;$/;"	m	struct:fim::tiff_state	file:
width	FimWindow.cpp	/^	fim_coo_t FimWindow::width(void)const$/;"	f	class:fim::FimWindow
width	FontServer.h	/^    int                maxenc,width,height;$/;"	m	struct:fim::fs_font
width	FramebufferDevice.h	/^	int width(void)$/;"	f	class:fim::FramebufferDevice
width	Image.cpp	/^	int Image::width(void)const$/;"	f	class:fim::Image
width	Imlib2Device.cpp	/^	fim_coo_t Imlib2Device::width(void)$/;"	f	class:Imlib2Device
width	SDLDevice.cpp	/^	fim_coo_t SDLDevice::width(void)$/;"	f	class:SDLDevice
win	Imlib2Device.cpp	/^static Window   win;$/;"	v	file:
window	Command.h	/^		FimWindow *window;$/;"	m	union:fim::Command::__anon6
window_	CommandConsole.h	/^	fim::FimWindow * window_;$/;"	m	class:fim::CommandConsole
window_	Viewport.h	/^	FimWindow *window_;$/;"	m	class:fim::Viewport
windowf	Command.h	/^		fim::string (FimWindow::*windowf)(const std::vector<fim::string>&) ;$/;"	m	class:fim::Command::__anon5::fim
with_boz_patch_	FramebufferDevice.h	/^	int with_boz_patch_;$/;"	m	class:fim::FramebufferDevice
with_scriptfile	CommandConsole.cpp	/^	bool CommandConsole::with_scriptfile(void)const$/;"	f	class:fim::CommandConsole
work	FbiStuffLoader.h	/^    void  (*work)(const struct ida_image *src, struct ida_rect *rect,$/;"	m	struct:fim::ida_op
write	FbiStuffLoader.h	/^    int   (*write)(FILE *fp, struct ida_image *img);$/;"	m	struct:fim::ida_writer
x	FimWindow.h	/^	fim_coo_t x,y,w,h;	\/\/ units, not pixels$/;"	m	class:fim::Rect
x1	FbiStuffLoader.h	/^    int x1,y1,x2,y2;$/;"	m	struct:fim::ida_rect
x2	FbiStuffLoader.h	/^    int x1,y1,x2,y2;$/;"	m	struct:fim::ida_rect
xend	FbiStuffPcx.cpp	/^  UWORD          xstart, ystart, xend, yend;$/;"	m	struct:fim::__anon3	file:
xorigin	FimWindow.cpp	/^	fim_coo_t FimWindow::xorigin(void)const$/;"	f	class:fim::FimWindow
xorigin	Viewport.cpp	/^	fim_coo_t Viewport::xorigin(void)$/;"	f	class:fim::Viewport
xpels_meter	FbiStuffBmp.cpp	/^    uint32 xpels_meter;$/;"	m	struct:fim::bmp_hdr	file:
xres	FbiStuffTiff.cpp	/^    float          xres,yres;$/;"	m	struct:fim::tiff_state	file:
xs_	FramebufferDevice.h	/^	int xs_ ;$/;"	m	class:fim::FramebufferDevice
xscale	FbiStuff.cpp	/^    float xscale,yscale,inleft;$/;"	m	struct:fim::op_resize_state	file:
xstart	FbiStuffPcx.cpp	/^  UWORD          xstart, ystart, xend, yend;$/;"	m	struct:fim::__anon3	file:
xyz_done	FbiStuffXyz.cpp	/^xyz_done(void *data)$/;"	f	namespace:fim
xyz_init	FbiStuffXyz.cpp	/^xyz_init(FILE *fp, const fim_char_t *filename, unsigned int page, struct ida_image_info *i, int thumbnail)$/;"	f	namespace:fim
xyz_load_image_fp	FbiStuffXyz.cpp	/^static fim_err_t xyz_load_image_fp(FILE *fp, unsigned int page, unsigned char * rgb, int bytes_per_line)$/;"	f	namespace:fim
xyz_load_image_info_fp	FbiStuffXyz.cpp	/^static fim_err_t xyz_load_image_info_fp(FILE *fp, int * numpagesp, unsigned int *wp, unsigned int *hp)$/;"	f	namespace:fim
xyz_loader	FbiStuffXyz.cpp	/^struct ida_loader xyz_loader = {$/;"	m	namespace:fim	typeref:struct:fim::ida_loader	file:
xyz_read	FbiStuffXyz.cpp	/^xyz_read(fim_byte_t *dst, unsigned int line, void *data)$/;"	f	namespace:fim
xyz_state	FbiStuffXyz.cpp	/^struct xyz_state {$/;"	s	namespace:fim	file:
y	FimWindow.h	/^	fim_coo_t x,y,w,h;	\/\/ units, not pixels$/;"	m	class:fim::Rect
y1	FbiStuffLoader.h	/^    int x1,y1,x2,y2;$/;"	m	struct:fim::ida_rect
y2	FbiStuffLoader.h	/^    int x1,y1,x2,y2;$/;"	m	struct:fim::ida_rect
yend	FbiStuffPcx.cpp	/^  UWORD          xstart, ystart, xend, yend;$/;"	m	struct:fim::__anon3	file:
yorigin	FimWindow.cpp	/^	fim_coo_t FimWindow::yorigin(void)const$/;"	f	class:fim::FimWindow
yorigin	Viewport.cpp	/^	fim_coo_t Viewport::yorigin(void)$/;"	f	class:fim::Viewport
ypels_meter	FbiStuffBmp.cpp	/^    uint32 ypels_meter;$/;"	m	struct:fim::bmp_hdr	file:
yres	FbiStuffTiff.cpp	/^    float          xres,yres;$/;"	m	struct:fim::tiff_state	file:
ys_	FramebufferDevice.h	/^	int ys_ ;$/;"	m	class:fim::FramebufferDevice
yscale	FbiStuff.cpp	/^    float xscale,yscale,inleft;$/;"	m	struct:fim::op_resize_state	file:
ystart	FbiStuffPcx.cpp	/^  UWORD          xstart, ystart, xend, yend;$/;"	m	struct:fim::__anon3	file:
yyFlexLexer	common.h	23;"	d
~AADevice	AADevice.cpp	/^	AADevice::~AADevice(void)$/;"	f	class:AADevice
~Benchmarkable	Benchmarkable.h	/^		virtual ~Benchmarkable(void){}$/;"	f	class:Benchmarkable
~Browser	Browser.h	/^	~Browser(void) { }$/;"	f	class:fim::Browser
~Cache	Cache.cpp	/^	Cache::~Cache(void)$/;"	f	class:fim::Cache
~Command	Command.h	/^	~Command(void) { }$/;"	f	class:fim::Command
~CommandConsole	CommandConsole.cpp	/^	CommandConsole::~CommandConsole(void)$/;"	f	class:fim::CommandConsole
~DisplayDevice	DisplayDevice.cpp	/^DisplayDevice::~DisplayDevice(void)$/;"	f	class:DisplayDevice
~DummyDisplayDevice	DummyDisplayDevice.h	/^	virtual ~DummyDisplayDevice(void){}$/;"	f	class:DummyDisplayDevice
~FimWindow	FimWindow.cpp	/^	FimWindow::~FimWindow(void)$/;"	f	class:fim::FimWindow
~FramebufferDevice	FramebufferDevice.cpp	/^FramebufferDevice::~FramebufferDevice(void)$/;"	f	class:FramebufferDevice
~Image	Image.cpp	/^	Image::~Image(void)$/;"	f	class:fim::Image
~MiniConsole	DebugConsole.h	/^		virtual ~MiniConsole(void){}$/;"	f	class:fim::MiniConsole
~Namespace	Namespace.h	/^		virtual ~Namespace(void){}$/;"	f	class:fim::Namespace
~Viewport	Viewport.cpp	/^	Viewport::~Viewport(void)$/;"	f	class:fim::Viewport
~fim_mipmap_t	fim.h	/^	~fim_mipmap_t(void){this->dealloc();}$/;"	f	class:fim_mipmap_t
~string	fim_string.cpp	/^	string::~string(void)$/;"	f	class:fim::string
